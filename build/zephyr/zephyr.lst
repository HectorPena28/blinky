
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	40 2f 00 20 31 1f 00 00 e3 64 00 00 e9 1e 00 00     @/. 1....d......
  10:	e9 1e 00 00 e9 1e 00 00 e9 1e 00 00 00 00 00 00     ................
	...
  2c:	75 1b 00 00 e9 1e 00 00 00 00 00 00 1d 1b 00 00     u...............
  3c:	e9 1e 00 00                                         ....

00000040 <_irq_vector_table>:
  40:	55 1c 00 00 55 1c 00 00 55 1c 00 00 55 1c 00 00     U...U...U...U...
  50:	55 1c 00 00 55 1c 00 00 55 1c 00 00 55 1c 00 00     U...U...U...U...
  60:	55 1c 00 00 55 1c 00 00 55 1c 00 00 55 1c 00 00     U...U...U...U...
  70:	55 1c 00 00 55 1c 00 00 55 1c 00 00 55 1c 00 00     U...U...U...U...
  80:	55 1c 00 00 55 1c 00 00 55 1c 00 00 55 1c 00 00     U...U...U...U...
  90:	55 1c 00 00 55 1c 00 00 55 1c 00 00 55 1c 00 00     U...U...U...U...
  a0:	55 1c 00 00 55 1c 00 00 55 1c 00 00 55 1c 00 00     U...U...U...U...
  b0:	55 1c 00 00 55 1c 00 00 55 1c 00 00 55 1c 00 00     U...U...U...U...
  c0:	55 1c 00 00 55 1c 00 00 55 1c 00 00 55 1c 00 00     U...U...U...U...
  d0:	55 1c 00 00 55 1c 00 00 55 1c 00 00 55 1c 00 00     U...U...U...U...
  e0:	55 1c 00 00 55 1c 00 00 55 1c 00 00 55 1c 00 00     U...U...U...U...
  f0:	55 1c 00 00 55 1c 00 00 55 1c 00 00 55 1c 00 00     U...U...U...U...

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     138:	4607      	mov	r7, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e09      	ldr	r6, [sp, #36]	; 0x24
     140:	4615      	mov	r5, r2
     142:	463c      	mov	r4, r7
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c6 	bne.w	2d8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x16b>
     14c:	4282      	cmp	r2, r0
     14e:	fab2 f782 	clz	r7, r2
     152:	d946      	bls.n	1e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x75>
     154:	b14f      	cbz	r7, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c7 0e20 	rsb	lr, r7, #32
     15a:	fa24 fe0e 	lsr.w	lr, r4, lr
     15e:	fa00 f307 	lsl.w	r3, r0, r7
     162:	40bd      	lsls	r5, r7
     164:	ea4e 0c03 	orr.w	ip, lr, r3
     168:	40bc      	lsls	r4, r7
     16a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     16e:	fa1f fe85 	uxth.w	lr, r5
     172:	fbbc f9f8 	udiv	r9, ip, r8
     176:	0c22      	lsrs	r2, r4, #16
     178:	fb08 c319 	mls	r3, r8, r9, ip
     17c:	fb09 fa0e 	mul.w	sl, r9, lr
     180:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     184:	459a      	cmp	sl, r3
     186:	d928      	bls.n	1da <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6d>
     188:	18eb      	adds	r3, r5, r3
     18a:	f109 30ff 	add.w	r0, r9, #4294967295
     18e:	d204      	bcs.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     190:	459a      	cmp	sl, r3
     192:	d902      	bls.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     194:	f1a9 0002 	sub.w	r0, r9, #2
     198:	442b      	add	r3, r5
     19a:	eba3 030a 	sub.w	r3, r3, sl
     19e:	b2a4      	uxth	r4, r4
     1a0:	fbb3 f2f8 	udiv	r2, r3, r8
     1a4:	fb08 3312 	mls	r3, r8, r2, r3
     1a8:	fb02 fe0e 	mul.w	lr, r2, lr
     1ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1b0:	45a6      	cmp	lr, r4
     1b2:	d914      	bls.n	1de <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x71>
     1b4:	192c      	adds	r4, r5, r4
     1b6:	f102 33ff 	add.w	r3, r2, #4294967295
     1ba:	d203      	bcs.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1bc:	45a6      	cmp	lr, r4
     1be:	d901      	bls.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1c0:	1e93      	subs	r3, r2, #2
     1c2:	442c      	add	r4, r5
     1c4:	eba4 040e 	sub.w	r4, r4, lr
     1c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1cc:	b11e      	cbz	r6, 1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     1ce:	40fc      	lsrs	r4, r7
     1d0:	2300      	movs	r3, #0
     1d2:	6034      	str	r4, [r6, #0]
     1d4:	6073      	str	r3, [r6, #4]
     1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1da:	4648      	mov	r0, r9
     1dc:	e7dd      	b.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     1de:	4613      	mov	r3, r2
     1e0:	e7f0      	b.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1e2:	b902      	cbnz	r2, 1e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x79>
     1e4:	deff      	udf	#255	; 0xff
     1e6:	bb87      	cbnz	r7, 24a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xdd>
     1e8:	1a83      	subs	r3, r0, r2
     1ea:	2101      	movs	r1, #1
     1ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1f0:	b2aa      	uxth	r2, r5
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	0c20      	lsrs	r0, r4, #16
     1f8:	fb0e 331c 	mls	r3, lr, ip, r3
     1fc:	fb0c f802 	mul.w	r8, ip, r2
     200:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     204:	4598      	cmp	r8, r3
     206:	d963      	bls.n	2d0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x163>
     208:	18eb      	adds	r3, r5, r3
     20a:	f10c 30ff 	add.w	r0, ip, #4294967295
     20e:	d204      	bcs.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     210:	4598      	cmp	r8, r3
     212:	d902      	bls.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     214:	f1ac 0002 	sub.w	r0, ip, #2
     218:	442b      	add	r3, r5
     21a:	eba3 0308 	sub.w	r3, r3, r8
     21e:	b2a4      	uxth	r4, r4
     220:	fbb3 fcfe 	udiv	ip, r3, lr
     224:	fb0e 331c 	mls	r3, lr, ip, r3
     228:	fb0c f202 	mul.w	r2, ip, r2
     22c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     230:	42a2      	cmp	r2, r4
     232:	d94f      	bls.n	2d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x167>
     234:	192c      	adds	r4, r5, r4
     236:	f10c 33ff 	add.w	r3, ip, #4294967295
     23a:	d204      	bcs.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     23c:	42a2      	cmp	r2, r4
     23e:	d902      	bls.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     240:	f1ac 0302 	sub.w	r3, ip, #2
     244:	442c      	add	r4, r5
     246:	1aa4      	subs	r4, r4, r2
     248:	e7be      	b.n	1c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5b>
     24a:	f1c7 0c20 	rsb	ip, r7, #32
     24e:	fa20 f80c 	lsr.w	r8, r0, ip
     252:	fa00 f307 	lsl.w	r3, r0, r7
     256:	fa24 fc0c 	lsr.w	ip, r4, ip
     25a:	40bd      	lsls	r5, r7
     25c:	ea4c 0203 	orr.w	r2, ip, r3
     260:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     264:	b2ab      	uxth	r3, r5
     266:	fbb8 fcfe 	udiv	ip, r8, lr
     26a:	0c11      	lsrs	r1, r2, #16
     26c:	fb0e 801c 	mls	r0, lr, ip, r8
     270:	fb0c f903 	mul.w	r9, ip, r3
     274:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     278:	4581      	cmp	r9, r0
     27a:	fa04 f407 	lsl.w	r4, r4, r7
     27e:	d923      	bls.n	2c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15b>
     280:	1828      	adds	r0, r5, r0
     282:	f10c 31ff 	add.w	r1, ip, #4294967295
     286:	d204      	bcs.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     288:	4581      	cmp	r9, r0
     28a:	d902      	bls.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     28c:	f1ac 0102 	sub.w	r1, ip, #2
     290:	4428      	add	r0, r5
     292:	eba0 0009 	sub.w	r0, r0, r9
     296:	b292      	uxth	r2, r2
     298:	fbb0 fcfe 	udiv	ip, r0, lr
     29c:	fb0e 001c 	mls	r0, lr, ip, r0
     2a0:	fb0c f803 	mul.w	r8, ip, r3
     2a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     2a8:	4598      	cmp	r8, r3
     2aa:	d90f      	bls.n	2cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15f>
     2ac:	18eb      	adds	r3, r5, r3
     2ae:	f10c 32ff 	add.w	r2, ip, #4294967295
     2b2:	d204      	bcs.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2b4:	4598      	cmp	r8, r3
     2b6:	d902      	bls.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2b8:	f1ac 0202 	sub.w	r2, ip, #2
     2bc:	442b      	add	r3, r5
     2be:	eba3 0308 	sub.w	r3, r3, r8
     2c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2c6:	e791      	b.n	1ec <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7f>
     2c8:	4661      	mov	r1, ip
     2ca:	e7e2      	b.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     2cc:	4662      	mov	r2, ip
     2ce:	e7f6      	b.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2d0:	4660      	mov	r0, ip
     2d2:	e7a2      	b.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     2d4:	4663      	mov	r3, ip
     2d6:	e7b6      	b.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     2d8:	4283      	cmp	r3, r0
     2da:	d905      	bls.n	2e8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x17b>
     2dc:	b10e      	cbz	r6, 2e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x175>
     2de:	e9c6 7000 	strd	r7, r0, [r6]
     2e2:	2100      	movs	r1, #0
     2e4:	4608      	mov	r0, r1
     2e6:	e776      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     2e8:	fab3 f183 	clz	r1, r3
     2ec:	b981      	cbnz	r1, 310 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1a3>
     2ee:	4283      	cmp	r3, r0
     2f0:	d301      	bcc.n	2f6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x189>
     2f2:	42ba      	cmp	r2, r7
     2f4:	d80a      	bhi.n	30c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x19f>
     2f6:	1abc      	subs	r4, r7, r2
     2f8:	eb60 0303 	sbc.w	r3, r0, r3
     2fc:	2001      	movs	r0, #1
     2fe:	469c      	mov	ip, r3
     300:	2e00      	cmp	r6, #0
     302:	d068      	beq.n	3d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x269>
     304:	e9c6 4c00 	strd	r4, ip, [r6]
     308:	2100      	movs	r1, #0
     30a:	e764      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     30c:	4608      	mov	r0, r1
     30e:	e7f7      	b.n	300 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x193>
     310:	f1c1 0c20 	rsb	ip, r1, #32
     314:	408b      	lsls	r3, r1
     316:	fa22 f40c 	lsr.w	r4, r2, ip
     31a:	431c      	orrs	r4, r3
     31c:	fa02 f501 	lsl.w	r5, r2, r1
     320:	fa00 f301 	lsl.w	r3, r0, r1
     324:	fa27 f20c 	lsr.w	r2, r7, ip
     328:	fa20 fb0c 	lsr.w	fp, r0, ip
     32c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     330:	4313      	orrs	r3, r2
     332:	fbbb f8f9 	udiv	r8, fp, r9
     336:	fa1f fe84 	uxth.w	lr, r4
     33a:	fb09 bb18 	mls	fp, r9, r8, fp
     33e:	0c1a      	lsrs	r2, r3, #16
     340:	fb08 fa0e 	mul.w	sl, r8, lr
     344:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     348:	4592      	cmp	sl, r2
     34a:	fa07 f701 	lsl.w	r7, r7, r1
     34e:	d93e      	bls.n	3ce <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x261>
     350:	18a2      	adds	r2, r4, r2
     352:	f108 30ff 	add.w	r0, r8, #4294967295
     356:	d204      	bcs.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     358:	4592      	cmp	sl, r2
     35a:	d902      	bls.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     35c:	f1a8 0002 	sub.w	r0, r8, #2
     360:	4422      	add	r2, r4
     362:	eba2 020a 	sub.w	r2, r2, sl
     366:	b29b      	uxth	r3, r3
     368:	fbb2 f8f9 	udiv	r8, r2, r9
     36c:	fb09 2218 	mls	r2, r9, r8, r2
     370:	fb08 fe0e 	mul.w	lr, r8, lr
     374:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     378:	4596      	cmp	lr, r2
     37a:	d92a      	bls.n	3d2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x265>
     37c:	18a2      	adds	r2, r4, r2
     37e:	f108 33ff 	add.w	r3, r8, #4294967295
     382:	d204      	bcs.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     384:	4596      	cmp	lr, r2
     386:	d902      	bls.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     388:	f1a8 0302 	sub.w	r3, r8, #2
     38c:	4422      	add	r2, r4
     38e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     392:	fba0 9305 	umull	r9, r3, r0, r5
     396:	eba2 020e 	sub.w	r2, r2, lr
     39a:	429a      	cmp	r2, r3
     39c:	46ce      	mov	lr, r9
     39e:	4698      	mov	r8, r3
     3a0:	d302      	bcc.n	3a8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23b>
     3a2:	d106      	bne.n	3b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x245>
     3a4:	454f      	cmp	r7, r9
     3a6:	d204      	bcs.n	3b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x245>
     3a8:	ebb9 0e05 	subs.w	lr, r9, r5
     3ac:	eb63 0804 	sbc.w	r8, r3, r4
     3b0:	3801      	subs	r0, #1
     3b2:	b186      	cbz	r6, 3d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x269>
     3b4:	ebb7 030e 	subs.w	r3, r7, lr
     3b8:	eb62 0708 	sbc.w	r7, r2, r8
     3bc:	fa07 fc0c 	lsl.w	ip, r7, ip
     3c0:	40cb      	lsrs	r3, r1
     3c2:	ea4c 0303 	orr.w	r3, ip, r3
     3c6:	40cf      	lsrs	r7, r1
     3c8:	e9c6 3700 	strd	r3, r7, [r6]
     3cc:	e79c      	b.n	308 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x19b>
     3ce:	4640      	mov	r0, r8
     3d0:	e7c7      	b.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     3d2:	4643      	mov	r3, r8
     3d4:	e7db      	b.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     3d6:	4631      	mov	r1, r6
     3d8:	e6fd      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
	...

000003dc <main>:
static const struct gpio_dt_spec led = GPIO_DT_SPEC_GET(LED0_NODE, gpios);
static const struct gpio_dt_spec rs485en = GPIO_DT_SPEC_GET(rs485_enable, gpios);


void main(void)
{
     3dc:	b500      	push	{lr}
     3de:	b0e9      	sub	sp, #420	; 0x1a4
	printk("Program Init\n");
     3e0:	4839      	ldr	r0, [pc, #228]	; (4c8 <__data_size+0x94>)
     3e2:	f005 fe66 	bl	60b2 <printk>

	/* Create a new driver instance */
	ad717x_dev* ad411x_dev;
	ad717x_init_param ad411x_init;

	ad411x_init.active_device = ID_AD4111;
     3e6:	2300      	movs	r3, #0
     3e8:	f88d 30e6 	strb.w	r3, [sp, #230]	; 0xe6
	ad411x_init.regs = ad4111_regs;
     3ec:	4a37      	ldr	r2, [pc, #220]	; (4cc <__data_size+0x98>)
     3ee:	9238      	str	r2, [sp, #224]	; 0xe0
	ad411x_init.useCRC = AD717X_DISABLE;
     3f0:	f88d 30e5 	strb.w	r3, [sp, #229]	; 0xe5
	ad411x_init.num_regs = sizeof(ad4111_regs) / sizeof(ad4111_regs[0]);
     3f4:	2237      	movs	r2, #55	; 0x37
     3f6:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4
	ad411x_init.num_setups = 1; //Num of ADC channel setups, Setup0 0-10V, Setup1 4-20mA
     3fa:	2201      	movs	r2, #1
     3fc:	f88d 20e9 	strb.w	r2, [sp, #233]	; 0xe9
	ad411x_init.num_channels = 12; //Use 12 channels
     400:	210c      	movs	r1, #12
     402:	f88d 10e8 	strb.w	r1, [sp, #232]	; 0xe8
	ad411x_init.mode = CONTINUOUS; //Continuos read mode
     406:	f88d 3194 	strb.w	r3, [sp, #404]	; 0x194

	// ADC Setup
	//Setup configuration for Voltage input 0-10V, Setup0
	ad411x_init.setups[0].bi_unipolar = false; //Set all channels to unipolar
     40a:	f88d 312a 	strb.w	r3, [sp, #298]	; 0x12a
	ad411x_init.setups[0].ref_buff = false; //Disable Reference Buffer
     40e:	f88d 312b 	strb.w	r3, [sp, #299]	; 0x12b
	ad411x_init.setups[0].input_buff = true; //Enable Input Buffer
     412:	f88d 212c 	strb.w	r2, [sp, #300]	; 0x12c
	ad411x_init.setups[0].ref_source = EXTERNAL_REF; //Set channel Reference Source to EXTERNAL 2.5V REF
     416:	f88d 312d 	strb.w	r3, [sp, #301]	; 0x12d
	ad411x_init.filter_configuration[0].odr = sps_503; //503 SPS Output data rate
     41a:	220b      	movs	r2, #11
     41c:	f88d 2170 	strb.w	r2, [sp, #368]	; 0x170

	//Setup configuration for Voltage input 0-10V, Setup1
	ad411x_init.setups[1].bi_unipolar = false; //Set all channels to unipolar
     420:	f88d 312e 	strb.w	r3, [sp, #302]	; 0x12e
	ad411x_init.setups[1].ref_buff = false; //Disable Reference Buffer
     424:	f88d 312f 	strb.w	r3, [sp, #303]	; 0x12f
	ad411x_init.setups[1].input_buff = false; //Input Buffer disabled for 4-20mA inputs
     428:	f88d 3130 	strb.w	r3, [sp, #304]	; 0x130
	ad411x_init.setups[1].ref_source = EXTERNAL_REF; //Set channel Reference Source to EXTERNAL 2.5V REF
     42c:	f88d 3131 	strb.w	r3, [sp, #305]	; 0x131
	ad411x_init.filter_configuration[1].odr = sps_503; //503 SPS Output data rate
     430:	f88d 2175 	strb.w	r2, [sp, #373]	; 0x175

	// TODO: unused 4-20mA gives overrange error, check
	//Disabled for now

	//Config LED
	ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT_ACTIVE);
     434:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
     438:	4825      	ldr	r0, [pc, #148]	; (4d0 <__data_size+0x9c>)
     43a:	f005 fbd7 	bl	5bec <gpio_pin_configure_dt>
	if (ret < 0) {
     43e:	f010 0f80 	tst.w	r0, #128	; 0x80
     442:	d13e      	bne.n	4c2 <__data_size+0x8e>
		return;
	}

	//Config RS485 Enable
	ret = gpio_pin_configure_dt(&rs485en, GPIO_OUTPUT_ACTIVE);
     444:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
     448:	4822      	ldr	r0, [pc, #136]	; (4d4 <__data_size+0xa0>)
     44a:	f005 fbcf 	bl	5bec <gpio_pin_configure_dt>
	if (ret < 0) {
     44e:	f010 0f80 	tst.w	r0, #128	; 0x80
     452:	d136      	bne.n	4c2 <__data_size+0x8e>
		return;
	}

	/* Initialize the driver instance */
	ret = AD717X_Init(&ad411x_dev, ad411x_init);
     454:	22c4      	movs	r2, #196	; 0xc4
     456:	a935      	add	r1, sp, #212	; 0xd4
     458:	4668      	mov	r0, sp
     45a:	f006 f91d 	bl	6698 <memcpy>
     45e:	ab32      	add	r3, sp, #200	; 0xc8
     460:	cb0e      	ldmia	r3, {r1, r2, r3}
     462:	a866      	add	r0, sp, #408	; 0x198
     464:	f000 f97a 	bl	75c <AD717X_Init>
	if (ret < 0) {
     468:	f010 0f80 	tst.w	r0, #128	; 0x80
     46c:	d019      	beq.n	4a2 <__data_size+0x6e>
		printk("bobop1\n");
     46e:	481a      	ldr	r0, [pc, #104]	; (4d8 <__data_size+0xa4>)
     470:	f005 fe1f 	bl	60b2 <printk>
     474:	e015      	b.n	4a2 <__data_size+0x6e>

	while (1) {
		// /* Read data from the ADC */
		ret = AD717X_WaitForReady(ad411x_init, timeout);
		if (ret < 0)
			printk("bobop2\n");
     476:	4819      	ldr	r0, [pc, #100]	; (4dc <__data_size+0xa8>)
     478:	f005 fe1b 	bl	60b2 <printk>
			Code = (2^N × IIN × 50 Ω)/VREF
			Our Side: 5.02V input = 5.2925944 in code, adjust offset
		*/
		//Voltage Input (V) = Data * 0.000001490116119384765625
		//TODO: Print all channels data
		AD717X_ReadData(ad411x_init, &sample);
     47c:	ab67      	add	r3, sp, #412	; 0x19c
     47e:	9330      	str	r3, [sp, #192]	; 0xc0
     480:	22c0      	movs	r2, #192	; 0xc0
     482:	a936      	add	r1, sp, #216	; 0xd8
     484:	4668      	mov	r0, sp
     486:	f006 f907 	bl	6698 <memcpy>
     48a:	ab32      	add	r3, sp, #200	; 0xc8
     48c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     48e:	f005 fd8d 	bl	5fac <AD717X_ReadData>

		// printk("CRUDE CHN = %d, S Read: %d\n", ret, sample);

		int channel = sample & 0x0F;
     492:	9967      	ldr	r1, [sp, #412]	; 0x19c
		sample = sample >> 7;
     494:	09ca      	lsrs	r2, r1, #7
     496:	9267      	str	r2, [sp, #412]	; 0x19c

		printk("CHN = %d, S Read: %d\n", channel, sample);
     498:	f001 010f 	and.w	r1, r1, #15
     49c:	4810      	ldr	r0, [pc, #64]	; (4e0 <__data_size+0xac>)
     49e:	f005 fe08 	bl	60b2 <printk>
		ret = AD717X_WaitForReady(ad411x_init, timeout);
     4a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     4a6:	9330      	str	r3, [sp, #192]	; 0xc0
     4a8:	22c0      	movs	r2, #192	; 0xc0
     4aa:	a936      	add	r1, sp, #216	; 0xd8
     4ac:	4668      	mov	r0, sp
     4ae:	f006 f8f3 	bl	6698 <memcpy>
     4b2:	ab32      	add	r3, sp, #200	; 0xc8
     4b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     4b6:	f005 fd46 	bl	5f46 <AD717X_WaitForReady>
		if (ret < 0)
     4ba:	f010 0f80 	tst.w	r0, #128	; 0x80
     4be:	d1da      	bne.n	476 <__data_size+0x42>
     4c0:	e7dc      	b.n	47c <__data_size+0x48>

		// k_sleep(K_MSEC(5));
	}
}
     4c2:	b069      	add	sp, #420	; 0x1a4
     4c4:	f85d fb04 	ldr.w	pc, [sp], #4
     4c8:	00007e98 	.word	0x00007e98
     4cc:	20000000 	.word	0x20000000
     4d0:	00007ed0 	.word	0x00007ed0
     4d4:	00007ed8 	.word	0x00007ed8
     4d8:	00007ea8 	.word	0x00007ea8
     4dc:	00007eb0 	.word	0x00007eb0
     4e0:	00007eb8 	.word	0x00007eb8

000004e4 <AD717X_Reset>:
* @param device - The handler of the instance of the driver.
*
* @return Returns 0 for success or negative error code.
*******************************************************************************/
int32_t AD717X_Reset(void)
{
     4e4:	b500      	push	{lr}
     4e6:	b085      	sub	sp, #20
	int32_t ret = 0;
	uint8_t wrBuf[9] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
     4e8:	4a05      	ldr	r2, [pc, #20]	; (500 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18>)
     4ea:	ab01      	add	r3, sp, #4
     4ec:	ca07      	ldmia	r2, {r0, r1, r2}
     4ee:	c303      	stmia	r3!, {r0, r1}
     4f0:	701a      	strb	r2, [r3, #0]


	ret = spi_write_and_read(wrBuf, 9);
     4f2:	2109      	movs	r1, #9
     4f4:	a801      	add	r0, sp, #4
     4f6:	f000 fa89 	bl	a0c <spi_write_and_read>

	return ret;
}
     4fa:	b005      	add	sp, #20
     4fc:	f85d fb04 	ldr.w	pc, [sp], #4
     500:	00007ee0 	.word	0x00007ee0

00000504 <AD717X_WriteRegister>:
{
     504:	b084      	sub	sp, #16
     506:	b530      	push	{r4, r5, lr}
     508:	b0b5      	sub	sp, #212	; 0xd4
     50a:	ac38      	add	r4, sp, #224	; 0xe0
     50c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t wrBuf[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };
     510:	4b27      	ldr	r3, [pc, #156]	; (5b0 <AD717X_WriteRegister+0xac>)
     512:	e893 0003 	ldmia.w	r3, {r0, r1}
     516:	ab34      	add	r3, sp, #208	; 0xd0
     518:	e903 0003 	stmdb	r3, {r0, r1}
	preg = AD717X_GetReg(device, addr);
     51c:	f89d 31b0 	ldrb.w	r3, [sp, #432]	; 0x1b0
     520:	9330      	str	r3, [sp, #192]	; 0xc0
     522:	22c0      	movs	r2, #192	; 0xc0
     524:	a93c      	add	r1, sp, #240	; 0xf0
     526:	4668      	mov	r0, sp
     528:	f006 f8b6 	bl	6698 <memcpy>
     52c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
     530:	f005 fb88 	bl	5c44 <AD717X_GetReg>
	if (!preg)
     534:	2800      	cmp	r0, #0
     536:	d037      	beq.n	5a8 <AD717X_WriteRegister+0xa4>
     538:	4605      	mov	r5, r0
	printk("AD411x GetReg; addr = %d, value = %d, size = %d\n", preg->addr, preg->value, preg->size);
     53a:	6883      	ldr	r3, [r0, #8]
     53c:	6842      	ldr	r2, [r0, #4]
     53e:	6801      	ldr	r1, [r0, #0]
     540:	481c      	ldr	r0, [pc, #112]	; (5b4 <AD717X_WriteRegister+0xb0>)
     542:	f005 fdb6 	bl	60b2 <printk>
		AD717X_COMM_REG_RA(preg->addr);
     546:	682b      	ldr	r3, [r5, #0]
	wrBuf[0] = AD717X_COMM_REG_WEN | AD717X_COMM_REG_WR |
     548:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     54c:	f88d 30c8 	strb.w	r3, [sp, #200]	; 0xc8
	regValue = preg->value;
     550:	686a      	ldr	r2, [r5, #4]
	for (i = 0; i < preg->size; i++) {
     552:	2300      	movs	r3, #0
     554:	e007      	b.n	566 <AD717X_WriteRegister+0x62>
		wrBuf[preg->size - i] = regValue & 0xFF;
     556:	1ae4      	subs	r4, r4, r3
     558:	a934      	add	r1, sp, #208	; 0xd0
     55a:	440c      	add	r4, r1
     55c:	f804 2c08 	strb.w	r2, [r4, #-8]
		regValue >>= 8;
     560:	1212      	asrs	r2, r2, #8
	for (i = 0; i < preg->size; i++) {
     562:	3301      	adds	r3, #1
     564:	b2db      	uxtb	r3, r3
     566:	68ac      	ldr	r4, [r5, #8]
     568:	42a3      	cmp	r3, r4
     56a:	dbf4      	blt.n	556 <AD717X_WriteRegister+0x52>
	if (device.useCRC != AD717X_DISABLE) {
     56c:	f89d 50fd 	ldrb.w	r5, [sp, #253]	; 0xfd
     570:	b95d      	cbnz	r5, 58a <AD717X_WriteRegister+0x86>
	ret = spi_write_and_read(wrBuf, (device.useCRC != AD717X_DISABLE) ? preg->size + 2 : preg->size + 1);
     572:	b1ad      	cbz	r5, 5a0 <AD717X_WriteRegister+0x9c>
     574:	b2e1      	uxtb	r1, r4
     576:	3102      	adds	r1, #2
     578:	b2c9      	uxtb	r1, r1
     57a:	a832      	add	r0, sp, #200	; 0xc8
     57c:	f000 fa46 	bl	a0c <spi_write_and_read>
}
     580:	b035      	add	sp, #212	; 0xd4
     582:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
     586:	b004      	add	sp, #16
     588:	4770      	bx	lr
		crc8 = AD717X_ComputeCRC8(wrBuf, preg->size + 1);
     58a:	1c61      	adds	r1, r4, #1
     58c:	b2c9      	uxtb	r1, r1
     58e:	a832      	add	r0, sp, #200	; 0xc8
     590:	f005 fbbc 	bl	5d0c <AD717X_ComputeCRC8>
		wrBuf[preg->size + 1] = crc8;
     594:	1c63      	adds	r3, r4, #1
     596:	aa34      	add	r2, sp, #208	; 0xd0
     598:	4413      	add	r3, r2
     59a:	f803 0c08 	strb.w	r0, [r3, #-8]
     59e:	e7e8      	b.n	572 <AD717X_WriteRegister+0x6e>
	ret = spi_write_and_read(wrBuf, (device.useCRC != AD717X_DISABLE) ? preg->size + 2 : preg->size + 1);
     5a0:	b2e1      	uxtb	r1, r4
     5a2:	3101      	adds	r1, #1
     5a4:	b2c9      	uxtb	r1, r1
     5a6:	e7e8      	b.n	57a <AD717X_WriteRegister+0x76>
		return INVALID_VAL;
     5a8:	f04f 30ff 	mov.w	r0, #4294967295
     5ac:	e7e8      	b.n	580 <AD717X_WriteRegister+0x7c>
     5ae:	bf00      	nop
     5b0:	00007e70 	.word	0x00007e70
     5b4:	00007eec 	.word	0x00007eec

000005b8 <AD717X_ReadRegister>:
{
     5b8:	b084      	sub	sp, #16
     5ba:	b530      	push	{r4, r5, lr}
     5bc:	b0b7      	sub	sp, #220	; 0xdc
     5be:	ac3a      	add	r4, sp, #232	; 0xe8
     5c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t buffer[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };
     5c4:	4b44      	ldr	r3, [pc, #272]	; (6d8 <AD717X_ReadRegister+0x120>)
     5c6:	e893 0003 	ldmia.w	r3, {r0, r1}
     5ca:	aa36      	add	r2, sp, #216	; 0xd8
     5cc:	e902 0003 	stmdb	r2, {r0, r1}
	uint8_t msgBuf[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };
     5d0:	aa32      	add	r2, sp, #200	; 0xc8
     5d2:	e882 0003 	stmia.w	r2, {r0, r1}
	pReg = AD717X_GetReg(device, addr);
     5d6:	f89d 31b8 	ldrb.w	r3, [sp, #440]	; 0x1b8
     5da:	9330      	str	r3, [sp, #192]	; 0xc0
     5dc:	22c0      	movs	r2, #192	; 0xc0
     5de:	a93e      	add	r1, sp, #248	; 0xf8
     5e0:	4668      	mov	r0, sp
     5e2:	f006 f859 	bl	6698 <memcpy>
     5e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
     5ea:	f005 fb2b 	bl	5c44 <AD717X_GetReg>
	if (!pReg)
     5ee:	2800      	cmp	r0, #0
     5f0:	d06b      	beq.n	6ca <AD717X_ReadRegister+0x112>
     5f2:	4604      	mov	r4, r0
		AD717X_COMM_REG_RA(pReg->addr);
     5f4:	6803      	ldr	r3, [r0, #0]
     5f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	buffer[0] = AD717X_COMM_REG_WEN | AD717X_COMM_REG_RD |
     5fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     5fe:	f88d 30d0 	strb.w	r3, [sp, #208]	; 0xd0
	ret = spi_write_and_read(buffer, ((device.useCRC != AD717X_DISABLE) ? pReg->size + 1 : pReg->size) + 1);
     602:	f89d 5105 	ldrb.w	r5, [sp, #261]	; 0x105
     606:	b195      	cbz	r5, 62e <AD717X_ReadRegister+0x76>
     608:	7a01      	ldrb	r1, [r0, #8]
     60a:	3102      	adds	r1, #2
     60c:	b2c9      	uxtb	r1, r1
     60e:	a834      	add	r0, sp, #208	; 0xd0
     610:	f000 f9fc 	bl	a0c <spi_write_and_read>
	if (ret < 0)
     614:	2800      	cmp	r0, #0
     616:	db53      	blt.n	6c0 <AD717X_ReadRegister+0x108>
	if (device.useCRC == AD717X_USE_CRC) {
     618:	2d01      	cmp	r5, #1
     61a:	d00c      	beq.n	636 <AD717X_ReadRegister+0x7e>
	uint8_t check8 = 0;
     61c:	2000      	movs	r0, #0
	if (device.useCRC == AD717X_USE_XOR) {
     61e:	2d02      	cmp	r5, #2
     620:	d024      	beq.n	66c <AD717X_ReadRegister+0xb4>
	if (check8 != 0) {
     622:	2800      	cmp	r0, #0
     624:	d154      	bne.n	6d0 <AD717X_ReadRegister+0x118>
	pReg->value = 0;
     626:	2300      	movs	r3, #0
     628:	6063      	str	r3, [r4, #4]
	for (i = 1; i < pReg->size + 1; i++) {
     62a:	2201      	movs	r2, #1
     62c:	e044      	b.n	6b8 <AD717X_ReadRegister+0x100>
	ret = spi_write_and_read(buffer, ((device.useCRC != AD717X_DISABLE) ? pReg->size + 1 : pReg->size) + 1);
     62e:	7a01      	ldrb	r1, [r0, #8]
     630:	3101      	adds	r1, #1
     632:	b2c9      	uxtb	r1, r1
     634:	e7eb      	b.n	60e <AD717X_ReadRegister+0x56>
			AD717X_COMM_REG_RA(pReg->addr);
     636:	6823      	ldr	r3, [r4, #0]
     638:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		msgBuf[0] = AD717X_COMM_REG_WEN | AD717X_COMM_REG_RD |
     63c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     640:	f88d 30c8 	strb.w	r3, [sp, #200]	; 0xc8
		for (i = 1; i < pReg->size + 2; ++i) {
     644:	462b      	mov	r3, r5
     646:	e007      	b.n	658 <AD717X_ReadRegister+0xa0>
			msgBuf[i] = buffer[i];
     648:	aa36      	add	r2, sp, #216	; 0xd8
     64a:	441a      	add	r2, r3
     64c:	f812 1c08 	ldrb.w	r1, [r2, #-8]
     650:	f802 1c10 	strb.w	r1, [r2, #-16]
		for (i = 1; i < pReg->size + 2; ++i) {
     654:	3301      	adds	r3, #1
     656:	b2db      	uxtb	r3, r3
     658:	68a1      	ldr	r1, [r4, #8]
     65a:	1c4a      	adds	r2, r1, #1
     65c:	429a      	cmp	r2, r3
     65e:	daf3      	bge.n	648 <AD717X_ReadRegister+0x90>
		check8 = AD717X_ComputeCRC8(msgBuf, pReg->size + 2);
     660:	3102      	adds	r1, #2
     662:	b2c9      	uxtb	r1, r1
     664:	a832      	add	r0, sp, #200	; 0xc8
     666:	f005 fb51 	bl	5d0c <AD717X_ComputeCRC8>
     66a:	e7d8      	b.n	61e <AD717X_ReadRegister+0x66>
			AD717X_COMM_REG_RA(pReg->addr);
     66c:	6823      	ldr	r3, [r4, #0]
     66e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		msgBuf[0] = AD717X_COMM_REG_WEN | AD717X_COMM_REG_RD |
     672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     676:	f88d 30c8 	strb.w	r3, [sp, #200]	; 0xc8
		for (i = 1; i < pReg->size + 2; ++i) {
     67a:	2301      	movs	r3, #1
     67c:	e007      	b.n	68e <AD717X_ReadRegister+0xd6>
			msgBuf[i] = buffer[i];
     67e:	aa36      	add	r2, sp, #216	; 0xd8
     680:	441a      	add	r2, r3
     682:	f812 1c08 	ldrb.w	r1, [r2, #-8]
     686:	f802 1c10 	strb.w	r1, [r2, #-16]
		for (i = 1; i < pReg->size + 2; ++i) {
     68a:	3301      	adds	r3, #1
     68c:	b2db      	uxtb	r3, r3
     68e:	68a1      	ldr	r1, [r4, #8]
     690:	1c4a      	adds	r2, r1, #1
     692:	429a      	cmp	r2, r3
     694:	daf3      	bge.n	67e <AD717X_ReadRegister+0xc6>
		check8 = AD717X_ComputeXOR8(msgBuf, pReg->size + 2);
     696:	3102      	adds	r1, #2
     698:	b2c9      	uxtb	r1, r1
     69a:	a832      	add	r0, sp, #200	; 0xc8
     69c:	f005 fc48 	bl	5f30 <AD717X_ComputeXOR8>
     6a0:	e7bf      	b.n	622 <AD717X_ReadRegister+0x6a>
		pReg->value <<= 8;
     6a2:	6863      	ldr	r3, [r4, #4]
     6a4:	021b      	lsls	r3, r3, #8
     6a6:	6063      	str	r3, [r4, #4]
		pReg->value += buffer[i];
     6a8:	a936      	add	r1, sp, #216	; 0xd8
     6aa:	4411      	add	r1, r2
     6ac:	f811 1c08 	ldrb.w	r1, [r1, #-8]
     6b0:	440b      	add	r3, r1
     6b2:	6063      	str	r3, [r4, #4]
	for (i = 1; i < pReg->size + 1; i++) {
     6b4:	3201      	adds	r2, #1
     6b6:	b2d2      	uxtb	r2, r2
     6b8:	68a3      	ldr	r3, [r4, #8]
     6ba:	4293      	cmp	r3, r2
     6bc:	daf1      	bge.n	6a2 <AD717X_ReadRegister+0xea>
	return pReg->value;
     6be:	6860      	ldr	r0, [r4, #4]
}
     6c0:	b037      	add	sp, #220	; 0xdc
     6c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
     6c6:	b004      	add	sp, #16
     6c8:	4770      	bx	lr
		return INVALID_VAL;
     6ca:	f04f 30ff 	mov.w	r0, #4294967295
     6ce:	e7f7      	b.n	6c0 <AD717X_ReadRegister+0x108>
		return COMM_ERR;
     6d0:	f06f 0001 	mvn.w	r0, #1
     6d4:	e7f4      	b.n	6c0 <AD717X_ReadRegister+0x108>
     6d6:	bf00      	nop
     6d8:	00007e70 	.word	0x00007e70

000006dc <ad717x_configure_device_odr>:
 * @param odr_sel - ODR[4:0] bitfield value as a decimal
 * @return 0 in case of success, negative error code otherwise
 */
int32_t ad717x_configure_device_odr(ad717x_init_param device, uint8_t filtcon_id,
	uint8_t odr_sel)
{
     6dc:	b084      	sub	sp, #16
     6de:	b510      	push	{r4, lr}
     6e0:	b0b2      	sub	sp, #200	; 0xc8
     6e2:	ac34      	add	r4, sp, #208	; 0xd0
     6e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ad717x_st_reg* filtcon_reg;
	int32_t ret;

	/* Retrieve the FILTCON register */
	filtcon_reg = AD717X_GetReg(device,
     6e8:	f89d 41a0 	ldrb.w	r4, [sp, #416]	; 0x1a0
     6ec:	3428      	adds	r4, #40	; 0x28
     6ee:	b2e4      	uxtb	r4, r4
     6f0:	9430      	str	r4, [sp, #192]	; 0xc0
     6f2:	22c0      	movs	r2, #192	; 0xc0
     6f4:	a938      	add	r1, sp, #224	; 0xe0
     6f6:	4668      	mov	r0, sp
     6f8:	f005 ffce 	bl	6698 <memcpy>
     6fc:	ab34      	add	r3, sp, #208	; 0xd0
     6fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     700:	f005 faa0 	bl	5c44 <AD717X_GetReg>
		AD717X_FILTCON0_REG + filtcon_id);
	if (!filtcon_reg) {
     704:	b1d8      	cbz	r0, 73e <ad717x_configure_device_odr+0x62>
		printk("filtcon_reg not found :(, ad717x_configure_device_odr");
		return -EINVAL;
	}

	/* Clear the ODR bits, configure the requested ODR */
	filtcon_reg->value &= ~(AD717x_ODR_MSK);
     706:	6843      	ldr	r3, [r0, #4]
     708:	f023 031f 	bic.w	r3, r3, #31
     70c:	6043      	str	r3, [r0, #4]
	filtcon_reg->value |= AD717X_FILT_CONF_REG_ODR(odr_sel);
     70e:	f89d 11a4 	ldrb.w	r1, [sp, #420]	; 0x1a4
     712:	f001 011f 	and.w	r1, r1, #31
     716:	430b      	orrs	r3, r1
     718:	6043      	str	r3, [r0, #4]

	ret = AD717X_WriteRegister(device, AD717X_FILTCON0_REG + filtcon_id);
     71a:	9430      	str	r4, [sp, #192]	; 0xc0
     71c:	22c0      	movs	r2, #192	; 0xc0
     71e:	a938      	add	r1, sp, #224	; 0xe0
     720:	4668      	mov	r0, sp
     722:	f005 ffb9 	bl	6698 <memcpy>
     726:	ab34      	add	r3, sp, #208	; 0xd0
     728:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     72a:	f7ff feeb 	bl	504 <AD717X_WriteRegister>
	if (ret) {
     72e:	4604      	mov	r4, r0
     730:	b958      	cbnz	r0, 74a <ad717x_configure_device_odr+0x6e>
		printk("WriteRegister, ad717x_configure_device_odr");
		return ret;
	}

	return 0;
}
     732:	4620      	mov	r0, r4
     734:	b032      	add	sp, #200	; 0xc8
     736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     73a:	b004      	add	sp, #16
     73c:	4770      	bx	lr
		printk("filtcon_reg not found :(, ad717x_configure_device_odr");
     73e:	4805      	ldr	r0, [pc, #20]	; (754 <ad717x_configure_device_odr+0x78>)
     740:	f005 fcb7 	bl	60b2 <printk>
		return -EINVAL;
     744:	f06f 0415 	mvn.w	r4, #21
     748:	e7f3      	b.n	732 <ad717x_configure_device_odr+0x56>
		printk("WriteRegister, ad717x_configure_device_odr");
     74a:	4803      	ldr	r0, [pc, #12]	; (758 <ad717x_configure_device_odr+0x7c>)
     74c:	f005 fcb1 	bl	60b2 <printk>
		return ret;
     750:	e7ef      	b.n	732 <ad717x_configure_device_odr+0x56>
     752:	bf00      	nop
     754:	00007f20 	.word	0x00007f20
     758:	00007f58 	.word	0x00007f58

0000075c <AD717X_Init>:
*
* @return Returns 0 for success or negative error code.
*******************************************************************************/
int32_t AD717X_Init(ad717x_dev** device,
	ad717x_init_param init_param)
{
     75c:	b084      	sub	sp, #16
     75e:	b570      	push	{r4, r5, r6, lr}
     760:	b0b4      	sub	sp, #208	; 0xd0
     762:	a839      	add	r0, sp, #228	; 0xe4
     764:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int32_t ret = 0;

	/* Initialize the SPI communication. */
	ret = spi_init();
     768:	f000 f92a 	bl	9c0 <spi_init>
	if (ret < 0)
     76c:	1e04      	subs	r4, r0, #0
     76e:	db3a      	blt.n	7e6 <AD717X_Init+0x8a>
		return ret;
	printk("SPI Initialized\n");
     770:	486f      	ldr	r0, [pc, #444]	; (930 <CONFIG_ISR_STACK_SIZE+0x130>)
     772:	f005 fc9e 	bl	60b2 <printk>

	/*  Reset the device interface.*/
	ret = AD717X_Reset();
     776:	f7ff feb5 	bl	4e4 <AD717X_Reset>
	if (ret < 0) {
     77a:	1e04      	subs	r4, r0, #0
     77c:	db28      	blt.n	7d0 <AD717X_Init+0x74>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     77e:	f44f 7024 	mov.w	r0, #656	; 0x290
     782:	2100      	movs	r1, #0
     784:	f004 fe84 	bl	5490 <z_impl_k_sleep>

	k_sleep(K_MSEC(20));

	/* Read ID register to identify the part */
	//TODO: Check if ID registers match with chip iD
	ret = AD717X_ReadRegister(init_param, AD717X_ID_REG);
     788:	2307      	movs	r3, #7
     78a:	9330      	str	r3, [sp, #192]	; 0xc0
     78c:	22c0      	movs	r2, #192	; 0xc0
     78e:	a93d      	add	r1, sp, #244	; 0xf4
     790:	4668      	mov	r0, sp
     792:	f005 ff81 	bl	6698 <memcpy>
     796:	ab39      	add	r3, sp, #228	; 0xe4
     798:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     79a:	f7ff ff0d 	bl	5b8 <AD717X_ReadRegister>
	if (ret < 0) {
     79e:	1e04      	subs	r4, r0, #0
     7a0:	db1a      	blt.n	7d8 <AD717X_Init+0x7c>
		printk("\n\nError at: AD717X_ReadRegister AD717X_ID_REG\n\n");
		return ret;
	}

	/*  Connect Analog Inputs, Assign Setup, Enable channels (see ad411 header file)*/
	for (uint8_t ch_index = 0; ch_index < init_param.num_channels; ch_index++) {
     7a2:	2500      	movs	r5, #0
     7a4:	f89d 3104 	ldrb.w	r3, [sp, #260]	; 0x104
     7a8:	42ab      	cmp	r3, r5
     7aa:	d922      	bls.n	7f2 <AD717X_Init+0x96>
		// All channels configured in a single go. the analog input pairs/assign setup/Enable Channel
		ret = AD717X_WriteRegister(init_param, AD717X_CHMAP0_REG + ch_index);
     7ac:	f105 0310 	add.w	r3, r5, #16
     7b0:	b2db      	uxtb	r3, r3
     7b2:	9330      	str	r3, [sp, #192]	; 0xc0
     7b4:	22c0      	movs	r2, #192	; 0xc0
     7b6:	a93d      	add	r1, sp, #244	; 0xf4
     7b8:	4668      	mov	r0, sp
     7ba:	f005 ff6d 	bl	6698 <memcpy>
     7be:	ab39      	add	r3, sp, #228	; 0xe4
     7c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     7c2:	f7ff fe9f 	bl	504 <AD717X_WriteRegister>
		if (ret < 0) {
     7c6:	1e04      	subs	r4, r0, #0
     7c8:	db0a      	blt.n	7e0 <AD717X_Init+0x84>
	for (uint8_t ch_index = 0; ch_index < init_param.num_channels; ch_index++) {
     7ca:	3501      	adds	r5, #1
     7cc:	b2ed      	uxtb	r5, r5
     7ce:	e7e9      	b.n	7a4 <AD717X_Init+0x48>
		printk("\n\nError at: AD717X_Reset\n\n");
     7d0:	4858      	ldr	r0, [pc, #352]	; (934 <CONFIG_ISR_STACK_SIZE+0x134>)
     7d2:	f005 fc6e 	bl	60b2 <printk>
		return ret;
     7d6:	e006      	b.n	7e6 <AD717X_Init+0x8a>
		printk("\n\nError at: AD717X_ReadRegister AD717X_ID_REG\n\n");
     7d8:	4857      	ldr	r0, [pc, #348]	; (938 <CONFIG_ISR_STACK_SIZE+0x138>)
     7da:	f005 fc6a 	bl	60b2 <printk>
		return ret;
     7de:	e002      	b.n	7e6 <AD717X_Init+0x8a>
			printk("\n\nError at: AD717X_WriteRegister AD717X_CHMAP0_REG\n\n");
     7e0:	4856      	ldr	r0, [pc, #344]	; (93c <CONFIG_ISR_STACK_SIZE+0x13c>)
     7e2:	f005 fc66 	bl	60b2 <printk>
		return ret;

	printk("AD411x Initialized\n");

	return ret;
}
     7e6:	4620      	mov	r0, r4
     7e8:	b034      	add	sp, #208	; 0xd0
     7ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     7ee:	b004      	add	sp, #16
     7f0:	4770      	bx	lr
	for (uint8_t setup_index = 0; setup_index < init_param.num_setups; setup_index++) {
     7f2:	2500      	movs	r5, #0
     7f4:	f89d 3105 	ldrb.w	r3, [sp, #261]	; 0x105
     7f8:	42ab      	cmp	r3, r5
     7fa:	d960      	bls.n	8be <CONFIG_ISR_STACK_SIZE+0xbe>
		ret = ad717x_set_polarity(init_param, init_param.setups[setup_index].bi_unipolar, setup_index);
     7fc:	9531      	str	r5, [sp, #196]	; 0xc4
     7fe:	f105 0318 	add.w	r3, r5, #24
     802:	aa38      	add	r2, sp, #224	; 0xe0
     804:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     808:	799b      	ldrb	r3, [r3, #6]
     80a:	9330      	str	r3, [sp, #192]	; 0xc0
     80c:	22c0      	movs	r2, #192	; 0xc0
     80e:	a93d      	add	r1, sp, #244	; 0xf4
     810:	4668      	mov	r0, sp
     812:	f005 ff41 	bl	6698 <memcpy>
     816:	ab39      	add	r3, sp, #228	; 0xe4
     818:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     81a:	f005 fa94 	bl	5d46 <ad717x_set_polarity>
		if (ret < 0) {
     81e:	1e04      	subs	r4, r0, #0
     820:	db3d      	blt.n	89e <CONFIG_ISR_STACK_SIZE+0x9e>
		ret = ad717x_set_reference_source(init_param,
     822:	9531      	str	r5, [sp, #196]	; 0xc4
     824:	f105 0318 	add.w	r3, r5, #24
     828:	aa38      	add	r2, sp, #224	; 0xe0
     82a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     82e:	7a5b      	ldrb	r3, [r3, #9]
     830:	9330      	str	r3, [sp, #192]	; 0xc0
     832:	22c0      	movs	r2, #192	; 0xc0
     834:	a93d      	add	r1, sp, #244	; 0xf4
     836:	4668      	mov	r0, sp
     838:	f005 ff2e 	bl	6698 <memcpy>
     83c:	ab39      	add	r3, sp, #228	; 0xe4
     83e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     840:	f005 fac0 	bl	5dc4 <ad717x_set_reference_source>
		if (ret < 0) {
     844:	1e04      	subs	r4, r0, #0
     846:	db2e      	blt.n	8a6 <CONFIG_ISR_STACK_SIZE+0xa6>
		ret = ad717x_enable_buffers(init_param,
     848:	9532      	str	r5, [sp, #200]	; 0xc8
     84a:	f105 0318 	add.w	r3, r5, #24
     84e:	aa38      	add	r2, sp, #224	; 0xe0
     850:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     854:	79da      	ldrb	r2, [r3, #7]
     856:	9231      	str	r2, [sp, #196]	; 0xc4
     858:	7a1b      	ldrb	r3, [r3, #8]
     85a:	9330      	str	r3, [sp, #192]	; 0xc0
     85c:	22c0      	movs	r2, #192	; 0xc0
     85e:	a93d      	add	r1, sp, #244	; 0xf4
     860:	4668      	mov	r0, sp
     862:	f005 ff19 	bl	6698 <memcpy>
     866:	ab39      	add	r3, sp, #228	; 0xe4
     868:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     86a:	f005 fb14 	bl	5e96 <ad717x_enable_buffers>
		if (ret < 0) {
     86e:	1e04      	subs	r4, r0, #0
     870:	db1d      	blt.n	8ae <CONFIG_ISR_STACK_SIZE+0xae>
			init_param.filter_configuration[setup_index].odr);
     872:	eb05 0685 	add.w	r6, r5, r5, lsl #2
     876:	ab38      	add	r3, sp, #224	; 0xe0
     878:	441e      	add	r6, r3
     87a:	f896 30ac 	ldrb.w	r3, [r6, #172]	; 0xac
		ret = ad717x_configure_device_odr(init_param, setup_index,
     87e:	9331      	str	r3, [sp, #196]	; 0xc4
     880:	9530      	str	r5, [sp, #192]	; 0xc0
     882:	22c0      	movs	r2, #192	; 0xc0
     884:	a93d      	add	r1, sp, #244	; 0xf4
     886:	4668      	mov	r0, sp
     888:	f005 ff06 	bl	6698 <memcpy>
     88c:	ab39      	add	r3, sp, #228	; 0xe4
     88e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     890:	f7ff ff24 	bl	6dc <ad717x_configure_device_odr>
		if (ret < 0) {
     894:	1e04      	subs	r4, r0, #0
     896:	db0e      	blt.n	8b6 <CONFIG_ISR_STACK_SIZE+0xb6>
	for (uint8_t setup_index = 0; setup_index < init_param.num_setups; setup_index++) {
     898:	3501      	adds	r5, #1
     89a:	b2ed      	uxtb	r5, r5
     89c:	e7aa      	b.n	7f4 <AD717X_Init+0x98>
			printk("\n\nError at: ad717x_set_polarity\n\n");
     89e:	4828      	ldr	r0, [pc, #160]	; (940 <CONFIG_ISR_STACK_SIZE+0x140>)
     8a0:	f005 fc07 	bl	60b2 <printk>
			return ret;
     8a4:	e79f      	b.n	7e6 <AD717X_Init+0x8a>
			printk("\n\nError at: ad717x_set_reference_source\n\n");
     8a6:	4827      	ldr	r0, [pc, #156]	; (944 <CONFIG_ISR_STACK_SIZE+0x144>)
     8a8:	f005 fc03 	bl	60b2 <printk>
			return ret;
     8ac:	e79b      	b.n	7e6 <AD717X_Init+0x8a>
			printk("\n\nError at: ad717x_enable_buffers\n\n");
     8ae:	4826      	ldr	r0, [pc, #152]	; (948 <CONFIG_ISR_STACK_SIZE+0x148>)
     8b0:	f005 fbff 	bl	60b2 <printk>
			return ret;
     8b4:	e797      	b.n	7e6 <AD717X_Init+0x8a>
			printk("\n\nError at: ad717x_configure_device_odr\n\n");
     8b6:	4825      	ldr	r0, [pc, #148]	; (94c <CONFIG_ISR_STACK_SIZE+0x14c>)
     8b8:	f005 fbfb 	bl	60b2 <printk>
			return ret;
     8bc:	e793      	b.n	7e6 <AD717X_Init+0x8a>
	ret = AD717X_WriteRegister(init_param, AD717X_GPIOCON_REG);
     8be:	2306      	movs	r3, #6
     8c0:	9330      	str	r3, [sp, #192]	; 0xc0
     8c2:	22c0      	movs	r2, #192	; 0xc0
     8c4:	a93d      	add	r1, sp, #244	; 0xf4
     8c6:	4668      	mov	r0, sp
     8c8:	f005 fee6 	bl	6698 <memcpy>
     8cc:	ab39      	add	r3, sp, #228	; 0xe4
     8ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     8d0:	f7ff fe18 	bl	504 <AD717X_WriteRegister>
	if (ret < 0)
     8d4:	1e04      	subs	r4, r0, #0
     8d6:	db86      	blt.n	7e6 <AD717X_Init+0x8a>
	ret = AD717X_WriteRegister(init_param, AD717X_IFMODE_REG);
     8d8:	2302      	movs	r3, #2
     8da:	9330      	str	r3, [sp, #192]	; 0xc0
     8dc:	22c0      	movs	r2, #192	; 0xc0
     8de:	a93d      	add	r1, sp, #244	; 0xf4
     8e0:	4668      	mov	r0, sp
     8e2:	f005 fed9 	bl	6698 <memcpy>
     8e6:	ab39      	add	r3, sp, #228	; 0xe4
     8e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     8ea:	f7ff fe0b 	bl	504 <AD717X_WriteRegister>
	if (ret < 0)
     8ee:	1e04      	subs	r4, r0, #0
     8f0:	f6ff af79 	blt.w	7e6 <AD717X_Init+0x8a>
	AD717X_UpdateCRCSetting(init_param);
     8f4:	25c0      	movs	r5, #192	; 0xc0
     8f6:	462a      	mov	r2, r5
     8f8:	a93d      	add	r1, sp, #244	; 0xf4
     8fa:	4668      	mov	r0, sp
     8fc:	f005 fecc 	bl	6698 <memcpy>
     900:	ac39      	add	r4, sp, #228	; 0xe4
     902:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
     906:	f005 fb7f 	bl	6008 <AD717X_UpdateCRCSetting>
	ret = AD717X_WriteRegister(init_param, AD717X_ADCMODE_REG);
     90a:	2301      	movs	r3, #1
     90c:	9330      	str	r3, [sp, #192]	; 0xc0
     90e:	462a      	mov	r2, r5
     910:	a93d      	add	r1, sp, #244	; 0xf4
     912:	4668      	mov	r0, sp
     914:	f005 fec0 	bl	6698 <memcpy>
     918:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
     91c:	f7ff fdf2 	bl	504 <AD717X_WriteRegister>
	if (ret < 0)
     920:	1e04      	subs	r4, r0, #0
     922:	f6ff af60 	blt.w	7e6 <AD717X_Init+0x8a>
	printk("AD411x Initialized\n");
     926:	480a      	ldr	r0, [pc, #40]	; (950 <CONFIG_ISR_STACK_SIZE+0x150>)
     928:	f005 fbc3 	bl	60b2 <printk>
	return ret;
     92c:	e75b      	b.n	7e6 <AD717X_Init+0x8a>
     92e:	bf00      	nop
     930:	00007f84 	.word	0x00007f84
     934:	00007f98 	.word	0x00007f98
     938:	00007fb4 	.word	0x00007fb4
     93c:	00007fe4 	.word	0x00007fe4
     940:	0000801c 	.word	0x0000801c
     944:	00008040 	.word	0x00008040
     948:	0000806c 	.word	0x0000806c
     94c:	00008090 	.word	0x00008090
     950:	000080bc 	.word	0x000080bc

00000954 <spi_send>:
};

struct device* spi_dev;

uint8_t spi_send(uint8_t tx_value)
{
     954:	b510      	push	{r4, lr}
     956:	b088      	sub	sp, #32
	int err;
	static uint8_t tx_buffer[1];
	static uint8_t rx_buffer[1];

	tx_buffer[0] = tx_value;
     958:	4b13      	ldr	r3, [pc, #76]	; (9a8 <spi_send+0x54>)
     95a:	7018      	strb	r0, [r3, #0]

	const struct spi_buf tx_buf = {
     95c:	4b13      	ldr	r3, [pc, #76]	; (9ac <spi_send+0x58>)
     95e:	aa06      	add	r2, sp, #24
     960:	e893 0003 	ldmia.w	r3, {r0, r1}
     964:	e882 0003 	stmia.w	r2, {r0, r1}
		.buf = tx_buffer,
		.len = sizeof(tx_buffer)
	};
	const struct spi_buf_set tx = {
     968:	9204      	str	r2, [sp, #16]
     96a:	2401      	movs	r4, #1
     96c:	9405      	str	r4, [sp, #20]
		.buffers = &tx_buf,
		.count = 1
	};

	struct spi_buf rx_buf = {
     96e:	aa02      	add	r2, sp, #8
     970:	3308      	adds	r3, #8
     972:	e893 0003 	ldmia.w	r3, {r0, r1}
     976:	e882 0003 	stmia.w	r2, {r0, r1}
		.buf = rx_buffer,
		.len = sizeof(rx_buffer),
	};
	const struct spi_buf_set rx = {
     97a:	9200      	str	r2, [sp, #0]
     97c:	9401      	str	r4, [sp, #4]
		.buffers = &rx_buf,
		.count = 1
	};

	err = spi_transceive(spi_dev, &spi_cfg, &tx, &rx);
     97e:	4b0c      	ldr	r3, [pc, #48]	; (9b0 <spi_send+0x5c>)
     980:	6818      	ldr	r0, [r3, #0]
static inline int z_impl_spi_transceive(const struct device *dev,
					const struct spi_config *config,
					const struct spi_buf_set *tx_bufs,
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
     982:	6883      	ldr	r3, [r0, #8]
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
     984:	681c      	ldr	r4, [r3, #0]
     986:	466b      	mov	r3, sp
     988:	aa04      	add	r2, sp, #16
     98a:	490a      	ldr	r1, [pc, #40]	; (9b4 <spi_send+0x60>)
     98c:	47a0      	blx	r4
	if (err < 0) {
     98e:	1e04      	subs	r4, r0, #0
     990:	db03      	blt.n	99a <spi_send+0x46>
	// 	/* Connect MISO to MOSI for loopback */
	// 	printk("TX sent: %x\n", tx_buffer[0]);
	// 	printk("RX recv: %x\n", rx_buffer[0]);
	// }

	return rx_buffer[0];
     992:	4b09      	ldr	r3, [pc, #36]	; (9b8 <spi_send+0x64>)
     994:	7818      	ldrb	r0, [r3, #0]
}
     996:	b008      	add	sp, #32
     998:	bd10      	pop	{r4, pc}
		printk("SPI error: %d\n", err);
     99a:	4621      	mov	r1, r4
     99c:	4807      	ldr	r0, [pc, #28]	; (9bc <spi_send+0x68>)
     99e:	f005 fb88 	bl	60b2 <printk>
		return SPI_COMM_ERR+err;
     9a2:	1f20      	subs	r0, r4, #4
     9a4:	b2c0      	uxtb	r0, r0
     9a6:	e7f6      	b.n	996 <spi_send+0x42>
     9a8:	20000648 	.word	0x20000648
     9ac:	00007e78 	.word	0x00007e78
     9b0:	2000062c 	.word	0x2000062c
     9b4:	00008104 	.word	0x00008104
     9b8:	20000628 	.word	0x20000628
     9bc:	000080d0 	.word	0x000080d0

000009c0 <spi_init>:
/**
 * @brief Initialize the SPI communication peripheral.
 * @return 0 in case of success, -1 otherwise.
 */
uint32_t spi_init(void)
{
     9c0:	b510      	push	{r4, lr}

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
	const struct gpio_driver_api *api =
     9c2:	480d      	ldr	r0, [pc, #52]	; (9f8 <spi_init+0x38>)
     9c4:	6881      	ldr	r1, [r0, #8]
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
     9c6:	6902      	ldr	r2, [r0, #16]
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
     9c8:	6813      	ldr	r3, [r2, #0]
     9ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     9ce:	6013      	str	r3, [r2, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
     9d0:	680b      	ldr	r3, [r1, #0]
     9d2:	4a0a      	ldr	r2, [pc, #40]	; (9fc <spi_init+0x3c>)
     9d4:	2109      	movs	r1, #9
     9d6:	4798      	blx	r3
     9d8:	4604      	mov	r4, r0
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     9da:	4809      	ldr	r0, [pc, #36]	; (a00 <spi_init+0x40>)
     9dc:	f003 fe28 	bl	4630 <z_impl_device_get_binding>
	if (ret < 0) {
		return ret;
	}

	const char* const spiName = "SPI_1";
	spi_dev = device_get_binding(spiName);
     9e0:	4b08      	ldr	r3, [pc, #32]	; (a04 <spi_init+0x44>)
     9e2:	6018      	str	r0, [r3, #0]

	if (spi_dev == NULL) {
     9e4:	b108      	cbz	r0, 9ea <spi_init+0x2a>
		printk("Could not get %s device\n", spiName);
		ret = -1;
	}
	return ret;
}
     9e6:	4620      	mov	r0, r4
     9e8:	bd10      	pop	{r4, pc}
		printk("Could not get %s device\n", spiName);
     9ea:	4905      	ldr	r1, [pc, #20]	; (a00 <spi_init+0x40>)
     9ec:	4806      	ldr	r0, [pc, #24]	; (a08 <spi_init+0x48>)
     9ee:	f005 fb60 	bl	60b2 <printk>
		ret = -1;
     9f2:	f04f 34ff 	mov.w	r4, #4294967295
	return ret;
     9f6:	e7f6      	b.n	9e6 <spi_init+0x26>
     9f8:	00007c30 	.word	0x00007c30
     9fc:	000a0001 	.word	0x000a0001
     a00:	000080e0 	.word	0x000080e0
     a04:	2000062c 	.word	0x2000062c
     a08:	000080e8 	.word	0x000080e8

00000a0c <spi_write_and_read>:
 * @param [in] bytes_number - Number of bytes to write/read.
 *
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t spi_write_and_read(uint8_t* data, uint8_t bytes_number)
{
     a0c:	b570      	push	{r4, r5, r6, lr}
     a0e:	4605      	mov	r5, r0
     a10:	460e      	mov	r6, r1
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
			       int value)
{
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
     a12:	4b1d      	ldr	r3, [pc, #116]	; (a88 <spi_write_and_read+0x7c>)
     a14:	691b      	ldr	r3, [r3, #16]

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     a16:	681b      	ldr	r3, [r3, #0]
     a18:	f413 7f00 	tst.w	r3, #512	; 0x200
     a1c:	d109      	bne.n	a32 <spi_write_and_read+0x26>
     a1e:	2301      	movs	r3, #1
	if (value != 0)	{
     a20:	b14b      	cbz	r3, a36 <spi_write_and_read+0x2a>
	const struct gpio_driver_api *api =
     a22:	4819      	ldr	r0, [pc, #100]	; (a88 <spi_write_and_read+0x7c>)
     a24:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
     a26:	68db      	ldr	r3, [r3, #12]
     a28:	f44f 7100 	mov.w	r1, #512	; 0x200
     a2c:	4798      	blx	r3
	// //Debugg print

	//cs pin active
	gpio_pin_set_dt(&csadc, 1);

	for (int i = 0; i < bytes_number;i++) {
     a2e:	2400      	movs	r4, #0
		value = (value != 0) ? 0 : 1;
	}

	return gpio_pin_set_raw(port, pin, value);
     a30:	e00f      	b.n	a52 <spi_write_and_read+0x46>
		value = (value != 0) ? 0 : 1;
     a32:	2300      	movs	r3, #0
     a34:	e7f4      	b.n	a20 <spi_write_and_read+0x14>
	const struct gpio_driver_api *api =
     a36:	4814      	ldr	r0, [pc, #80]	; (a88 <spi_write_and_read+0x7c>)
     a38:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
     a3a:	691b      	ldr	r3, [r3, #16]
     a3c:	f44f 7100 	mov.w	r1, #512	; 0x200
     a40:	4798      	blx	r3
     a42:	e7f4      	b.n	a2e <spi_write_and_read+0x22>
		totalData[i] = spi_send(data[i]);
     a44:	5d28      	ldrb	r0, [r5, r4]
     a46:	f7ff ff85 	bl	954 <spi_send>
     a4a:	4b10      	ldr	r3, [pc, #64]	; (a8c <spi_write_and_read+0x80>)
     a4c:	5518      	strb	r0, [r3, r4]
		*(data + i) = totalData[i];
     a4e:	5528      	strb	r0, [r5, r4]
	for (int i = 0; i < bytes_number;i++) {
     a50:	3401      	adds	r4, #1
     a52:	42b4      	cmp	r4, r6
     a54:	dbf6      	blt.n	a44 <spi_write_and_read+0x38>
	const struct gpio_driver_data *const data =
     a56:	4b0c      	ldr	r3, [pc, #48]	; (a88 <spi_write_and_read+0x7c>)
     a58:	691b      	ldr	r3, [r3, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     a5a:	681b      	ldr	r3, [r3, #0]
     a5c:	f413 7f00 	tst.w	r3, #512	; 0x200
     a60:	d109      	bne.n	a76 <spi_write_and_read+0x6a>
     a62:	2300      	movs	r3, #0
	if (value != 0)	{
     a64:	b14b      	cbz	r3, a7a <spi_write_and_read+0x6e>
	const struct gpio_driver_api *api =
     a66:	4808      	ldr	r0, [pc, #32]	; (a88 <spi_write_and_read+0x7c>)
     a68:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
     a6a:	68db      	ldr	r3, [r3, #12]
     a6c:	f44f 7100 	mov.w	r1, #512	; 0x200
     a70:	4798      	blx	r3
	// 	printk("%x, ", *(data + i));
	// }
	// printk("\n");

	return err;
}
     a72:	2000      	movs	r0, #0
     a74:	bd70      	pop	{r4, r5, r6, pc}
		value = (value != 0) ? 0 : 1;
     a76:	2301      	movs	r3, #1
     a78:	e7f4      	b.n	a64 <spi_write_and_read+0x58>
	const struct gpio_driver_api *api =
     a7a:	4803      	ldr	r0, [pc, #12]	; (a88 <spi_write_and_read+0x7c>)
     a7c:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
     a7e:	691b      	ldr	r3, [r3, #16]
     a80:	f44f 7100 	mov.w	r1, #512	; 0x200
     a84:	4798      	blx	r3
     a86:	e7f4      	b.n	a72 <spi_write_and_read+0x66>
     a88:	00007c30 	.word	0x00007c30
     a8c:	20000630 	.word	0x20000630

00000a90 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
     a90:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
     a92:	680b      	ldr	r3, [r1, #0]
     a94:	3301      	adds	r3, #1
     a96:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     a98:	4b01      	ldr	r3, [pc, #4]	; (aa0 <char_out+0x10>)
     a9a:	681b      	ldr	r3, [r3, #0]
     a9c:	4798      	blx	r3
}
     a9e:	bd08      	pop	{r3, pc}
     aa0:	20000294 	.word	0x20000294

00000aa4 <__printk_hook_install>:
	_char_out = fn;
     aa4:	4b01      	ldr	r3, [pc, #4]	; (aac <__printk_hook_install+0x8>)
     aa6:	6018      	str	r0, [r3, #0]
}
     aa8:	4770      	bx	lr
     aaa:	bf00      	nop
     aac:	20000294 	.word	0x20000294

00000ab0 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
     ab0:	b500      	push	{lr}
     ab2:	b083      	sub	sp, #12
     ab4:	4602      	mov	r2, r0
     ab6:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
     ab8:	2100      	movs	r1, #0
     aba:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
     abc:	a901      	add	r1, sp, #4
     abe:	4803      	ldr	r0, [pc, #12]	; (acc <vprintk+0x1c>)
     ac0:	f000 fa3c 	bl	f3c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     ac4:	b003      	add	sp, #12
     ac6:	f85d fb04 	ldr.w	pc, [sp], #4
     aca:	bf00      	nop
     acc:	00000a91 	.word	0x00000a91

00000ad0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     ad4:	b083      	sub	sp, #12
     ad6:	4604      	mov	r4, r0
     ad8:	4608      	mov	r0, r1
     ada:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     adc:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     ade:	f013 0f08 	tst.w	r3, #8
     ae2:	d105      	bne.n	af0 <process_event+0x20>
     ae4:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     ae8:	2300      	movs	r3, #0
     aea:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     aec:	9301      	str	r3, [sp, #4]
}
     aee:	e069      	b.n	bc4 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
     af0:	2901      	cmp	r1, #1
     af2:	d009      	beq.n	b08 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     af4:	f043 0320 	orr.w	r3, r3, #32
     af8:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     afa:	f385 8811 	msr	BASEPRI, r5
     afe:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     b02:	b003      	add	sp, #12
     b04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     b08:	f043 0310 	orr.w	r3, r3, #16
     b0c:	8323      	strh	r3, [r4, #24]
     b0e:	e7f4      	b.n	afa <process_event+0x2a>
			evt = process_recheck(mgr);
     b10:	4620      	mov	r0, r4
     b12:	f005 fb03 	bl	611c <process_recheck>
     b16:	e057      	b.n	bc8 <process_event+0xf8>
			res = mgr->last_res;
     b18:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
     b1c:	464a      	mov	r2, r9
     b1e:	4669      	mov	r1, sp
     b20:	4620      	mov	r0, r4
     b22:	f005 fb14 	bl	614e <process_complete>
		onoff_transition_fn transit = NULL;
     b26:	2700      	movs	r7, #0
     b28:	e05a      	b.n	be0 <process_event+0x110>
			transit = mgr->transitions->start;
     b2a:	6923      	ldr	r3, [r4, #16]
     b2c:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
     b2e:	2106      	movs	r1, #6
     b30:	4620      	mov	r0, r4
     b32:	f005 facc 	bl	60ce <set_state>
		res = 0;
     b36:	f04f 0900 	mov.w	r9, #0
     b3a:	e051      	b.n	be0 <process_event+0x110>
			transit = mgr->transitions->stop;
     b3c:	6923      	ldr	r3, [r4, #16]
     b3e:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
     b40:	2104      	movs	r1, #4
     b42:	4620      	mov	r0, r4
     b44:	f005 fac3 	bl	60ce <set_state>
		res = 0;
     b48:	f04f 0900 	mov.w	r9, #0
     b4c:	e048      	b.n	be0 <process_event+0x110>
			transit = mgr->transitions->reset;
     b4e:	6923      	ldr	r3, [r4, #16]
     b50:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
     b52:	2105      	movs	r1, #5
     b54:	4620      	mov	r0, r4
     b56:	f005 faba 	bl	60ce <set_state>
		res = 0;
     b5a:	f04f 0900 	mov.w	r9, #0
     b5e:	e03f      	b.n	be0 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
     b60:	2200      	movs	r2, #0
     b62:	e046      	b.n	bf2 <process_event+0x122>
     b64:	2200      	movs	r2, #0
     b66:	e044      	b.n	bf2 <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     b68:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     b6c:	8323      	strh	r3, [r4, #24]
     b6e:	f385 8811 	msr	BASEPRI, r5
     b72:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     b76:	2900      	cmp	r1, #0
     b78:	d144      	bne.n	c04 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     b7a:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     b7c:	b12b      	cbz	r3, b8a <process_event+0xba>
				notify_all(mgr, &clients, state, res);
     b7e:	464b      	mov	r3, r9
     b80:	4642      	mov	r2, r8
     b82:	4669      	mov	r1, sp
     b84:	4620      	mov	r0, r4
     b86:	f005 fb59 	bl	623c <notify_all>
			if (transit != NULL) {
     b8a:	b117      	cbz	r7, b92 <process_event+0xc2>
				transit(mgr, transition_complete);
     b8c:	4925      	ldr	r1, [pc, #148]	; (c24 <process_event+0x154>)
     b8e:	4620      	mov	r0, r4
     b90:	47b8      	blx	r7
	__asm__ volatile(
     b92:	f04f 0320 	mov.w	r3, #32
     b96:	f3ef 8511 	mrs	r5, BASEPRI
     b9a:	f383 8812 	msr	BASEPRI_MAX, r3
     b9e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     ba2:	8b23      	ldrh	r3, [r4, #24]
     ba4:	f023 0308 	bic.w	r3, r3, #8
     ba8:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     baa:	8b23      	ldrh	r3, [r4, #24]
     bac:	f013 0f10 	tst.w	r3, #16
     bb0:	d02e      	beq.n	c10 <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     bb2:	f023 0310 	bic.w	r3, r3, #16
     bb6:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     bb8:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     bba:	8b26      	ldrh	r6, [r4, #24]
     bbc:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
     bc0:	2800      	cmp	r0, #0
     bc2:	d09a      	beq.n	afa <process_event+0x2a>
		if (evt == EVT_RECHECK) {
     bc4:	2802      	cmp	r0, #2
     bc6:	d0a3      	beq.n	b10 <process_event+0x40>
		if (evt == EVT_NOP) {
     bc8:	2800      	cmp	r0, #0
     bca:	d096      	beq.n	afa <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
     bcc:	2801      	cmp	r0, #1
     bce:	d0a3      	beq.n	b18 <process_event+0x48>
		} else if (evt == EVT_START) {
     bd0:	2803      	cmp	r0, #3
     bd2:	d0aa      	beq.n	b2a <process_event+0x5a>
		} else if (evt == EVT_STOP) {
     bd4:	2804      	cmp	r0, #4
     bd6:	d0b1      	beq.n	b3c <process_event+0x6c>
		} else if (evt == EVT_RESET) {
     bd8:	2805      	cmp	r0, #5
     bda:	d0b8      	beq.n	b4e <process_event+0x7e>
		onoff_transition_fn transit = NULL;
     bdc:	2700      	movs	r7, #0
		res = 0;
     bde:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     be0:	8b23      	ldrh	r3, [r4, #24]
     be2:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     be6:	45b0      	cmp	r8, r6
     be8:	d0ba      	beq.n	b60 <process_event+0x90>
     bea:	68a2      	ldr	r2, [r4, #8]
     bec:	2a00      	cmp	r2, #0
     bee:	d0b9      	beq.n	b64 <process_event+0x94>
     bf0:	2201      	movs	r2, #1
		if (do_monitors
     bf2:	4611      	mov	r1, r2
     bf4:	2a00      	cmp	r2, #0
     bf6:	d1b7      	bne.n	b68 <process_event+0x98>
     bf8:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     bfa:	2a00      	cmp	r2, #0
     bfc:	d1b4      	bne.n	b68 <process_event+0x98>
		    || (transit != NULL)) {
     bfe:	2f00      	cmp	r7, #0
     c00:	d1b2      	bne.n	b68 <process_event+0x98>
     c02:	e7d2      	b.n	baa <process_event+0xda>
				notify_monitors(mgr, state, res);
     c04:	464a      	mov	r2, r9
     c06:	4641      	mov	r1, r8
     c08:	4620      	mov	r0, r4
     c0a:	f005 fa68 	bl	60de <notify_monitors>
     c0e:	e7b4      	b.n	b7a <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     c10:	f013 0f20 	tst.w	r3, #32
     c14:	d004      	beq.n	c20 <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     c16:	f023 0320 	bic.w	r3, r3, #32
     c1a:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
     c1c:	2002      	movs	r0, #2
     c1e:	e7cc      	b.n	bba <process_event+0xea>
		evt = EVT_NOP;
     c20:	2000      	movs	r0, #0
     c22:	e7ca      	b.n	bba <process_event+0xea>
     c24:	0000626b 	.word	0x0000626b

00000c28 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
     c28:	b570      	push	{r4, r5, r6, lr}
     c2a:	b082      	sub	sp, #8
     c2c:	4604      	mov	r4, r0
	*conv = (struct conversion) {
     c2e:	2300      	movs	r3, #0
     c30:	6003      	str	r3, [r0, #0]
     c32:	6043      	str	r3, [r0, #4]
     c34:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
     c36:	784b      	ldrb	r3, [r1, #1]
     c38:	2b25      	cmp	r3, #37	; 0x25
     c3a:	d002      	beq.n	c42 <extract_conversion+0x1a>
     c3c:	1c4e      	adds	r6, r1, #1
	bool loop = true;
     c3e:	2501      	movs	r5, #1
     c40:	e01f      	b.n	c82 <extract_conversion+0x5a>
		conv->specifier = *sp++;
     c42:	1c88      	adds	r0, r1, #2
     c44:	70e3      	strb	r3, [r4, #3]
		return sp;
     c46:	e145      	b.n	ed4 <extract_conversion+0x2ac>
			conv->flag_dash = true;
     c48:	7823      	ldrb	r3, [r4, #0]
     c4a:	f043 0304 	orr.w	r3, r3, #4
     c4e:	7023      	strb	r3, [r4, #0]
		if (loop) {
     c50:	b1b5      	cbz	r5, c80 <extract_conversion+0x58>
			++sp;
     c52:	3601      	adds	r6, #1
     c54:	e014      	b.n	c80 <extract_conversion+0x58>
			conv->flag_plus = true;
     c56:	7823      	ldrb	r3, [r4, #0]
     c58:	f043 0308 	orr.w	r3, r3, #8
     c5c:	7023      	strb	r3, [r4, #0]
			break;
     c5e:	e7f7      	b.n	c50 <extract_conversion+0x28>
			conv->flag_space = true;
     c60:	7823      	ldrb	r3, [r4, #0]
     c62:	f043 0310 	orr.w	r3, r3, #16
     c66:	7023      	strb	r3, [r4, #0]
			break;
     c68:	e7f2      	b.n	c50 <extract_conversion+0x28>
			conv->flag_hash = true;
     c6a:	7823      	ldrb	r3, [r4, #0]
     c6c:	f043 0320 	orr.w	r3, r3, #32
     c70:	7023      	strb	r3, [r4, #0]
			break;
     c72:	e7ed      	b.n	c50 <extract_conversion+0x28>
			conv->flag_zero = true;
     c74:	7823      	ldrb	r3, [r4, #0]
     c76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     c7a:	7023      	strb	r3, [r4, #0]
			break;
     c7c:	e7e8      	b.n	c50 <extract_conversion+0x28>
		switch (*sp) {
     c7e:	2500      	movs	r5, #0
	} while (loop);
     c80:	b345      	cbz	r5, cd4 <extract_conversion+0xac>
		switch (*sp) {
     c82:	7833      	ldrb	r3, [r6, #0]
     c84:	3b20      	subs	r3, #32
     c86:	2b10      	cmp	r3, #16
     c88:	d8f9      	bhi.n	c7e <extract_conversion+0x56>
     c8a:	a201      	add	r2, pc, #4	; (adr r2, c90 <extract_conversion+0x68>)
     c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     c90:	00000c61 	.word	0x00000c61
     c94:	00000c7f 	.word	0x00000c7f
     c98:	00000c7f 	.word	0x00000c7f
     c9c:	00000c6b 	.word	0x00000c6b
     ca0:	00000c7f 	.word	0x00000c7f
     ca4:	00000c7f 	.word	0x00000c7f
     ca8:	00000c7f 	.word	0x00000c7f
     cac:	00000c7f 	.word	0x00000c7f
     cb0:	00000c7f 	.word	0x00000c7f
     cb4:	00000c7f 	.word	0x00000c7f
     cb8:	00000c7f 	.word	0x00000c7f
     cbc:	00000c57 	.word	0x00000c57
     cc0:	00000c7f 	.word	0x00000c7f
     cc4:	00000c49 	.word	0x00000c49
     cc8:	00000c7f 	.word	0x00000c7f
     ccc:	00000c7f 	.word	0x00000c7f
     cd0:	00000c75 	.word	0x00000c75
	if (conv->flag_zero && conv->flag_dash) {
     cd4:	7823      	ldrb	r3, [r4, #0]
     cd6:	f003 0344 	and.w	r3, r3, #68	; 0x44
     cda:	2b44      	cmp	r3, #68	; 0x44
     cdc:	d05f      	beq.n	d9e <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
     cde:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
     ce0:	7823      	ldrb	r3, [r4, #0]
     ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     ce6:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
     ce8:	7833      	ldrb	r3, [r6, #0]
     cea:	2b2a      	cmp	r3, #42	; 0x2a
     cec:	d05c      	beq.n	da8 <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
     cee:	a801      	add	r0, sp, #4
     cf0:	f005 fb4c 	bl	638c <extract_decimal>
	if (sp != wp) {
     cf4:	9b01      	ldr	r3, [sp, #4]
     cf6:	429e      	cmp	r6, r3
     cf8:	d00f      	beq.n	d1a <extract_conversion+0xf2>
		conv->width_present = true;
     cfa:	7823      	ldrb	r3, [r4, #0]
     cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     d00:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
     d02:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
     d04:	b2db      	uxtb	r3, r3
     d06:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
     d0a:	2800      	cmp	r0, #0
     d0c:	db54      	blt.n	db8 <extract_conversion+0x190>
     d0e:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
     d10:	4313      	orrs	r3, r2
     d12:	7822      	ldrb	r2, [r4, #0]
     d14:	f363 0241 	bfi	r2, r3, #1, #1
     d18:	7022      	strb	r2, [r4, #0]
	return sp;
     d1a:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
     d1c:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
     d1e:	781b      	ldrb	r3, [r3, #0]
     d20:	2b2e      	cmp	r3, #46	; 0x2e
     d22:	bf14      	ite	ne
     d24:	2300      	movne	r3, #0
     d26:	2301      	moveq	r3, #1
     d28:	7862      	ldrb	r2, [r4, #1]
     d2a:	f363 0241 	bfi	r2, r3, #1, #1
     d2e:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
     d30:	2b00      	cmp	r3, #0
     d32:	d043      	beq.n	dbc <extract_conversion+0x194>
	++sp;
     d34:	9b01      	ldr	r3, [sp, #4]
     d36:	1c5a      	adds	r2, r3, #1
     d38:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
     d3a:	785b      	ldrb	r3, [r3, #1]
     d3c:	2b2a      	cmp	r3, #42	; 0x2a
     d3e:	d03f      	beq.n	dc0 <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
     d40:	a801      	add	r0, sp, #4
     d42:	f005 fb23 	bl	638c <extract_decimal>
	conv->prec_value = prec;
     d46:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
     d48:	7823      	ldrb	r3, [r4, #0]
     d4a:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
     d4e:	2800      	cmp	r0, #0
     d50:	db3e      	blt.n	dd0 <extract_conversion+0x1a8>
     d52:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
     d54:	4313      	orrs	r3, r2
     d56:	7822      	ldrb	r2, [r4, #0]
     d58:	f363 0241 	bfi	r2, r3, #1, #1
     d5c:	7022      	strb	r2, [r4, #0]
	return sp;
     d5e:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
     d60:	7803      	ldrb	r3, [r0, #0]
     d62:	3b4c      	subs	r3, #76	; 0x4c
     d64:	2b2e      	cmp	r3, #46	; 0x2e
     d66:	f200 809d 	bhi.w	ea4 <extract_conversion+0x27c>
     d6a:	e8df f003 	tbb	[pc, r3]
     d6e:	9b90      	.short	0x9b90
     d70:	9b9b9b9b 	.word	0x9b9b9b9b
     d74:	9b9b9b9b 	.word	0x9b9b9b9b
     d78:	9b9b9b9b 	.word	0x9b9b9b9b
     d7c:	9b9b9b9b 	.word	0x9b9b9b9b
     d80:	9b9b9b9b 	.word	0x9b9b9b9b
     d84:	9b9b9b9b 	.word	0x9b9b9b9b
     d88:	9b339b9b 	.word	0x9b339b9b
     d8c:	9b459b57 	.word	0x9b459b57
     d90:	9b9b9b9b 	.word	0x9b9b9b9b
     d94:	9b899b9b 	.word	0x9b899b9b
     d98:	9b9b9b9b 	.word	0x9b9b9b9b
     d9c:	82          	.byte	0x82
     d9d:	00          	.byte	0x00
		conv->flag_zero = false;
     d9e:	7823      	ldrb	r3, [r4, #0]
     da0:	f36f 1386 	bfc	r3, #6, #1
     da4:	7023      	strb	r3, [r4, #0]
     da6:	e79a      	b.n	cde <extract_conversion+0xb6>
		conv->width_star = true;
     da8:	7863      	ldrb	r3, [r4, #1]
     daa:	f043 0301 	orr.w	r3, r3, #1
     dae:	7063      	strb	r3, [r4, #1]
		return ++sp;
     db0:	4633      	mov	r3, r6
     db2:	3301      	adds	r3, #1
     db4:	9301      	str	r3, [sp, #4]
     db6:	e7b1      	b.n	d1c <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
     db8:	2201      	movs	r2, #1
     dba:	e7a9      	b.n	d10 <extract_conversion+0xe8>
		return sp;
     dbc:	9801      	ldr	r0, [sp, #4]
     dbe:	e7cf      	b.n	d60 <extract_conversion+0x138>
		conv->prec_star = true;
     dc0:	7863      	ldrb	r3, [r4, #1]
     dc2:	f043 0304 	orr.w	r3, r3, #4
     dc6:	7063      	strb	r3, [r4, #1]
		return ++sp;
     dc8:	4610      	mov	r0, r2
     dca:	3001      	adds	r0, #1
     dcc:	9001      	str	r0, [sp, #4]
     dce:	e7c7      	b.n	d60 <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
     dd0:	2201      	movs	r2, #1
     dd2:	e7bf      	b.n	d54 <extract_conversion+0x12c>
		if (*++sp == 'h') {
     dd4:	1c42      	adds	r2, r0, #1
     dd6:	7843      	ldrb	r3, [r0, #1]
     dd8:	2b68      	cmp	r3, #104	; 0x68
     dda:	d006      	beq.n	dea <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
     ddc:	7863      	ldrb	r3, [r4, #1]
     dde:	2102      	movs	r1, #2
     de0:	f361 03c6 	bfi	r3, r1, #3, #4
     de4:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
     de6:	4610      	mov	r0, r2
     de8:	e01e      	b.n	e28 <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
     dea:	7863      	ldrb	r3, [r4, #1]
     dec:	2201      	movs	r2, #1
     dee:	f362 03c6 	bfi	r3, r2, #3, #4
     df2:	7063      	strb	r3, [r4, #1]
			++sp;
     df4:	3002      	adds	r0, #2
     df6:	e017      	b.n	e28 <extract_conversion+0x200>
		if (*++sp == 'l') {
     df8:	1c42      	adds	r2, r0, #1
     dfa:	7843      	ldrb	r3, [r0, #1]
     dfc:	2b6c      	cmp	r3, #108	; 0x6c
     dfe:	d006      	beq.n	e0e <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
     e00:	7863      	ldrb	r3, [r4, #1]
     e02:	2103      	movs	r1, #3
     e04:	f361 03c6 	bfi	r3, r1, #3, #4
     e08:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
     e0a:	4610      	mov	r0, r2
     e0c:	e00c      	b.n	e28 <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
     e0e:	7863      	ldrb	r3, [r4, #1]
     e10:	2204      	movs	r2, #4
     e12:	f362 03c6 	bfi	r3, r2, #3, #4
     e16:	7063      	strb	r3, [r4, #1]
			++sp;
     e18:	3002      	adds	r0, #2
     e1a:	e005      	b.n	e28 <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
     e1c:	7863      	ldrb	r3, [r4, #1]
     e1e:	2205      	movs	r2, #5
     e20:	f362 03c6 	bfi	r3, r2, #3, #4
     e24:	7063      	strb	r3, [r4, #1]
		++sp;
     e26:	3001      	adds	r0, #1
	conv->specifier = *sp++;
     e28:	f810 3b01 	ldrb.w	r3, [r0], #1
     e2c:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
     e2e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
     e32:	2a37      	cmp	r2, #55	; 0x37
     e34:	d87d      	bhi.n	f32 <extract_conversion+0x30a>
     e36:	e8df f002 	tbb	[pc, r2]
     e3a:	7c5e      	.short	0x7c5e
     e3c:	5e5e7c7c 	.word	0x5e5e7c7c
     e40:	7c7c7c5e 	.word	0x7c7c7c5e
     e44:	7c7c7c7c 	.word	0x7c7c7c7c
     e48:	7c7c7c7c 	.word	0x7c7c7c7c
     e4c:	7c7c7c7c 	.word	0x7c7c7c7c
     e50:	7c7c4f7c 	.word	0x7c7c4f7c
     e54:	7c7c7c7c 	.word	0x7c7c7c7c
     e58:	7c5e7c7c 	.word	0x7c5e7c7c
     e5c:	5e5e3a4f 	.word	0x5e5e3a4f
     e60:	7c3a7c5e 	.word	0x7c3a7c5e
     e64:	657c7c7c 	.word	0x657c7c7c
     e68:	7c7c714f 	.word	0x7c7c714f
     e6c:	7c4f7c71 	.word	0x7c4f7c71
     e70:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
     e72:	7863      	ldrb	r3, [r4, #1]
     e74:	2206      	movs	r2, #6
     e76:	f362 03c6 	bfi	r3, r2, #3, #4
     e7a:	7063      	strb	r3, [r4, #1]
		++sp;
     e7c:	3001      	adds	r0, #1
		break;
     e7e:	e7d3      	b.n	e28 <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
     e80:	7863      	ldrb	r3, [r4, #1]
     e82:	2207      	movs	r2, #7
     e84:	f362 03c6 	bfi	r3, r2, #3, #4
     e88:	7063      	strb	r3, [r4, #1]
		++sp;
     e8a:	3001      	adds	r0, #1
		break;
     e8c:	e7cc      	b.n	e28 <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
     e8e:	7863      	ldrb	r3, [r4, #1]
     e90:	2208      	movs	r2, #8
     e92:	f362 03c6 	bfi	r3, r2, #3, #4
     e96:	7063      	strb	r3, [r4, #1]
		++sp;
     e98:	3001      	adds	r0, #1
		conv->unsupported = true;
     e9a:	7823      	ldrb	r3, [r4, #0]
     e9c:	f043 0302 	orr.w	r3, r3, #2
     ea0:	7023      	strb	r3, [r4, #0]
		break;
     ea2:	e7c1      	b.n	e28 <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
     ea4:	7863      	ldrb	r3, [r4, #1]
     ea6:	f36f 03c6 	bfc	r3, #3, #4
     eaa:	7063      	strb	r3, [r4, #1]
		break;
     eac:	e7bc      	b.n	e28 <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
     eae:	78a2      	ldrb	r2, [r4, #2]
     eb0:	2101      	movs	r1, #1
     eb2:	f361 0202 	bfi	r2, r1, #0, #3
     eb6:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
     eb8:	7862      	ldrb	r2, [r4, #1]
     eba:	f002 0278 	and.w	r2, r2, #120	; 0x78
     ebe:	2a40      	cmp	r2, #64	; 0x40
     ec0:	d010      	beq.n	ee4 <extract_conversion+0x2bc>
		if (conv->specifier == 'c') {
     ec2:	2b63      	cmp	r3, #99	; 0x63
     ec4:	d013      	beq.n	eee <extract_conversion+0x2c6>
	conv->unsupported |= unsupported;
     ec6:	7823      	ldrb	r3, [r4, #0]
     ec8:	f3c3 0240 	ubfx	r2, r3, #1, #1
     ecc:	4315      	orrs	r5, r2
     ece:	f365 0341 	bfi	r3, r5, #1, #1
     ed2:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
     ed4:	b002      	add	sp, #8
     ed6:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
     ed8:	78a2      	ldrb	r2, [r4, #2]
     eda:	2102      	movs	r1, #2
     edc:	f361 0202 	bfi	r2, r1, #0, #3
     ee0:	70a2      	strb	r2, [r4, #2]
     ee2:	e7e9      	b.n	eb8 <extract_conversion+0x290>
			conv->invalid = true;
     ee4:	7821      	ldrb	r1, [r4, #0]
     ee6:	f041 0101 	orr.w	r1, r1, #1
     eea:	7021      	strb	r1, [r4, #0]
     eec:	e7e9      	b.n	ec2 <extract_conversion+0x29a>
			unsupported = (conv->length_mod != LENGTH_NONE);
     eee:	1e15      	subs	r5, r2, #0
     ef0:	bf18      	it	ne
     ef2:	2501      	movne	r5, #1
     ef4:	e7e7      	b.n	ec6 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
     ef6:	78a3      	ldrb	r3, [r4, #2]
     ef8:	2204      	movs	r2, #4
     efa:	f362 0302 	bfi	r3, r2, #0, #3
     efe:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
     f00:	2501      	movs	r5, #1
			break;
     f02:	e7e0      	b.n	ec6 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
     f04:	78a3      	ldrb	r3, [r4, #2]
     f06:	2203      	movs	r2, #3
     f08:	f362 0302 	bfi	r3, r2, #0, #3
     f0c:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
     f0e:	7863      	ldrb	r3, [r4, #1]
     f10:	f003 0378 	and.w	r3, r3, #120	; 0x78
     f14:	2b40      	cmp	r3, #64	; 0x40
     f16:	d1d6      	bne.n	ec6 <extract_conversion+0x29e>
			unsupported = true;
     f18:	2501      	movs	r5, #1
     f1a:	e7d4      	b.n	ec6 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
     f1c:	78a3      	ldrb	r3, [r4, #2]
     f1e:	2203      	movs	r2, #3
     f20:	f362 0302 	bfi	r3, r2, #0, #3
     f24:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
     f26:	7863      	ldrb	r3, [r4, #1]
     f28:	f013 0f78 	tst.w	r3, #120	; 0x78
     f2c:	d0cb      	beq.n	ec6 <extract_conversion+0x29e>
			unsupported = true;
     f2e:	2501      	movs	r5, #1
     f30:	e7c9      	b.n	ec6 <extract_conversion+0x29e>
		conv->invalid = true;
     f32:	7823      	ldrb	r3, [r4, #0]
     f34:	f043 0301 	orr.w	r3, r3, #1
     f38:	7023      	strb	r3, [r4, #0]
		break;
     f3a:	e7c4      	b.n	ec6 <extract_conversion+0x29e>

00000f3c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f40:	b091      	sub	sp, #68	; 0x44
     f42:	4606      	mov	r6, r0
     f44:	460d      	mov	r5, r1
     f46:	4691      	mov	r9, r2
     f48:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     f4a:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     f4c:	f899 0000 	ldrb.w	r0, [r9]
     f50:	2800      	cmp	r0, #0
     f52:	f000 82d5 	beq.w	1500 <CONFIG_FPROTECT_BLOCK_SIZE+0x500>
		if (*fp != '%') {
     f56:	2825      	cmp	r0, #37	; 0x25
     f58:	d008      	beq.n	f6c <cbvprintf+0x30>
			OUTC(*fp++);
     f5a:	f109 0901 	add.w	r9, r9, #1
     f5e:	4629      	mov	r1, r5
     f60:	47b0      	blx	r6
     f62:	2800      	cmp	r0, #0
     f64:	f2c0 82cd 	blt.w	1502 <CONFIG_FPROTECT_BLOCK_SIZE+0x502>
     f68:	3401      	adds	r4, #1
			continue;
     f6a:	e7ef      	b.n	f4c <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
     f6c:	2300      	movs	r3, #0
     f6e:	9304      	str	r3, [sp, #16]
     f70:	9305      	str	r3, [sp, #20]
     f72:	9306      	str	r3, [sp, #24]
     f74:	9307      	str	r3, [sp, #28]
     f76:	9308      	str	r3, [sp, #32]
     f78:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
     f7a:	4649      	mov	r1, r9
     f7c:	a806      	add	r0, sp, #24
     f7e:	f7ff fe53 	bl	c28 <extract_conversion>
     f82:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
     f84:	f89d 3019 	ldrb.w	r3, [sp, #25]
     f88:	f013 0f01 	tst.w	r3, #1
     f8c:	f000 8097 	beq.w	10be <CONFIG_FPROTECT_BLOCK_SIZE+0xbe>
			width = va_arg(ap, int);
     f90:	9b03      	ldr	r3, [sp, #12]
     f92:	1d1a      	adds	r2, r3, #4
     f94:	9203      	str	r2, [sp, #12]
     f96:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
     f98:	2f00      	cmp	r7, #0
     f9a:	f2c0 8088 	blt.w	10ae <CONFIG_FPROTECT_BLOCK_SIZE+0xae>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
     f9e:	f89d 3019 	ldrb.w	r3, [sp, #25]
     fa2:	f013 0f04 	tst.w	r3, #4
     fa6:	f000 809c 	beq.w	10e2 <CONFIG_FPROTECT_BLOCK_SIZE+0xe2>
			int arg = va_arg(ap, int);
     faa:	9b03      	ldr	r3, [sp, #12]
     fac:	1d1a      	adds	r2, r3, #4
     fae:	9203      	str	r2, [sp, #12]
     fb0:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
     fb4:	f1ba 0f00 	cmp.w	sl, #0
     fb8:	f2c0 808a 	blt.w	10d0 <CONFIG_FPROTECT_BLOCK_SIZE+0xd0>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
     fbc:	2300      	movs	r3, #0
     fbe:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
     fc0:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
     fc2:	f89d 301a 	ldrb.w	r3, [sp, #26]
     fc6:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
     fca:	f89d 1019 	ldrb.w	r1, [sp, #25]
     fce:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
     fd2:	2b01      	cmp	r3, #1
     fd4:	f000 808e 	beq.w	10f4 <CONFIG_FPROTECT_BLOCK_SIZE+0xf4>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
     fd8:	2b02      	cmp	r3, #2
     fda:	f000 80d3 	beq.w	1184 <CONFIG_FPROTECT_BLOCK_SIZE+0x184>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
     fde:	2b04      	cmp	r3, #4
     fe0:	f000 8124 	beq.w	122c <CONFIG_FPROTECT_BLOCK_SIZE+0x22c>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
     fe4:	2b03      	cmp	r3, #3
     fe6:	f000 813b 	beq.w	1260 <CONFIG_FPROTECT_BLOCK_SIZE+0x260>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
     fea:	f89d 8018 	ldrb.w	r8, [sp, #24]
     fee:	f018 0b03 	ands.w	fp, r8, #3
     ff2:	f040 813b 	bne.w	126c <CONFIG_FPROTECT_BLOCK_SIZE+0x26c>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
     ff6:	f89d 301b 	ldrb.w	r3, [sp, #27]
     ffa:	3b25      	subs	r3, #37	; 0x25
     ffc:	2b53      	cmp	r3, #83	; 0x53
     ffe:	f200 81e6 	bhi.w	13ce <CONFIG_FPROTECT_BLOCK_SIZE+0x3ce>
    1002:	e8df f013 	tbh	[pc, r3, lsl #1]
    1006:	0140      	.short	0x0140
    1008:	01e401e4 	.word	0x01e401e4
    100c:	01e401e4 	.word	0x01e401e4
    1010:	01e401e4 	.word	0x01e401e4
    1014:	01e401e4 	.word	0x01e401e4
    1018:	01e401e4 	.word	0x01e401e4
    101c:	01e401e4 	.word	0x01e401e4
    1020:	01e401e4 	.word	0x01e401e4
    1024:	01e401e4 	.word	0x01e401e4
    1028:	01e401e4 	.word	0x01e401e4
    102c:	01e401e4 	.word	0x01e401e4
    1030:	01e401e4 	.word	0x01e401e4
    1034:	01e401e4 	.word	0x01e401e4
    1038:	01e401e4 	.word	0x01e401e4
    103c:	01e401e4 	.word	0x01e401e4
    1040:	01e401e4 	.word	0x01e401e4
    1044:	01e401e4 	.word	0x01e401e4
    1048:	01e401e4 	.word	0x01e401e4
    104c:	01e401e4 	.word	0x01e401e4
    1050:	01e401e4 	.word	0x01e401e4
    1054:	01e401e4 	.word	0x01e401e4
    1058:	01e401e4 	.word	0x01e401e4
    105c:	01e401e4 	.word	0x01e401e4
    1060:	01e401e4 	.word	0x01e401e4
    1064:	01e401e4 	.word	0x01e401e4
    1068:	01e401e4 	.word	0x01e401e4
    106c:	01e40181 	.word	0x01e40181
    1070:	01e401e4 	.word	0x01e401e4
    1074:	01e401e4 	.word	0x01e401e4
    1078:	01e401e4 	.word	0x01e401e4
    107c:	01e401e4 	.word	0x01e401e4
    1080:	015e01e4 	.word	0x015e01e4
    1084:	01e40167 	.word	0x01e40167
    1088:	01e401e4 	.word	0x01e401e4
    108c:	016701e4 	.word	0x016701e4
    1090:	01e401e4 	.word	0x01e401e4
    1094:	01e401e4 	.word	0x01e401e4
    1098:	018101be 	.word	0x018101be
    109c:	01e401a2 	.word	0x01e401a2
    10a0:	014d01e4 	.word	0x014d01e4
    10a4:	018101e4 	.word	0x018101e4
    10a8:	01e401e4 	.word	0x01e401e4
    10ac:	0181      	.short	0x0181
				conv->flag_dash = true;
    10ae:	f89d 3018 	ldrb.w	r3, [sp, #24]
    10b2:	f043 0304 	orr.w	r3, r3, #4
    10b6:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
    10ba:	427f      	negs	r7, r7
    10bc:	e76f      	b.n	f9e <cbvprintf+0x62>
		} else if (conv->width_present) {
    10be:	f99d 3018 	ldrsb.w	r3, [sp, #24]
    10c2:	2b00      	cmp	r3, #0
    10c4:	db02      	blt.n	10cc <CONFIG_FPROTECT_BLOCK_SIZE+0xcc>
		int width = -1;
    10c6:	f04f 37ff 	mov.w	r7, #4294967295
    10ca:	e768      	b.n	f9e <cbvprintf+0x62>
			width = conv->width_value;
    10cc:	9f07      	ldr	r7, [sp, #28]
    10ce:	e766      	b.n	f9e <cbvprintf+0x62>
				conv->prec_present = false;
    10d0:	f89d 3019 	ldrb.w	r3, [sp, #25]
    10d4:	f36f 0341 	bfc	r3, #1, #1
    10d8:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
    10dc:	f04f 3aff 	mov.w	sl, #4294967295
    10e0:	e76c      	b.n	fbc <cbvprintf+0x80>
		} else if (conv->prec_present) {
    10e2:	f013 0f02 	tst.w	r3, #2
    10e6:	d002      	beq.n	10ee <CONFIG_FPROTECT_BLOCK_SIZE+0xee>
			precision = conv->prec_value;
    10e8:	f8dd a020 	ldr.w	sl, [sp, #32]
    10ec:	e766      	b.n	fbc <cbvprintf+0x80>
		int precision = -1;
    10ee:	f04f 3aff 	mov.w	sl, #4294967295
    10f2:	e763      	b.n	fbc <cbvprintf+0x80>
			switch (length_mod) {
    10f4:	1ecb      	subs	r3, r1, #3
    10f6:	2b04      	cmp	r3, #4
    10f8:	d804      	bhi.n	1104 <CONFIG_FPROTECT_BLOCK_SIZE+0x104>
    10fa:	e8df f003 	tbb	[pc, r3]
    10fe:	1d0b      	.short	0x1d0b
    1100:	3529      	.short	0x3529
    1102:	35          	.byte	0x35
    1103:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    1104:	9b03      	ldr	r3, [sp, #12]
    1106:	1d1a      	adds	r2, r3, #4
    1108:	9203      	str	r2, [sp, #12]
    110a:	681b      	ldr	r3, [r3, #0]
    110c:	17da      	asrs	r2, r3, #31
    110e:	9304      	str	r3, [sp, #16]
    1110:	9205      	str	r2, [sp, #20]
				break;
    1112:	e006      	b.n	1122 <CONFIG_FPROTECT_BLOCK_SIZE+0x122>
					value->sint = va_arg(ap, long);
    1114:	9b03      	ldr	r3, [sp, #12]
    1116:	1d1a      	adds	r2, r3, #4
    1118:	9203      	str	r2, [sp, #12]
    111a:	681b      	ldr	r3, [r3, #0]
    111c:	17da      	asrs	r2, r3, #31
    111e:	9304      	str	r3, [sp, #16]
    1120:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
    1122:	2901      	cmp	r1, #1
    1124:	d028      	beq.n	1178 <CONFIG_FPROTECT_BLOCK_SIZE+0x178>
			} else if (length_mod == LENGTH_H) {
    1126:	2902      	cmp	r1, #2
    1128:	f47f af5f 	bne.w	fea <cbvprintf+0xae>
				value->sint = (short)value->sint;
    112c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
    1130:	17da      	asrs	r2, r3, #31
    1132:	9304      	str	r3, [sp, #16]
    1134:	9205      	str	r2, [sp, #20]
    1136:	e758      	b.n	fea <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
    1138:	9b03      	ldr	r3, [sp, #12]
    113a:	3307      	adds	r3, #7
    113c:	f023 0307 	bic.w	r3, r3, #7
    1140:	f103 0208 	add.w	r2, r3, #8
    1144:	9203      	str	r2, [sp, #12]
    1146:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    114a:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    114e:	e7e8      	b.n	1122 <CONFIG_FPROTECT_BLOCK_SIZE+0x122>
					(sint_value_type)va_arg(ap, intmax_t);
    1150:	9b03      	ldr	r3, [sp, #12]
    1152:	3307      	adds	r3, #7
    1154:	f023 0307 	bic.w	r3, r3, #7
    1158:	f103 0208 	add.w	r2, r3, #8
    115c:	9203      	str	r2, [sp, #12]
    115e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    1162:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    1166:	e7dc      	b.n	1122 <CONFIG_FPROTECT_BLOCK_SIZE+0x122>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1168:	9b03      	ldr	r3, [sp, #12]
    116a:	1d1a      	adds	r2, r3, #4
    116c:	9203      	str	r2, [sp, #12]
    116e:	681b      	ldr	r3, [r3, #0]
    1170:	17da      	asrs	r2, r3, #31
				value->sint =
    1172:	9304      	str	r3, [sp, #16]
    1174:	9205      	str	r2, [sp, #20]
				break;
    1176:	e7d4      	b.n	1122 <CONFIG_FPROTECT_BLOCK_SIZE+0x122>
				value->sint = (char)value->sint;
    1178:	f89d 3010 	ldrb.w	r3, [sp, #16]
    117c:	9304      	str	r3, [sp, #16]
    117e:	2300      	movs	r3, #0
    1180:	9305      	str	r3, [sp, #20]
    1182:	e732      	b.n	fea <cbvprintf+0xae>
			switch (length_mod) {
    1184:	1ecb      	subs	r3, r1, #3
    1186:	2b04      	cmp	r3, #4
    1188:	d804      	bhi.n	1194 <CONFIG_FPROTECT_BLOCK_SIZE+0x194>
    118a:	e8df f003 	tbb	[pc, r3]
    118e:	1f0b      	.short	0x1f0b
    1190:	4135      	.short	0x4135
    1192:	41          	.byte	0x41
    1193:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    1194:	9b03      	ldr	r3, [sp, #12]
    1196:	1d1a      	adds	r2, r3, #4
    1198:	9203      	str	r2, [sp, #12]
    119a:	681b      	ldr	r3, [r3, #0]
    119c:	9304      	str	r3, [sp, #16]
    119e:	2300      	movs	r3, #0
    11a0:	9305      	str	r3, [sp, #20]
				break;
    11a2:	e01e      	b.n	11e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e2>
				    && (conv->specifier == 'c')) {
    11a4:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
    11a8:	2b63      	cmp	r3, #99	; 0x63
    11aa:	d007      	beq.n	11bc <CONFIG_FPROTECT_BLOCK_SIZE+0x1bc>
					value->uint = va_arg(ap, unsigned long);
    11ac:	9b03      	ldr	r3, [sp, #12]
    11ae:	1d1a      	adds	r2, r3, #4
    11b0:	9203      	str	r2, [sp, #12]
    11b2:	681b      	ldr	r3, [r3, #0]
    11b4:	9304      	str	r3, [sp, #16]
    11b6:	2300      	movs	r3, #0
    11b8:	9305      	str	r3, [sp, #20]
    11ba:	e012      	b.n	11e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e2>
					value->uint = (wchar_t)va_arg(ap,
    11bc:	9b03      	ldr	r3, [sp, #12]
    11be:	1d1a      	adds	r2, r3, #4
    11c0:	9203      	str	r2, [sp, #12]
    11c2:	681b      	ldr	r3, [r3, #0]
    11c4:	9304      	str	r3, [sp, #16]
    11c6:	2300      	movs	r3, #0
    11c8:	9305      	str	r3, [sp, #20]
    11ca:	e00a      	b.n	11e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e2>
					(uint_value_type)va_arg(ap,
    11cc:	9b03      	ldr	r3, [sp, #12]
    11ce:	3307      	adds	r3, #7
    11d0:	f023 0307 	bic.w	r3, r3, #7
    11d4:	f103 0208 	add.w	r2, r3, #8
    11d8:	9203      	str	r2, [sp, #12]
    11da:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    11de:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
    11e2:	2901      	cmp	r1, #1
    11e4:	d01c      	beq.n	1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>
			} else if (length_mod == LENGTH_H) {
    11e6:	2902      	cmp	r1, #2
    11e8:	f47f aeff 	bne.w	fea <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
    11ec:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    11f0:	9304      	str	r3, [sp, #16]
    11f2:	2300      	movs	r3, #0
    11f4:	9305      	str	r3, [sp, #20]
    11f6:	e6f8      	b.n	fea <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
    11f8:	9b03      	ldr	r3, [sp, #12]
    11fa:	3307      	adds	r3, #7
    11fc:	f023 0307 	bic.w	r3, r3, #7
    1200:	f103 0208 	add.w	r2, r3, #8
    1204:	9203      	str	r2, [sp, #12]
    1206:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    120a:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    120e:	e7e8      	b.n	11e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e2>
					(uint_value_type)va_arg(ap, size_t);
    1210:	9b03      	ldr	r3, [sp, #12]
    1212:	1d1a      	adds	r2, r3, #4
    1214:	9203      	str	r2, [sp, #12]
    1216:	681b      	ldr	r3, [r3, #0]
				value->uint =
    1218:	9304      	str	r3, [sp, #16]
    121a:	2300      	movs	r3, #0
    121c:	9305      	str	r3, [sp, #20]
				break;
    121e:	e7e0      	b.n	11e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e2>
				value->uint = (unsigned char)value->uint;
    1220:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1224:	9304      	str	r3, [sp, #16]
    1226:	2300      	movs	r3, #0
    1228:	9305      	str	r3, [sp, #20]
    122a:	e6de      	b.n	fea <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
    122c:	2908      	cmp	r1, #8
    122e:	d00b      	beq.n	1248 <CONFIG_FPROTECT_BLOCK_SIZE+0x248>
				value->dbl = va_arg(ap, double);
    1230:	9b03      	ldr	r3, [sp, #12]
    1232:	3307      	adds	r3, #7
    1234:	f023 0307 	bic.w	r3, r3, #7
    1238:	f103 0208 	add.w	r2, r3, #8
    123c:	9203      	str	r2, [sp, #12]
    123e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1242:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1246:	e6d0      	b.n	fea <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
    1248:	9b03      	ldr	r3, [sp, #12]
    124a:	3307      	adds	r3, #7
    124c:	f023 0307 	bic.w	r3, r3, #7
    1250:	f103 0208 	add.w	r2, r3, #8
    1254:	9203      	str	r2, [sp, #12]
    1256:	e9d3 2300 	ldrd	r2, r3, [r3]
    125a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    125e:	e6c4      	b.n	fea <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
    1260:	9b03      	ldr	r3, [sp, #12]
    1262:	1d1a      	adds	r2, r3, #4
    1264:	9203      	str	r2, [sp, #12]
    1266:	681b      	ldr	r3, [r3, #0]
    1268:	9304      	str	r3, [sp, #16]
    126a:	e6be      	b.n	fea <cbvprintf+0xae>
			OUTS(sp, fp);
    126c:	9f02      	ldr	r7, [sp, #8]
    126e:	463b      	mov	r3, r7
    1270:	464a      	mov	r2, r9
    1272:	4629      	mov	r1, r5
    1274:	4630      	mov	r0, r6
    1276:	f005 f905 	bl	6484 <outs>
    127a:	2800      	cmp	r0, #0
    127c:	f2c0 8141 	blt.w	1502 <CONFIG_FPROTECT_BLOCK_SIZE+0x502>
    1280:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    1282:	46b9      	mov	r9, r7
			continue;
    1284:	e662      	b.n	f4c <cbvprintf+0x10>
		case '%':
			OUTC('%');
    1286:	4629      	mov	r1, r5
    1288:	2025      	movs	r0, #37	; 0x25
    128a:	47b0      	blx	r6
    128c:	2800      	cmp	r0, #0
    128e:	f2c0 8138 	blt.w	1502 <CONFIG_FPROTECT_BLOCK_SIZE+0x502>
    1292:	3401      	adds	r4, #1
		char sign = 0;
    1294:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    1296:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    129a:	f04f 0900 	mov.w	r9, #0
			break;
    129e:	e09b      	b.n	13d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d8>
		case 's': {
			bps = (const char *)value->ptr;
    12a0:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
    12a4:	f1ba 0f00 	cmp.w	sl, #0
    12a8:	db07      	blt.n	12ba <CONFIG_FPROTECT_BLOCK_SIZE+0x2ba>
				len = strnlen(bps, precision);
    12aa:	4651      	mov	r1, sl
    12ac:	4648      	mov	r0, r9
    12ae:	f005 f9de 	bl	666e <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    12b2:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
    12b6:	46d8      	mov	r8, fp
			precision = -1;

			break;
    12b8:	e08e      	b.n	13d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d8>
				len = strlen(bps);
    12ba:	4648      	mov	r0, r9
    12bc:	f005 f9ce 	bl	665c <strlen>
    12c0:	e7f7      	b.n	12b2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b2>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    12c2:	9b04      	ldr	r3, [sp, #16]
    12c4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    12c8:	46d8      	mov	r8, fp
			bpe = buf + 1;
    12ca:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
    12ce:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
    12d2:	e081      	b.n	13d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d8>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    12d4:	f018 0f08 	tst.w	r8, #8
    12d8:	d105      	bne.n	12e6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e6>
				sign = '+';
			} else if (conv->flag_space) {
    12da:	f018 0810 	ands.w	r8, r8, #16
    12de:	d004      	beq.n	12ea <CONFIG_FPROTECT_BLOCK_SIZE+0x2ea>
				sign = ' ';
    12e0:	f04f 0820 	mov.w	r8, #32
    12e4:	e001      	b.n	12ea <CONFIG_FPROTECT_BLOCK_SIZE+0x2ea>
				sign = '+';
    12e6:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    12ea:	9a04      	ldr	r2, [sp, #16]
    12ec:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
    12ee:	2b00      	cmp	r3, #0
    12f0:	db02      	blt.n	12f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f8>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    12f2:	9204      	str	r2, [sp, #16]
    12f4:	9305      	str	r3, [sp, #20]
    12f6:	e008      	b.n	130a <CONFIG_FPROTECT_BLOCK_SIZE+0x30a>
				value->uint = (uint_value_type)-sint;
    12f8:	4252      	negs	r2, r2
    12fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    12fe:	9204      	str	r2, [sp, #16]
    1300:	9305      	str	r3, [sp, #20]
				sign = '-';
    1302:	f04f 082d 	mov.w	r8, #45	; 0x2d
    1306:	e000      	b.n	130a <CONFIG_FPROTECT_BLOCK_SIZE+0x30a>
		switch (conv->specifier) {
    1308:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    130a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    130e:	9300      	str	r3, [sp, #0]
    1310:	ab0a      	add	r3, sp, #40	; 0x28
    1312:	aa06      	add	r2, sp, #24
    1314:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1318:	f005 f84a 	bl	63b0 <encode_uint>
    131c:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    131e:	f1ba 0f00 	cmp.w	sl, #0
    1322:	f2c0 8088 	blt.w	1436 <CONFIG_FPROTECT_BLOCK_SIZE+0x436>
				size_t len = bpe - bps;
    1326:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    132a:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    132e:	f89d 2018 	ldrb.w	r2, [sp, #24]
    1332:	f36f 1286 	bfc	r2, #6, #1
    1336:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    133a:	459a      	cmp	sl, r3
    133c:	d97e      	bls.n	143c <CONFIG_FPROTECT_BLOCK_SIZE+0x43c>
					conv->pad0_value = precision - (int)len;
    133e:	ebaa 0303 	sub.w	r3, sl, r3
    1342:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
    1344:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    1348:	e046      	b.n	13d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d8>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    134a:	9804      	ldr	r0, [sp, #16]
    134c:	b928      	cbnz	r0, 135a <CONFIG_FPROTECT_BLOCK_SIZE+0x35a>
		char sign = 0;
    134e:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    1350:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 1508 <CONFIG_FPROTECT_BLOCK_SIZE+0x508>
			bps = "(nil)";
    1354:	f1aa 0905 	sub.w	r9, sl, #5
    1358:	e03e      	b.n	13d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d8>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    135a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    135e:	9300      	str	r3, [sp, #0]
    1360:	ab0a      	add	r3, sp, #40	; 0x28
    1362:	aa06      	add	r2, sp, #24
    1364:	2100      	movs	r1, #0
    1366:	f005 f823 	bl	63b0 <encode_uint>
    136a:	4681      	mov	r9, r0
				conv->altform_0c = true;
    136c:	f89d 301a 	ldrb.w	r3, [sp, #26]
    1370:	f043 0310 	orr.w	r3, r3, #16
    1374:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
    1378:	2378      	movs	r3, #120	; 0x78
    137a:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
    137e:	46d8      	mov	r8, fp
				goto prec_int_pad0;
    1380:	e7cd      	b.n	131e <CONFIG_FPROTECT_BLOCK_SIZE+0x31e>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    1382:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
    1384:	f89d 3019 	ldrb.w	r3, [sp, #25]
    1388:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    138c:	2b07      	cmp	r3, #7
    138e:	d806      	bhi.n	139e <CONFIG_FPROTECT_BLOCK_SIZE+0x39e>
    1390:	e8df f003 	tbb	[pc, r3]
    1394:	0f0d0b04 	.word	0x0f0d0b04
    1398:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
    139c:	6014      	str	r4, [r2, #0]
		char sign = 0;
    139e:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    13a0:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    13a4:	f04f 0900 	mov.w	r9, #0
}
    13a8:	e016      	b.n	13d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d8>
		*(signed char *)dp = (signed char)count;
    13aa:	7014      	strb	r4, [r2, #0]
		break;
    13ac:	e7f7      	b.n	139e <CONFIG_FPROTECT_BLOCK_SIZE+0x39e>
		*(short *)dp = (short)count;
    13ae:	8014      	strh	r4, [r2, #0]
		break;
    13b0:	e7f5      	b.n	139e <CONFIG_FPROTECT_BLOCK_SIZE+0x39e>
		*(long *)dp = (long)count;
    13b2:	6014      	str	r4, [r2, #0]
		break;
    13b4:	e7f3      	b.n	139e <CONFIG_FPROTECT_BLOCK_SIZE+0x39e>
		*(long long *)dp = (long long)count;
    13b6:	17e3      	asrs	r3, r4, #31
    13b8:	6014      	str	r4, [r2, #0]
    13ba:	6053      	str	r3, [r2, #4]
		break;
    13bc:	e7ef      	b.n	139e <CONFIG_FPROTECT_BLOCK_SIZE+0x39e>
		*(intmax_t *)dp = (intmax_t)count;
    13be:	17e3      	asrs	r3, r4, #31
    13c0:	6014      	str	r4, [r2, #0]
    13c2:	6053      	str	r3, [r2, #4]
		break;
    13c4:	e7eb      	b.n	139e <CONFIG_FPROTECT_BLOCK_SIZE+0x39e>
		*(size_t *)dp = (size_t)count;
    13c6:	6014      	str	r4, [r2, #0]
		break;
    13c8:	e7e9      	b.n	139e <CONFIG_FPROTECT_BLOCK_SIZE+0x39e>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    13ca:	6014      	str	r4, [r2, #0]
		break;
    13cc:	e7e7      	b.n	139e <CONFIG_FPROTECT_BLOCK_SIZE+0x39e>
		switch (conv->specifier) {
    13ce:	46d8      	mov	r8, fp
    13d0:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    13d4:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    13d8:	f1b9 0f00 	cmp.w	r9, #0
    13dc:	f000 808d 	beq.w	14fa <CONFIG_FPROTECT_BLOCK_SIZE+0x4fa>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    13e0:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
    13e4:	f1b8 0f00 	cmp.w	r8, #0
    13e8:	d000      	beq.n	13ec <CONFIG_FPROTECT_BLOCK_SIZE+0x3ec>
			nj_len += 1U;
    13ea:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
    13ec:	f89d 201a 	ldrb.w	r2, [sp, #26]
    13f0:	f012 0f10 	tst.w	r2, #16
    13f4:	d025      	beq.n	1442 <CONFIG_FPROTECT_BLOCK_SIZE+0x442>
			nj_len += 2U;
    13f6:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    13f8:	9907      	ldr	r1, [sp, #28]
    13fa:	440b      	add	r3, r1
		if (conv->pad_fp) {
    13fc:	f012 0f40 	tst.w	r2, #64	; 0x40
    1400:	d001      	beq.n	1406 <CONFIG_FPROTECT_BLOCK_SIZE+0x406>
			nj_len += conv->pad0_pre_exp;
    1402:	9a08      	ldr	r2, [sp, #32]
    1404:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    1406:	2f00      	cmp	r7, #0
    1408:	dd31      	ble.n	146e <CONFIG_FPROTECT_BLOCK_SIZE+0x46e>
			width -= (int)nj_len;
    140a:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    140c:	f89d 3018 	ldrb.w	r3, [sp, #24]
    1410:	f013 0f04 	tst.w	r3, #4
    1414:	d12b      	bne.n	146e <CONFIG_FPROTECT_BLOCK_SIZE+0x46e>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    1416:	f013 0f40 	tst.w	r3, #64	; 0x40
    141a:	d017      	beq.n	144c <CONFIG_FPROTECT_BLOCK_SIZE+0x44c>
					if (sign != 0) {
    141c:	f1b8 0f00 	cmp.w	r8, #0
    1420:	d017      	beq.n	1452 <CONFIG_FPROTECT_BLOCK_SIZE+0x452>
						OUTC(sign);
    1422:	4629      	mov	r1, r5
    1424:	4640      	mov	r0, r8
    1426:	47b0      	blx	r6
    1428:	2800      	cmp	r0, #0
    142a:	db6a      	blt.n	1502 <CONFIG_FPROTECT_BLOCK_SIZE+0x502>
    142c:	3401      	adds	r4, #1
						sign = 0;
    142e:	46d8      	mov	r8, fp
					}
					pad = '0';
    1430:	f04f 0b30 	mov.w	fp, #48	; 0x30
    1434:	e00f      	b.n	1456 <CONFIG_FPROTECT_BLOCK_SIZE+0x456>
		const char *bpe = buf + sizeof(buf);
    1436:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    143a:	e7cd      	b.n	13d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d8>
    143c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    1440:	e7ca      	b.n	13d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d8>
		} else if (conv->altform_0) {
    1442:	f012 0f08 	tst.w	r2, #8
    1446:	d0d7      	beq.n	13f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f8>
			nj_len += 1U;
    1448:	3301      	adds	r3, #1
    144a:	e7d5      	b.n	13f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f8>
				char pad = ' ';
    144c:	f04f 0b20 	mov.w	fp, #32
    1450:	e001      	b.n	1456 <CONFIG_FPROTECT_BLOCK_SIZE+0x456>
					pad = '0';
    1452:	f04f 0b30 	mov.w	fp, #48	; 0x30
    1456:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    1458:	1e5f      	subs	r7, r3, #1
    145a:	2b00      	cmp	r3, #0
    145c:	dd07      	ble.n	146e <CONFIG_FPROTECT_BLOCK_SIZE+0x46e>
					OUTC(pad);
    145e:	4629      	mov	r1, r5
    1460:	4658      	mov	r0, fp
    1462:	47b0      	blx	r6
    1464:	2800      	cmp	r0, #0
    1466:	db4c      	blt.n	1502 <CONFIG_FPROTECT_BLOCK_SIZE+0x502>
    1468:	3401      	adds	r4, #1
				while (width-- > 0) {
    146a:	463b      	mov	r3, r7
    146c:	e7f4      	b.n	1458 <CONFIG_FPROTECT_BLOCK_SIZE+0x458>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    146e:	f1b8 0f00 	cmp.w	r8, #0
    1472:	d005      	beq.n	1480 <CONFIG_FPROTECT_BLOCK_SIZE+0x480>
			OUTC(sign);
    1474:	4629      	mov	r1, r5
    1476:	4640      	mov	r0, r8
    1478:	47b0      	blx	r6
    147a:	2800      	cmp	r0, #0
    147c:	db41      	blt.n	1502 <CONFIG_FPROTECT_BLOCK_SIZE+0x502>
    147e:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    1480:	f89d 301a 	ldrb.w	r3, [sp, #26]
    1484:	f3c3 1200 	ubfx	r2, r3, #4, #1
    1488:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    148c:	4313      	orrs	r3, r2
    148e:	d005      	beq.n	149c <CONFIG_FPROTECT_BLOCK_SIZE+0x49c>
				OUTC('0');
    1490:	4629      	mov	r1, r5
    1492:	2030      	movs	r0, #48	; 0x30
    1494:	47b0      	blx	r6
    1496:	2800      	cmp	r0, #0
    1498:	db33      	blt.n	1502 <CONFIG_FPROTECT_BLOCK_SIZE+0x502>
    149a:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    149c:	f89d 301a 	ldrb.w	r3, [sp, #26]
    14a0:	f013 0f10 	tst.w	r3, #16
    14a4:	d006      	beq.n	14b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x4b4>
				OUTC(conv->specifier);
    14a6:	4629      	mov	r1, r5
    14a8:	f89d 001b 	ldrb.w	r0, [sp, #27]
    14ac:	47b0      	blx	r6
    14ae:	2800      	cmp	r0, #0
    14b0:	db27      	blt.n	1502 <CONFIG_FPROTECT_BLOCK_SIZE+0x502>
    14b2:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    14b4:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
    14b6:	f103 38ff 	add.w	r8, r3, #4294967295
    14ba:	2b00      	cmp	r3, #0
    14bc:	dd07      	ble.n	14ce <CONFIG_FPROTECT_BLOCK_SIZE+0x4ce>
				OUTC('0');
    14be:	4629      	mov	r1, r5
    14c0:	2030      	movs	r0, #48	; 0x30
    14c2:	47b0      	blx	r6
    14c4:	2800      	cmp	r0, #0
    14c6:	db1c      	blt.n	1502 <CONFIG_FPROTECT_BLOCK_SIZE+0x502>
    14c8:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    14ca:	4643      	mov	r3, r8
    14cc:	e7f3      	b.n	14b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x4b6>
			}

			OUTS(bps, bpe);
    14ce:	4653      	mov	r3, sl
    14d0:	464a      	mov	r2, r9
    14d2:	4629      	mov	r1, r5
    14d4:	4630      	mov	r0, r6
    14d6:	f004 ffd5 	bl	6484 <outs>
    14da:	2800      	cmp	r0, #0
    14dc:	db11      	blt.n	1502 <CONFIG_FPROTECT_BLOCK_SIZE+0x502>
    14de:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    14e0:	2f00      	cmp	r7, #0
    14e2:	dd07      	ble.n	14f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x4f4>
			OUTC(' ');
    14e4:	4629      	mov	r1, r5
    14e6:	2020      	movs	r0, #32
    14e8:	47b0      	blx	r6
    14ea:	2800      	cmp	r0, #0
    14ec:	db09      	blt.n	1502 <CONFIG_FPROTECT_BLOCK_SIZE+0x502>
    14ee:	3401      	adds	r4, #1
			--width;
    14f0:	3f01      	subs	r7, #1
    14f2:	e7f5      	b.n	14e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4e0>
		fp = extract_conversion(conv, sp);
    14f4:	f8dd 9008 	ldr.w	r9, [sp, #8]
    14f8:	e528      	b.n	f4c <cbvprintf+0x10>
    14fa:	f8dd 9008 	ldr.w	r9, [sp, #8]
    14fe:	e525      	b.n	f4c <cbvprintf+0x10>
		}
	}

	return count;
    1500:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    1502:	b011      	add	sp, #68	; 0x44
    1504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1508:	00008115 	.word	0x00008115

0000150c <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    150c:	b508      	push	{r3, lr}
    150e:	f04f 0220 	mov.w	r2, #32
    1512:	f3ef 8311 	mrs	r3, BASEPRI
    1516:	f382 8812 	msr	BASEPRI_MAX, r2
    151a:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    151e:	f000 fe45 	bl	21ac <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1522:	4803      	ldr	r0, [pc, #12]	; (1530 <sys_reboot+0x24>)
    1524:	f004 fdc5 	bl	60b2 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1528:	f000 fa5e 	bl	19e8 <arch_cpu_idle>
    152c:	e7fc      	b.n	1528 <sys_reboot+0x1c>
    152e:	bf00      	nop
    1530:	00008118 	.word	0x00008118

00001534 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
    1534:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
    1536:	4b2a      	ldr	r3, [pc, #168]	; (15e0 <pm_system_resume+0xac>)
    1538:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    153a:	f005 031f 	and.w	r3, r5, #31
    153e:	2201      	movs	r2, #1
    1540:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1542:	0969      	lsrs	r1, r5, #5
    1544:	4b27      	ldr	r3, [pc, #156]	; (15e4 <pm_system_resume+0xb0>)
    1546:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    154a:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    154c:	f3bf 8f5b 	dmb	ish
    1550:	e853 1f00 	ldrex	r1, [r3]
    1554:	ea01 0400 	and.w	r4, r1, r0
    1558:	e843 4600 	strex	r6, r4, [r3]
    155c:	2e00      	cmp	r6, #0
    155e:	d1f7      	bne.n	1550 <pm_system_resume+0x1c>
    1560:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    1564:	420a      	tst	r2, r1
    1566:	d100      	bne.n	156a <pm_system_resume+0x36>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
    1568:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
    156a:	481f      	ldr	r0, [pc, #124]	; (15e8 <pm_system_resume+0xb4>)
    156c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    1570:	0093      	lsls	r3, r2, #2
    1572:	18c1      	adds	r1, r0, r3
	if (pm_state_exit_post_ops != NULL) {
    1574:	4a1d      	ldr	r2, [pc, #116]	; (15ec <pm_system_resume+0xb8>)
    1576:	b172      	cbz	r2, 1596 <pm_system_resume+0x62>
		pm_state_exit_post_ops(info->state, info->substate_id);
    1578:	7849      	ldrb	r1, [r1, #1]
    157a:	5cc0      	ldrb	r0, [r0, r3]
    157c:	f005 f8f8 	bl	6770 <pm_state_exit_post_ops>
    1580:	f04f 0320 	mov.w	r3, #32
    1584:	f3ef 8611 	mrs	r6, BASEPRI
    1588:	f383 8812 	msr	BASEPRI_MAX, r3
    158c:	f3bf 8f6f 	isb	sy
    1590:	4b17      	ldr	r3, [pc, #92]	; (15f0 <pm_system_resume+0xbc>)
    1592:	681c      	ldr	r4, [r3, #0]
    1594:	e010      	b.n	15b8 <pm_system_resume+0x84>
	__asm__ volatile(
    1596:	2300      	movs	r3, #0
    1598:	f383 8811 	msr	BASEPRI, r3
    159c:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    15a0:	e7ee      	b.n	1580 <pm_system_resume+0x4c>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    15a2:	4b0f      	ldr	r3, [pc, #60]	; (15e0 <pm_system_resume+0xac>)
    15a4:	7d1b      	ldrb	r3, [r3, #20]
    15a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    15aa:	0099      	lsls	r1, r3, #2
    15ac:	4b0e      	ldr	r3, [pc, #56]	; (15e8 <pm_system_resume+0xb4>)
    15ae:	5c58      	ldrb	r0, [r3, r1]
    15b0:	4790      	blx	r2
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    15b2:	b10c      	cbz	r4, 15b8 <pm_system_resume+0x84>
	return node->next;
    15b4:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    15b6:	b124      	cbz	r4, 15c2 <pm_system_resume+0x8e>
    15b8:	b11c      	cbz	r4, 15c2 <pm_system_resume+0x8e>
			callback = notifier->state_exit;
    15ba:	68a2      	ldr	r2, [r4, #8]
		if (callback) {
    15bc:	2a00      	cmp	r2, #0
    15be:	d1f0      	bne.n	15a2 <pm_system_resume+0x6e>
    15c0:	e7f7      	b.n	15b2 <pm_system_resume+0x7e>
	__asm__ volatile(
    15c2:	f386 8811 	msr	BASEPRI, r6
    15c6:	f3bf 8f6f 	isb	sy
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    15ca:	4807      	ldr	r0, [pc, #28]	; (15e8 <pm_system_resume+0xb4>)
    15cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    15d0:	00aa      	lsls	r2, r5, #2
    15d2:	1881      	adds	r1, r0, r2
    15d4:	2300      	movs	r3, #0
    15d6:	5083      	str	r3, [r0, r2]
    15d8:	604b      	str	r3, [r1, #4]
    15da:	608b      	str	r3, [r1, #8]
}
    15dc:	e7c4      	b.n	1568 <pm_system_resume+0x34>
    15de:	bf00      	nop
    15e0:	20001d20 	.word	0x20001d20
    15e4:	20000664 	.word	0x20000664
    15e8:	20000654 	.word	0x20000654
    15ec:	00006771 	.word	0x00006771
    15f0:	2000064c 	.word	0x2000064c

000015f4 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    15f4:	b570      	push	{r4, r5, r6, lr}
    15f6:	4604      	mov	r4, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    15f8:	4b57      	ldr	r3, [pc, #348]	; (1758 <pm_system_suspend+0x164>)
    15fa:	7d1d      	ldrb	r5, [r3, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    15fc:	096a      	lsrs	r2, r5, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    15fe:	f3bf 8f5b 	dmb	ish
    1602:	4b56      	ldr	r3, [pc, #344]	; (175c <pm_system_suspend+0x168>)
    1604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    1608:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    160c:	f005 021f 	and.w	r2, r5, #31
    1610:	4113      	asrs	r3, r2

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    1612:	f013 0f01 	tst.w	r3, #1
    1616:	d015      	beq.n	1644 <pm_system_suspend+0x50>
		if (info != NULL) {
			z_cpus_pm_state[id] = *info;
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    1618:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    161c:	4a50      	ldr	r2, [pc, #320]	; (1760 <pm_system_suspend+0x16c>)
    161e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    1622:	b1f3      	cbz	r3, 1662 <pm_system_suspend+0x6e>
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    1624:	f1b4 3fff 	cmp.w	r4, #4294967295
    1628:	d131      	bne.n	168e <pm_system_suspend+0x9a>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    162a:	f003 fbfd 	bl	4e28 <k_sched_lock>
	__asm__ volatile(
    162e:	f04f 0320 	mov.w	r3, #32
    1632:	f3ef 8611 	mrs	r6, BASEPRI
    1636:	f383 8812 	msr	BASEPRI_MAX, r3
    163a:	f3bf 8f6f 	isb	sy
	return list->head;
    163e:	4b49      	ldr	r3, [pc, #292]	; (1764 <pm_system_suspend+0x170>)
    1640:	681c      	ldr	r4, [r3, #0]
    1642:	e045      	b.n	16d0 <pm_system_suspend+0xdc>
		info = pm_policy_next_state(id, ticks);
    1644:	4601      	mov	r1, r0
    1646:	4628      	mov	r0, r5
    1648:	f000 f8a4 	bl	1794 <pm_policy_next_state>
		if (info != NULL) {
    164c:	2800      	cmp	r0, #0
    164e:	d0e3      	beq.n	1618 <pm_system_suspend+0x24>
			z_cpus_pm_state[id] = *info;
    1650:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    1654:	4a42      	ldr	r2, [pc, #264]	; (1760 <pm_system_suspend+0x16c>)
    1656:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    165a:	c807      	ldmia	r0, {r0, r1, r2}
    165c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    1660:	e7da      	b.n	1618 <pm_system_suspend+0x24>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1662:	f005 021f 	and.w	r2, r5, #31
    1666:	2301      	movs	r3, #1
    1668:	4093      	lsls	r3, r2

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    166a:	096d      	lsrs	r5, r5, #5
    166c:	4a3b      	ldr	r2, [pc, #236]	; (175c <pm_system_suspend+0x168>)
    166e:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    1672:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1674:	f3bf 8f5b 	dmb	ish
    1678:	e855 2f00 	ldrex	r2, [r5]
    167c:	401a      	ands	r2, r3
    167e:	e845 2100 	strex	r1, r2, [r5]
    1682:	2900      	cmp	r1, #0
    1684:	d1f8      	bne.n	1678 <pm_system_suspend+0x84>
    1686:	f3bf 8f5b 	dmb	ish
		ret = false;
    168a:	2000      	movs	r0, #0
		goto end;
    168c:	e062      	b.n	1754 <pm_system_suspend+0x160>
		     k_us_to_ticks_ceil32(
    168e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    1692:	4a33      	ldr	r2, [pc, #204]	; (1760 <pm_system_suspend+0x16c>)
    1694:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1698:	6898      	ldr	r0, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    169a:	0c41      	lsrs	r1, r0, #17
    169c:	03c0      	lsls	r0, r0, #15
    169e:	4b32      	ldr	r3, [pc, #200]	; (1768 <pm_system_suspend+0x174>)
    16a0:	18c0      	adds	r0, r0, r3
    16a2:	4a32      	ldr	r2, [pc, #200]	; (176c <pm_system_suspend+0x178>)
    16a4:	f04f 0300 	mov.w	r3, #0
    16a8:	f141 0100 	adc.w	r1, r1, #0
    16ac:	f7fe fd28 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    16b0:	2101      	movs	r1, #1
    16b2:	1a20      	subs	r0, r4, r0
    16b4:	f006 fa34 	bl	7b20 <z_set_timeout_expiry>
    16b8:	e7b7      	b.n	162a <pm_system_suspend+0x36>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    16ba:	4b27      	ldr	r3, [pc, #156]	; (1758 <pm_system_suspend+0x164>)
    16bc:	7d1b      	ldrb	r3, [r3, #20]
    16be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    16c2:	4927      	ldr	r1, [pc, #156]	; (1760 <pm_system_suspend+0x16c>)
    16c4:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    16c8:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    16ca:	b10c      	cbz	r4, 16d0 <pm_system_suspend+0xdc>
	return node->next;
    16cc:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    16ce:	b124      	cbz	r4, 16da <pm_system_suspend+0xe6>
    16d0:	b11c      	cbz	r4, 16da <pm_system_suspend+0xe6>
			callback = notifier->state_entry;
    16d2:	6862      	ldr	r2, [r4, #4]
		if (callback) {
    16d4:	2a00      	cmp	r2, #0
    16d6:	d1f0      	bne.n	16ba <pm_system_suspend+0xc6>
    16d8:	e7f7      	b.n	16ca <pm_system_suspend+0xd6>
	__asm__ volatile(
    16da:	f386 8811 	msr	BASEPRI, r6
    16de:	f3bf 8f6f 	isb	sy
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    16e2:	f005 031f 	and.w	r3, r5, #31
    16e6:	2101      	movs	r1, #1
    16e8:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    16ea:	096b      	lsrs	r3, r5, #5
    16ec:	4a20      	ldr	r2, [pc, #128]	; (1770 <pm_system_suspend+0x17c>)
    16ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    16f2:	f3bf 8f5b 	dmb	ish
    16f6:	e853 2f00 	ldrex	r2, [r3]
    16fa:	430a      	orrs	r2, r1
    16fc:	e843 2000 	strex	r0, r2, [r3]
    1700:	2800      	cmp	r0, #0
    1702:	d1f8      	bne.n	16f6 <pm_system_suspend+0x102>
    1704:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    1708:	4b1a      	ldr	r3, [pc, #104]	; (1774 <pm_system_suspend+0x180>)
    170a:	b14b      	cbz	r3, 1720 <pm_system_suspend+0x12c>
		pm_state_set(info->state, info->substate_id);
    170c:	4b14      	ldr	r3, [pc, #80]	; (1760 <pm_system_suspend+0x16c>)
    170e:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    1712:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    1716:	7849      	ldrb	r1, [r1, #1]
    1718:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    171c:	f005 f81c 	bl	6758 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    1720:	f7ff ff08 	bl	1534 <pm_system_resume>
	atomic_val_t mask = ATOMIC_MASK(bit);
    1724:	f005 031f 	and.w	r3, r5, #31
    1728:	2401      	movs	r4, #1
    172a:	fa04 f303 	lsl.w	r3, r4, r3
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    172e:	096d      	lsrs	r5, r5, #5
    1730:	4a0a      	ldr	r2, [pc, #40]	; (175c <pm_system_suspend+0x168>)
    1732:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    1736:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1738:	f3bf 8f5b 	dmb	ish
    173c:	e855 2f00 	ldrex	r2, [r5]
    1740:	401a      	ands	r2, r3
    1742:	e845 2100 	strex	r1, r2, [r5]
    1746:	2900      	cmp	r1, #0
    1748:	d1f8      	bne.n	173c <pm_system_suspend+0x148>
    174a:	f3bf 8f5b 	dmb	ish
	atomic_clear_bit(z_cpus_pm_state_forced, id);
	k_sched_unlock();
    174e:	f003 fd8d 	bl	526c <k_sched_unlock>
	bool ret = true;
    1752:	4620      	mov	r0, r4
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    1754:	bd70      	pop	{r4, r5, r6, pc}
    1756:	bf00      	nop
    1758:	20001d20 	.word	0x20001d20
    175c:	20000660 	.word	0x20000660
    1760:	20000654 	.word	0x20000654
    1764:	2000064c 	.word	0x2000064c
    1768:	000f423f 	.word	0x000f423f
    176c:	000f4240 	.word	0x000f4240
    1770:	20000664 	.word	0x20000664
    1774:	00006759 	.word	0x00006759

00001778 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1778:	f3bf 8f5b 	dmb	ish
    177c:	4b04      	ldr	r3, [pc, #16]	; (1790 <pm_policy_state_lock_is_active+0x18>)
    177e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1782:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    1786:	3800      	subs	r0, #0
    1788:	bf18      	it	ne
    178a:	2001      	movne	r0, #1
    178c:	4770      	bx	lr
    178e:	bf00      	nop
    1790:	20000668 	.word	0x20000668

00001794 <pm_policy_next_state>:
{
    1794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1798:	b082      	sub	sp, #8
    179a:	460e      	mov	r6, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    179c:	a901      	add	r1, sp, #4
    179e:	f000 f843 	bl	1828 <pm_state_cpu_get_all>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    17a2:	1e44      	subs	r4, r0, #1
    17a4:	b224      	sxth	r4, r4
    17a6:	e007      	b.n	17b8 <pm_policy_next_state+0x24>
		if ((ticks == K_TICKS_FOREVER) ||
    17a8:	f1b6 3fff 	cmp.w	r6, #4294967295
    17ac:	d032      	beq.n	1814 <pm_policy_next_state+0x80>
		    (ticks >= (min_residency + exit_latency))) {
    17ae:	4440      	add	r0, r8
		if ((ticks == K_TICKS_FOREVER) ||
    17b0:	42b0      	cmp	r0, r6
    17b2:	d92f      	bls.n	1814 <pm_policy_next_state+0x80>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    17b4:	3c01      	subs	r4, #1
    17b6:	b224      	sxth	r4, r4
    17b8:	2c00      	cmp	r4, #0
    17ba:	db2a      	blt.n	1812 <pm_policy_next_state+0x7e>
		const struct pm_state_info *state = &cpu_states[i];
    17bc:	9b01      	ldr	r3, [sp, #4]
    17be:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    17c2:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    17c6:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    17ca:	f7ff ffd5 	bl	1778 <pm_policy_state_lock_is_active>
    17ce:	2800      	cmp	r0, #0
    17d0:	d1f0      	bne.n	17b4 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    17d2:	6868      	ldr	r0, [r5, #4]
    17d4:	0c41      	lsrs	r1, r0, #17
    17d6:	03c0      	lsls	r0, r0, #15
    17d8:	4f10      	ldr	r7, [pc, #64]	; (181c <pm_policy_next_state+0x88>)
    17da:	19c0      	adds	r0, r0, r7
    17dc:	4a10      	ldr	r2, [pc, #64]	; (1820 <pm_policy_next_state+0x8c>)
    17de:	f04f 0300 	mov.w	r3, #0
    17e2:	f141 0100 	adc.w	r1, r1, #0
    17e6:	f7fe fc8b 	bl	100 <__aeabi_uldivmod>
    17ea:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    17ec:	68ab      	ldr	r3, [r5, #8]
    17ee:	0c59      	lsrs	r1, r3, #17
    17f0:	03db      	lsls	r3, r3, #15
    17f2:	19d8      	adds	r0, r3, r7
    17f4:	4a0a      	ldr	r2, [pc, #40]	; (1820 <pm_policy_next_state+0x8c>)
    17f6:	f04f 0300 	mov.w	r3, #0
    17fa:	f141 0100 	adc.w	r1, r1, #0
    17fe:	f7fe fc7f 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1802:	4b08      	ldr	r3, [pc, #32]	; (1824 <pm_policy_next_state+0x90>)
    1804:	681b      	ldr	r3, [r3, #0]
    1806:	f1b3 3fff 	cmp.w	r3, #4294967295
    180a:	d0cd      	beq.n	17a8 <pm_policy_next_state+0x14>
    180c:	4283      	cmp	r3, r0
    180e:	d8cb      	bhi.n	17a8 <pm_policy_next_state+0x14>
    1810:	e7d0      	b.n	17b4 <pm_policy_next_state+0x20>
	return NULL;
    1812:	2500      	movs	r5, #0
}
    1814:	4628      	mov	r0, r5
    1816:	b002      	add	sp, #8
    1818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    181c:	000f423f 	.word	0x000f423f
    1820:	000f4240 	.word	0x000f4240
    1824:	20000298 	.word	0x20000298

00001828 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    1828:	b908      	cbnz	r0, 182e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    182a:	4b02      	ldr	r3, [pc, #8]	; (1834 <pm_state_cpu_get_all+0xc>)
    182c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    182e:	2000      	movs	r0, #0
    1830:	4770      	bx	lr
    1832:	bf00      	nop
    1834:	00008144 	.word	0x00008144

00001838 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    1838:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    183a:	4802      	ldr	r0, [pc, #8]	; (1844 <nrf_cc3xx_platform_abort_init+0xc>)
    183c:	f004 f848 	bl	58d0 <nrf_cc3xx_platform_set_abort>
}
    1840:	bd08      	pop	{r3, pc}
    1842:	bf00      	nop
    1844:	00008144 	.word	0x00008144

00001848 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1848:	b1d0      	cbz	r0, 1880 <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    184a:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    184c:	6842      	ldr	r2, [r0, #4]
    184e:	2a04      	cmp	r2, #4
    1850:	d005      	beq.n	185e <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1852:	b1d2      	cbz	r2, 188a <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    1854:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    1856:	f003 f9dd 	bl	4c14 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    185a:	2000      	movs	r0, #0
    }
}
    185c:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    185e:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1860:	2200      	movs	r2, #0
    1862:	f3bf 8f5b 	dmb	ish
    1866:	e853 1f00 	ldrex	r1, [r3]
    186a:	2901      	cmp	r1, #1
    186c:	d103      	bne.n	1876 <mutex_unlock_platform+0x2e>
    186e:	e843 2000 	strex	r0, r2, [r3]
    1872:	2800      	cmp	r0, #0
    1874:	d1f7      	bne.n	1866 <mutex_unlock_platform+0x1e>
    1876:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    187a:	d104      	bne.n	1886 <mutex_unlock_platform+0x3e>
    187c:	4610      	mov	r0, r2
    187e:	e7ed      	b.n	185c <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1880:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    1884:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1886:	4802      	ldr	r0, [pc, #8]	; (1890 <mutex_unlock_platform+0x48>)
    1888:	e7e8      	b.n	185c <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    188a:	4802      	ldr	r0, [pc, #8]	; (1894 <mutex_unlock_platform+0x4c>)
    188c:	e7e6      	b.n	185c <mutex_unlock_platform+0x14>
    188e:	bf00      	nop
    1890:	ffff8fe9 	.word	0xffff8fe9
    1894:	ffff8fea 	.word	0xffff8fea

00001898 <mutex_lock_platform>:
    if(mutex == NULL) {
    1898:	b320      	cbz	r0, 18e4 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    189a:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    189c:	6842      	ldr	r2, [r0, #4]
    189e:	2a04      	cmp	r2, #4
    18a0:	d002      	beq.n	18a8 <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    18a2:	b992      	cbnz	r2, 18ca <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    18a4:	4811      	ldr	r0, [pc, #68]	; (18ec <mutex_lock_platform+0x54>)
    18a6:	e00f      	b.n	18c8 <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    18a8:	6803      	ldr	r3, [r0, #0]
    18aa:	2201      	movs	r2, #1
    18ac:	f3bf 8f5b 	dmb	ish
    18b0:	e853 1f00 	ldrex	r1, [r3]
    18b4:	2900      	cmp	r1, #0
    18b6:	d103      	bne.n	18c0 <mutex_lock_platform+0x28>
    18b8:	e843 2000 	strex	r0, r2, [r3]
    18bc:	2800      	cmp	r0, #0
    18be:	d1f7      	bne.n	18b0 <mutex_lock_platform+0x18>
    18c0:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    18c4:	d10c      	bne.n	18e0 <mutex_lock_platform+0x48>
    18c6:	2000      	movs	r0, #0
}
    18c8:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    18ca:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    18cc:	f04f 32ff 	mov.w	r2, #4294967295
    18d0:	f04f 33ff 	mov.w	r3, #4294967295
    18d4:	f003 f914 	bl	4b00 <z_impl_k_mutex_lock>
        if (ret == 0) {
    18d8:	2800      	cmp	r0, #0
    18da:	d0f5      	beq.n	18c8 <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    18dc:	4804      	ldr	r0, [pc, #16]	; (18f0 <mutex_lock_platform+0x58>)
    18de:	e7f3      	b.n	18c8 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    18e0:	4803      	ldr	r0, [pc, #12]	; (18f0 <mutex_lock_platform+0x58>)
    18e2:	e7f1      	b.n	18c8 <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    18e4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    18e8:	4770      	bx	lr
    18ea:	bf00      	nop
    18ec:	ffff8fea 	.word	0xffff8fea
    18f0:	ffff8fe9 	.word	0xffff8fe9

000018f4 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    18f4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    18f6:	4604      	mov	r4, r0
    18f8:	b188      	cbz	r0, 191e <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    18fa:	6863      	ldr	r3, [r4, #4]
    18fc:	2b04      	cmp	r3, #4
    18fe:	d00d      	beq.n	191c <mutex_free_platform+0x28>
    1900:	2b08      	cmp	r3, #8
    1902:	d00b      	beq.n	191c <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1904:	b153      	cbz	r3, 191c <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    1906:	f013 0f02 	tst.w	r3, #2
    190a:	d00d      	beq.n	1928 <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    190c:	4621      	mov	r1, r4
    190e:	4809      	ldr	r0, [pc, #36]	; (1934 <mutex_free_platform+0x40>)
    1910:	f005 ff43 	bl	779a <k_mem_slab_free>
        mutex->mutex = NULL;
    1914:	2300      	movs	r3, #0
    1916:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1918:	2300      	movs	r3, #0
    191a:	6063      	str	r3, [r4, #4]
}
    191c:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    191e:	4b06      	ldr	r3, [pc, #24]	; (1938 <mutex_free_platform+0x44>)
    1920:	685b      	ldr	r3, [r3, #4]
    1922:	4806      	ldr	r0, [pc, #24]	; (193c <mutex_free_platform+0x48>)
    1924:	4798      	blx	r3
    1926:	e7e8      	b.n	18fa <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1928:	2214      	movs	r2, #20
    192a:	2100      	movs	r1, #0
    192c:	6820      	ldr	r0, [r4, #0]
    192e:	f004 fee2 	bl	66f6 <memset>
    1932:	e7f1      	b.n	1918 <mutex_free_platform+0x24>
    1934:	20000684 	.word	0x20000684
    1938:	200003d4 	.word	0x200003d4
    193c:	0000814c 	.word	0x0000814c

00001940 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1940:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1942:	4604      	mov	r4, r0
    1944:	b178      	cbz	r0, 1966 <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1946:	6863      	ldr	r3, [r4, #4]
    1948:	2b04      	cmp	r3, #4
    194a:	d00b      	beq.n	1964 <mutex_init_platform+0x24>
    194c:	2b08      	cmp	r3, #8
    194e:	d009      	beq.n	1964 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    1950:	b90b      	cbnz	r3, 1956 <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    1952:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    1954:	b163      	cbz	r3, 1970 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    1956:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    1958:	f005 ff8e 	bl	7878 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    195c:	6863      	ldr	r3, [r4, #4]
    195e:	f043 0301 	orr.w	r3, r3, #1
    1962:	6063      	str	r3, [r4, #4]
}
    1964:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    1966:	4b0f      	ldr	r3, [pc, #60]	; (19a4 <mutex_init_platform+0x64>)
    1968:	685b      	ldr	r3, [r3, #4]
    196a:	480f      	ldr	r0, [pc, #60]	; (19a8 <mutex_init_platform+0x68>)
    196c:	4798      	blx	r3
    196e:	e7ea      	b.n	1946 <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    1970:	f04f 32ff 	mov.w	r2, #4294967295
    1974:	f04f 33ff 	mov.w	r3, #4294967295
    1978:	4621      	mov	r1, r4
    197a:	480c      	ldr	r0, [pc, #48]	; (19ac <mutex_init_platform+0x6c>)
    197c:	f002 ff92 	bl	48a4 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    1980:	b908      	cbnz	r0, 1986 <mutex_init_platform+0x46>
    1982:	6823      	ldr	r3, [r4, #0]
    1984:	b91b      	cbnz	r3, 198e <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    1986:	4b07      	ldr	r3, [pc, #28]	; (19a4 <mutex_init_platform+0x64>)
    1988:	685b      	ldr	r3, [r3, #4]
    198a:	4809      	ldr	r0, [pc, #36]	; (19b0 <mutex_init_platform+0x70>)
    198c:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    198e:	2214      	movs	r2, #20
    1990:	2100      	movs	r1, #0
    1992:	6820      	ldr	r0, [r4, #0]
    1994:	f004 feaf 	bl	66f6 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    1998:	6863      	ldr	r3, [r4, #4]
    199a:	f043 0302 	orr.w	r3, r3, #2
    199e:	6063      	str	r3, [r4, #4]
    19a0:	e7d9      	b.n	1956 <mutex_init_platform+0x16>
    19a2:	bf00      	nop
    19a4:	200003d4 	.word	0x200003d4
    19a8:	0000814c 	.word	0x0000814c
    19ac:	20000684 	.word	0x20000684
    19b0:	00008174 	.word	0x00008174

000019b4 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    19b4:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    19b6:	2340      	movs	r3, #64	; 0x40
    19b8:	2214      	movs	r2, #20
    19ba:	4904      	ldr	r1, [pc, #16]	; (19cc <nrf_cc3xx_platform_mutex_init+0x18>)
    19bc:	4804      	ldr	r0, [pc, #16]	; (19d0 <nrf_cc3xx_platform_mutex_init+0x1c>)
    19be:	f005 fede 	bl	777e <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    19c2:	4904      	ldr	r1, [pc, #16]	; (19d4 <nrf_cc3xx_platform_mutex_init+0x20>)
    19c4:	4804      	ldr	r0, [pc, #16]	; (19d8 <nrf_cc3xx_platform_mutex_init+0x24>)
    19c6:	f003 ffe3 	bl	5990 <nrf_cc3xx_platform_set_mutexes>
}
    19ca:	bd08      	pop	{r3, pc}
    19cc:	200006a0 	.word	0x200006a0
    19d0:	20000684 	.word	0x20000684
    19d4:	000081b4 	.word	0x000081b4
    19d8:	000081a4 	.word	0x000081a4

000019dc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    19dc:	4901      	ldr	r1, [pc, #4]	; (19e4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    19de:	2210      	movs	r2, #16
	str	r2, [r1]
    19e0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    19e2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    19e4:	e000ed10 	.word	0xe000ed10

000019e8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    19e8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    19ea:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    19ec:	f380 8811 	msr	BASEPRI, r0
	isb
    19f0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    19f4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    19f8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    19fa:	b662      	cpsie	i
	isb
    19fc:	f3bf 8f6f 	isb	sy

	bx	lr
    1a00:	4770      	bx	lr
    1a02:	bf00      	nop

00001a04 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1a04:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1a06:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1a08:	f381 8811 	msr	BASEPRI, r1

	wfe
    1a0c:	bf20      	wfe

	msr	BASEPRI, r0
    1a0e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1a12:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1a14:	4770      	bx	lr
    1a16:	bf00      	nop

00001a18 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1a18:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1a1a:	2800      	cmp	r0, #0
    1a1c:	db07      	blt.n	1a2e <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a1e:	f000 021f 	and.w	r2, r0, #31
    1a22:	0940      	lsrs	r0, r0, #5
    1a24:	2301      	movs	r3, #1
    1a26:	4093      	lsls	r3, r2
    1a28:	4a01      	ldr	r2, [pc, #4]	; (1a30 <arch_irq_enable+0x18>)
    1a2a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
    1a2e:	4770      	bx	lr
    1a30:	e000e100 	.word	0xe000e100

00001a34 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    1a34:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1a36:	2800      	cmp	r0, #0
    1a38:	db0c      	blt.n	1a54 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a3a:	f000 021f 	and.w	r2, r0, #31
    1a3e:	0940      	lsrs	r0, r0, #5
    1a40:	2301      	movs	r3, #1
    1a42:	4093      	lsls	r3, r2
    1a44:	3020      	adds	r0, #32
    1a46:	4a04      	ldr	r2, [pc, #16]	; (1a58 <arch_irq_disable+0x24>)
    1a48:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1a4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a50:	f3bf 8f6f 	isb	sy
}
    1a54:	4770      	bx	lr
    1a56:	bf00      	nop
    1a58:	e000e100 	.word	0xe000e100

00001a5c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1a5c:	0942      	lsrs	r2, r0, #5
    1a5e:	4b05      	ldr	r3, [pc, #20]	; (1a74 <arch_irq_is_enabled+0x18>)
    1a60:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1a64:	f000 001f 	and.w	r0, r0, #31
    1a68:	2301      	movs	r3, #1
    1a6a:	fa03 f000 	lsl.w	r0, r3, r0
}
    1a6e:	4010      	ands	r0, r2
    1a70:	4770      	bx	lr
    1a72:	bf00      	nop
    1a74:	e000e100 	.word	0xe000e100

00001a78 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    1a78:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1a7a:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1a7c:	2800      	cmp	r0, #0
    1a7e:	db08      	blt.n	1a92 <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1a80:	0149      	lsls	r1, r1, #5
    1a82:	b2c9      	uxtb	r1, r1
    1a84:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    1a88:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    1a8c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    1a90:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1a92:	f000 000f 	and.w	r0, r0, #15
    1a96:	0149      	lsls	r1, r1, #5
    1a98:	b2c9      	uxtb	r1, r1
    1a9a:	4b01      	ldr	r3, [pc, #4]	; (1aa0 <z_arm_irq_priority_set+0x28>)
    1a9c:	5419      	strb	r1, [r3, r0]
}
    1a9e:	4770      	bx	lr
    1aa0:	e000ed14 	.word	0xe000ed14

00001aa4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1aa4:	bf30      	wfi
    b z_SysNmiOnReset
    1aa6:	f7ff bffd 	b.w	1aa4 <z_SysNmiOnReset>
    1aaa:	bf00      	nop

00001aac <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    1aac:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1aae:	4b0b      	ldr	r3, [pc, #44]	; (1adc <z_arm_prep_c+0x30>)
    1ab0:	4a0b      	ldr	r2, [pc, #44]	; (1ae0 <z_arm_prep_c+0x34>)
    1ab2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1ab6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1ab8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1abc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1ac0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1ac4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1ac8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1acc:	f002 fe36 	bl	473c <z_bss_zero>
	z_data_copy();
    1ad0:	f003 fd38 	bl	5544 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1ad4:	f000 fa12 	bl	1efc <z_arm_interrupt_init>
	z_cstart();
    1ad8:	f002 fe8e 	bl	47f8 <z_cstart>
    1adc:	e000ed00 	.word	0xe000ed00
    1ae0:	00000000 	.word	0x00000000

00001ae4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1ae4:	4a0a      	ldr	r2, [pc, #40]	; (1b10 <arch_swap+0x2c>)
    1ae6:	6893      	ldr	r3, [r2, #8]
    1ae8:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    1aec:	4909      	ldr	r1, [pc, #36]	; (1b14 <arch_swap+0x30>)
    1aee:	6809      	ldr	r1, [r1, #0]
    1af0:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1af4:	4908      	ldr	r1, [pc, #32]	; (1b18 <arch_swap+0x34>)
    1af6:	684b      	ldr	r3, [r1, #4]
    1af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1afc:	604b      	str	r3, [r1, #4]
    1afe:	2300      	movs	r3, #0
    1b00:	f383 8811 	msr	BASEPRI, r3
    1b04:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1b08:	6893      	ldr	r3, [r2, #8]
}
    1b0a:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    1b0e:	4770      	bx	lr
    1b10:	20001d20 	.word	0x20001d20
    1b14:	0000838c 	.word	0x0000838c
    1b18:	e000ed00 	.word	0xe000ed00

00001b1c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1b1c:	4913      	ldr	r1, [pc, #76]	; (1b6c <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1b1e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1b20:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1b24:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1b26:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1b2a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1b2e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1b30:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1b34:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1b38:	4f0d      	ldr	r7, [pc, #52]	; (1b70 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1b3a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1b3e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1b40:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1b42:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1b44:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    1b48:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1b4a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1b4e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    1b52:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1b54:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    1b56:	f000 fa7b 	bl	2050 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1b5a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1b5e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1b62:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1b66:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1b6a:	4770      	bx	lr
    ldr r1, =_kernel
    1b6c:	20001d20 	.word	0x20001d20
    ldr v4, =_SCS_ICSR
    1b70:	e000ed04 	.word	0xe000ed04

00001b74 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1b74:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1b78:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1b7a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1b7e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1b82:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1b84:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1b88:	2902      	cmp	r1, #2
    beq _oops
    1b8a:	d0ff      	beq.n	1b8c <_oops>

00001b8c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1b8c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1b8e:	f004 fc9c 	bl	64ca <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1b92:	bd01      	pop	{r0, pc}

00001b94 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    1b94:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1b96:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    1b9a:	490e      	ldr	r1, [pc, #56]	; (1bd4 <arch_new_thread+0x40>)
    1b9c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    1ba0:	f021 0101 	bic.w	r1, r1, #1
    1ba4:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    1ba8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1bac:	9b01      	ldr	r3, [sp, #4]
    1bae:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    1bb2:	9b02      	ldr	r3, [sp, #8]
    1bb4:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1bb8:	9b03      	ldr	r3, [sp, #12]
    1bba:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1bbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1bc2:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    1bc6:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1bc8:	2300      	movs	r3, #0
    1bca:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1bce:	bc10      	pop	{r4}
    1bd0:	4770      	bx	lr
    1bd2:	bf00      	nop
    1bd4:	00006379 	.word	0x00006379

00001bd8 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1bd8:	4b12      	ldr	r3, [pc, #72]	; (1c24 <z_check_thread_stack_fail+0x4c>)
    1bda:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    1bdc:	b302      	cbz	r2, 1c20 <z_check_thread_stack_fail+0x48>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1bde:	f110 0f16 	cmn.w	r0, #22
    1be2:	d011      	beq.n	1c08 <z_check_thread_stack_fail+0x30>
    1be4:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    1be8:	f1a3 0c20 	sub.w	ip, r3, #32
    1bec:	4584      	cmp	ip, r0
    1bee:	d805      	bhi.n	1bfc <z_check_thread_stack_fail+0x24>
    1bf0:	4283      	cmp	r3, r0
    1bf2:	d905      	bls.n	1c00 <z_check_thread_stack_fail+0x28>
    1bf4:	428b      	cmp	r3, r1
    1bf6:	d805      	bhi.n	1c04 <z_check_thread_stack_fail+0x2c>
    1bf8:	2100      	movs	r1, #0
    1bfa:	e00b      	b.n	1c14 <z_check_thread_stack_fail+0x3c>
    1bfc:	2100      	movs	r1, #0
    1bfe:	e009      	b.n	1c14 <z_check_thread_stack_fail+0x3c>
    1c00:	2100      	movs	r1, #0
    1c02:	e007      	b.n	1c14 <z_check_thread_stack_fail+0x3c>
    1c04:	2101      	movs	r1, #1
    1c06:	e005      	b.n	1c14 <z_check_thread_stack_fail+0x3c>
    1c08:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    1c0c:	428b      	cmp	r3, r1
    1c0e:	bf94      	ite	ls
    1c10:	2100      	movls	r1, #0
    1c12:	2101      	movhi	r1, #1
    1c14:	b909      	cbnz	r1, 1c1a <z_check_thread_stack_fail+0x42>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    1c16:	2000      	movs	r0, #0
}
    1c18:	4770      	bx	lr
		return thread->stack_info.start;
    1c1a:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    1c1e:	4770      	bx	lr
		return 0;
    1c20:	2000      	movs	r0, #0
    1c22:	4770      	bx	lr
    1c24:	20001d20 	.word	0x20001d20

00001c28 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1c28:	b508      	push	{r3, lr}
    1c2a:	460d      	mov	r5, r1
    1c2c:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1c2e:	4b08      	ldr	r3, [pc, #32]	; (1c50 <arch_switch_to_main_thread+0x28>)
    1c30:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1c32:	f000 fa0d 	bl	2050 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1c36:	4620      	mov	r0, r4
    1c38:	f385 8809 	msr	PSP, r5
    1c3c:	2100      	movs	r1, #0
    1c3e:	b663      	cpsie	if
    1c40:	f381 8811 	msr	BASEPRI, r1
    1c44:	f3bf 8f6f 	isb	sy
    1c48:	2200      	movs	r2, #0
    1c4a:	2300      	movs	r3, #0
    1c4c:	f004 fb94 	bl	6378 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1c50:	20001d20 	.word	0x20001d20

00001c54 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1c54:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1c56:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1c58:	4a0b      	ldr	r2, [pc, #44]	; (1c88 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1c5a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1c5c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1c5e:	bf1e      	ittt	ne
	movne	r1, #0
    1c60:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1c62:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1c64:	f005 fdec 	blne	7840 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1c68:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1c6a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1c6e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1c72:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1c76:	4905      	ldr	r1, [pc, #20]	; (1c8c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1c78:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1c7a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1c7c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1c7e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1c82:	4903      	ldr	r1, [pc, #12]	; (1c90 <_isr_wrapper+0x3c>)
	bx r1
    1c84:	4708      	bx	r1
    1c86:	0000      	.short	0x0000
	ldr r2, =_kernel
    1c88:	20001d20 	.word	0x20001d20
	ldr r1, =_sw_isr_table
    1c8c:	00007c90 	.word	0x00007c90
	ldr r1, =z_arm_int_exit
    1c90:	00001c95 	.word	0x00001c95

00001c94 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1c94:	4b04      	ldr	r3, [pc, #16]	; (1ca8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1c96:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1c98:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    1c9a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1c9c:	d003      	beq.n	1ca6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1c9e:	4903      	ldr	r1, [pc, #12]	; (1cac <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1ca0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1ca4:	600a      	str	r2, [r1, #0]

00001ca6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1ca6:	4770      	bx	lr
	ldr r3, =_kernel
    1ca8:	20001d20 	.word	0x20001d20
	ldr r1, =_SCS_ICSR
    1cac:	e000ed04 	.word	0xe000ed04

00001cb0 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    1cb0:	b510      	push	{r4, lr}
    1cb2:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1cb4:	4b12      	ldr	r3, [pc, #72]	; (1d00 <bus_fault+0x50>)
    1cb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1cb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1cbc:	f413 7f00 	tst.w	r3, #512	; 0x200
    1cc0:	d00b      	beq.n	1cda <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1cc2:	4b0f      	ldr	r3, [pc, #60]	; (1d00 <bus_fault+0x50>)
    1cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1cc8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1ccc:	d005      	beq.n	1cda <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1cce:	b121      	cbz	r1, 1cda <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1cd0:	4a0b      	ldr	r2, [pc, #44]	; (1d00 <bus_fault+0x50>)
    1cd2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1cd4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1cd8:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1cda:	4b09      	ldr	r3, [pc, #36]	; (1d00 <bus_fault+0x50>)
    1cdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1ce0:	f413 7f80 	tst.w	r3, #256	; 0x100
    1ce4:	d101      	bne.n	1cea <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1ce6:	4b06      	ldr	r3, [pc, #24]	; (1d00 <bus_fault+0x50>)
    1ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1cea:	4a05      	ldr	r2, [pc, #20]	; (1d00 <bus_fault+0x50>)
    1cec:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1cee:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1cf2:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    1cf4:	2101      	movs	r1, #1
    1cf6:	f004 fbfa 	bl	64ee <memory_fault_recoverable>
    1cfa:	7020      	strb	r0, [r4, #0]

	return reason;
}
    1cfc:	2000      	movs	r0, #0
    1cfe:	bd10      	pop	{r4, pc}
    1d00:	e000ed00 	.word	0xe000ed00

00001d04 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1d04:	4b07      	ldr	r3, [pc, #28]	; (1d24 <usage_fault+0x20>)
    1d06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1d08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1d0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1d0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1d0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1d10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1d12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1d14:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1d18:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1d1c:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    1d1e:	2000      	movs	r0, #0
    1d20:	4770      	bx	lr
    1d22:	bf00      	nop
    1d24:	e000ed00 	.word	0xe000ed00

00001d28 <mem_manage_fault>:
{
    1d28:	b570      	push	{r4, r5, r6, lr}
    1d2a:	4605      	mov	r5, r0
    1d2c:	4616      	mov	r6, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1d2e:	4b25      	ldr	r3, [pc, #148]	; (1dc4 <mem_manage_fault+0x9c>)
    1d30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1d32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1d36:	f013 0f02 	tst.w	r3, #2
    1d3a:	d00c      	beq.n	1d56 <mem_manage_fault+0x2e>
		uint32_t temp = SCB->MMFAR;
    1d3c:	4b21      	ldr	r3, [pc, #132]	; (1dc4 <mem_manage_fault+0x9c>)
    1d3e:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1d42:	f013 0f80 	tst.w	r3, #128	; 0x80
    1d46:	d02f      	beq.n	1da8 <mem_manage_fault+0x80>
			if (from_hard_fault != 0) {
    1d48:	b139      	cbz	r1, 1d5a <mem_manage_fault+0x32>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1d4a:	4a1e      	ldr	r2, [pc, #120]	; (1dc4 <mem_manage_fault+0x9c>)
    1d4c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1d4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1d52:	6293      	str	r3, [r2, #40]	; 0x28
    1d54:	e001      	b.n	1d5a <mem_manage_fault+0x32>
	uint32_t mmfar = -EINVAL;
    1d56:	f06f 0015 	mvn.w	r0, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1d5a:	4b1a      	ldr	r3, [pc, #104]	; (1dc4 <mem_manage_fault+0x9c>)
    1d5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1d5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1d62:	f013 0f10 	tst.w	r3, #16
    1d66:	d104      	bne.n	1d72 <mem_manage_fault+0x4a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1d68:	4b16      	ldr	r3, [pc, #88]	; (1dc4 <mem_manage_fault+0x9c>)
    1d6a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1d6c:	f014 0402 	ands.w	r4, r4, #2
    1d70:	d004      	beq.n	1d7c <mem_manage_fault+0x54>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    1d72:	4b14      	ldr	r3, [pc, #80]	; (1dc4 <mem_manage_fault+0x9c>)
    1d74:	685c      	ldr	r4, [r3, #4]
    1d76:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    1d7a:	d118      	bne.n	1dae <mem_manage_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1d7c:	4b11      	ldr	r3, [pc, #68]	; (1dc4 <mem_manage_fault+0x9c>)
    1d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1d80:	f013 0f20 	tst.w	r3, #32
    1d84:	d004      	beq.n	1d90 <mem_manage_fault+0x68>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    1d86:	4a0f      	ldr	r2, [pc, #60]	; (1dc4 <mem_manage_fault+0x9c>)
    1d88:	6a53      	ldr	r3, [r2, #36]	; 0x24
    1d8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    1d8e:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1d90:	4a0c      	ldr	r2, [pc, #48]	; (1dc4 <mem_manage_fault+0x9c>)
    1d92:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1d94:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1d98:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1d9a:	2101      	movs	r1, #1
    1d9c:	4628      	mov	r0, r5
    1d9e:	f004 fba6 	bl	64ee <memory_fault_recoverable>
    1da2:	7030      	strb	r0, [r6, #0]
}
    1da4:	4620      	mov	r0, r4
    1da6:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    1da8:	f06f 0015 	mvn.w	r0, #21
    1dac:	e7d5      	b.n	1d5a <mem_manage_fault+0x32>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    1dae:	4629      	mov	r1, r5
    1db0:	f7ff ff12 	bl	1bd8 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    1db4:	4604      	mov	r4, r0
    1db6:	2800      	cmp	r0, #0
    1db8:	d0e0      	beq.n	1d7c <mem_manage_fault+0x54>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1dba:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    1dbe:	2402      	movs	r4, #2
    1dc0:	e7dc      	b.n	1d7c <mem_manage_fault+0x54>
    1dc2:	bf00      	nop
    1dc4:	e000ed00 	.word	0xe000ed00

00001dc8 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    1dc8:	b508      	push	{r3, lr}
    1dca:	4684      	mov	ip, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    1dcc:	2300      	movs	r3, #0
    1dce:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1dd0:	4b1b      	ldr	r3, [pc, #108]	; (1e40 <hard_fault+0x78>)
    1dd2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    1dd4:	f010 0002 	ands.w	r0, r0, #2
    1dd8:	d12e      	bne.n	1e38 <hard_fault+0x70>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1ddc:	2b00      	cmp	r3, #0
    1dde:	db2c      	blt.n	1e3a <hard_fault+0x72>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1de0:	4b17      	ldr	r3, [pc, #92]	; (1e40 <hard_fault+0x78>)
    1de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1de4:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
    1de8:	d028      	beq.n	1e3c <hard_fault+0x74>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    1dea:	f8dc 3018 	ldr.w	r3, [ip, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    1dee:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1df2:	f64d 7302 	movw	r3, #57090	; 0xdf02
    1df6:	429a      	cmp	r2, r3
    1df8:	d00f      	beq.n	1e1a <hard_fault+0x52>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
    1dfa:	4b11      	ldr	r3, [pc, #68]	; (1e40 <hard_fault+0x78>)
    1dfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    1e00:	b973      	cbnz	r3, 1e20 <hard_fault+0x58>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
    1e02:	4b0f      	ldr	r3, [pc, #60]	; (1e40 <hard_fault+0x78>)
    1e04:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    1e08:	b983      	cbnz	r3, 1e2c <hard_fault+0x64>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
    1e0a:	4b0d      	ldr	r3, [pc, #52]	; (1e40 <hard_fault+0x78>)
    1e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    1e0e:	b29b      	uxth	r3, r3
    1e10:	b19b      	cbz	r3, 1e3a <hard_fault+0x72>
			reason = usage_fault(esf);
    1e12:	4660      	mov	r0, ip
    1e14:	f7ff ff76 	bl	1d04 <usage_fault>
    1e18:	e00f      	b.n	1e3a <hard_fault+0x72>
			reason = esf->basic.r0;
    1e1a:	f8dc 0000 	ldr.w	r0, [ip]
    1e1e:	e00c      	b.n	1e3a <hard_fault+0x72>
			reason = mem_manage_fault(esf, 1, recoverable);
    1e20:	460a      	mov	r2, r1
    1e22:	2101      	movs	r1, #1
    1e24:	4660      	mov	r0, ip
    1e26:	f7ff ff7f 	bl	1d28 <mem_manage_fault>
    1e2a:	e006      	b.n	1e3a <hard_fault+0x72>
			reason = bus_fault(esf, 1, recoverable);
    1e2c:	460a      	mov	r2, r1
    1e2e:	2101      	movs	r1, #1
    1e30:	4660      	mov	r0, ip
    1e32:	f7ff ff3d 	bl	1cb0 <bus_fault>
    1e36:	e000      	b.n	1e3a <hard_fault+0x72>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1e38:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    1e3a:	bd08      	pop	{r3, pc}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1e3c:	4618      	mov	r0, r3
	return reason;
    1e3e:	e7fc      	b.n	1e3a <hard_fault+0x72>
    1e40:	e000ed00 	.word	0xe000ed00

00001e44 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1e44:	b570      	push	{r4, r5, r6, lr}
    1e46:	b08a      	sub	sp, #40	; 0x28
    1e48:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1e4a:	4b22      	ldr	r3, [pc, #136]	; (1ed4 <z_arm_fault+0x90>)
    1e4c:	6859      	ldr	r1, [r3, #4]
    1e4e:	f3c1 0108 	ubfx	r1, r1, #0, #9
    1e52:	2300      	movs	r3, #0
    1e54:	f383 8811 	msr	BASEPRI, r3
    1e58:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1e5c:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    1e60:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1e64:	d115      	bne.n	1e92 <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1e66:	f002 030c 	and.w	r3, r2, #12
    1e6a:	2b08      	cmp	r3, #8
    1e6c:	d014      	beq.n	1e98 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1e6e:	f012 0f08 	tst.w	r2, #8
    1e72:	d00b      	beq.n	1e8c <z_arm_fault+0x48>
	*nested_exc = false;
    1e74:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    1e76:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    1e7a:	4620      	mov	r0, r4
    1e7c:	f004 fb3c 	bl	64f8 <fault_handle>
    1e80:	4605      	mov	r5, r0
	if (recoverable) {
    1e82:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    1e86:	b153      	cbz	r3, 1e9e <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    1e88:	b00a      	add	sp, #40	; 0x28
    1e8a:	bd70      	pop	{r4, r5, r6, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    1e8c:	4604      	mov	r4, r0
			*nested_exc = true;
    1e8e:	2601      	movs	r6, #1
    1e90:	e7f1      	b.n	1e76 <z_arm_fault+0x32>
	*nested_exc = false;
    1e92:	2600      	movs	r6, #0
		return NULL;
    1e94:	4634      	mov	r4, r6
    1e96:	e7ee      	b.n	1e76 <z_arm_fault+0x32>
	*nested_exc = false;
    1e98:	2600      	movs	r6, #0
		return NULL;
    1e9a:	4634      	mov	r4, r6
    1e9c:	e7eb      	b.n	1e76 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1e9e:	2220      	movs	r2, #32
    1ea0:	4621      	mov	r1, r4
    1ea2:	a801      	add	r0, sp, #4
    1ea4:	f004 fbf8 	bl	6698 <memcpy>
	if (nested_exc) {
    1ea8:	b14e      	cbz	r6, 1ebe <z_arm_fault+0x7a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1eaa:	9b08      	ldr	r3, [sp, #32]
    1eac:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1eb0:	b95a      	cbnz	r2, 1eca <z_arm_fault+0x86>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1eb2:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1eb6:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    1eba:	9308      	str	r3, [sp, #32]
    1ebc:	e005      	b.n	1eca <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1ebe:	9b08      	ldr	r3, [sp, #32]
    1ec0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1ec4:	f023 0301 	bic.w	r3, r3, #1
    1ec8:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    1eca:	a901      	add	r1, sp, #4
    1ecc:	4628      	mov	r0, r5
    1ece:	f004 faf8 	bl	64c2 <z_arm_fatal_error>
    1ed2:	e7d9      	b.n	1e88 <z_arm_fault+0x44>
    1ed4:	e000ed00 	.word	0xe000ed00

00001ed8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1ed8:	4a02      	ldr	r2, [pc, #8]	; (1ee4 <z_arm_fault_init+0xc>)
    1eda:	6953      	ldr	r3, [r2, #20]
    1edc:	f043 0310 	orr.w	r3, r3, #16
    1ee0:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    1ee2:	4770      	bx	lr
    1ee4:	e000ed00 	.word	0xe000ed00

00001ee8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1ee8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1eec:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1ef0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1ef2:	4672      	mov	r2, lr
	bl z_arm_fault
    1ef4:	f7ff ffa6 	bl	1e44 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1ef8:	bd01      	pop	{r0, pc}
    1efa:	bf00      	nop

00001efc <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1efc:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1efe:	e006      	b.n	1f0e <z_arm_interrupt_init+0x12>
    1f00:	f002 010f 	and.w	r1, r2, #15
    1f04:	4b09      	ldr	r3, [pc, #36]	; (1f2c <z_arm_interrupt_init+0x30>)
    1f06:	440b      	add	r3, r1
    1f08:	2120      	movs	r1, #32
    1f0a:	7619      	strb	r1, [r3, #24]
    1f0c:	3201      	adds	r2, #1
    1f0e:	2a2f      	cmp	r2, #47	; 0x2f
    1f10:	dc0a      	bgt.n	1f28 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    1f12:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    1f14:	2b00      	cmp	r3, #0
    1f16:	dbf3      	blt.n	1f00 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1f18:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1f1c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    1f20:	2120      	movs	r1, #32
    1f22:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    1f26:	e7f1      	b.n	1f0c <z_arm_interrupt_init+0x10>
	}
}
    1f28:	4770      	bx	lr
    1f2a:	bf00      	nop
    1f2c:	e000ecfc 	.word	0xe000ecfc

00001f30 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1f30:	2000      	movs	r0, #0
    msr CONTROL, r0
    1f32:	f380 8814 	msr	CONTROL, r0
    isb
    1f36:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1f3a:	f005 fe27 	bl	7b8c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1f3e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1f40:	490d      	ldr	r1, [pc, #52]	; (1f78 <__start+0x48>)
    str r0, [r1]
    1f42:	6008      	str	r0, [r1, #0]
    dsb
    1f44:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1f48:	480c      	ldr	r0, [pc, #48]	; (1f7c <__start+0x4c>)
    msr msp, r0
    1f4a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1f4e:	f000 f82d 	bl	1fac <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1f52:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1f54:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1f58:	4809      	ldr	r0, [pc, #36]	; (1f80 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1f5a:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    1f5e:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1f60:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1f64:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1f68:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1f6a:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1f6c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1f70:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1f74:	f7ff fd9a 	bl	1aac <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    1f78:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1f7c:	20002f40 	.word	0x20002f40
    ldr r0, =z_interrupt_stacks
    1f80:	200030c0 	.word	0x200030c0

00001f84 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1f84:	4b08      	ldr	r3, [pc, #32]	; (1fa8 <z_arm_clear_arm_mpu_config+0x24>)
    1f86:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    1f8a:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    1f8e:	2300      	movs	r3, #0
    1f90:	e006      	b.n	1fa0 <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    1f92:	4a05      	ldr	r2, [pc, #20]	; (1fa8 <z_arm_clear_arm_mpu_config+0x24>)
    1f94:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    1f98:	2100      	movs	r1, #0
    1f9a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    1f9e:	3301      	adds	r3, #1
    1fa0:	4283      	cmp	r3, r0
    1fa2:	dbf6      	blt.n	1f92 <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    1fa4:	4770      	bx	lr
    1fa6:	bf00      	nop
    1fa8:	e000ed00 	.word	0xe000ed00

00001fac <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1fac:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1fae:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1fb0:	2400      	movs	r4, #0
    1fb2:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1fb6:	f7ff ffe5 	bl	1f84 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1fba:	4623      	mov	r3, r4
    1fbc:	e008      	b.n	1fd0 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    1fbe:	f103 0120 	add.w	r1, r3, #32
    1fc2:	4a0e      	ldr	r2, [pc, #56]	; (1ffc <z_arm_init_arch_hw_at_boot+0x50>)
    1fc4:	f04f 30ff 	mov.w	r0, #4294967295
    1fc8:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1fcc:	3301      	adds	r3, #1
    1fce:	b2db      	uxtb	r3, r3
    1fd0:	2b07      	cmp	r3, #7
    1fd2:	d9f4      	bls.n	1fbe <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1fd4:	2300      	movs	r3, #0
    1fd6:	e008      	b.n	1fea <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1fd8:	f103 0160 	add.w	r1, r3, #96	; 0x60
    1fdc:	4a07      	ldr	r2, [pc, #28]	; (1ffc <z_arm_init_arch_hw_at_boot+0x50>)
    1fde:	f04f 30ff 	mov.w	r0, #4294967295
    1fe2:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1fe6:	3301      	adds	r3, #1
    1fe8:	b2db      	uxtb	r3, r3
    1fea:	2b07      	cmp	r3, #7
    1fec:	d9f4      	bls.n	1fd8 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    1fee:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1ff0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ff4:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1ff8:	bd10      	pop	{r4, pc}
    1ffa:	bf00      	nop
    1ffc:	e000e100 	.word	0xe000e100

00002000 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    2000:	b508      	push	{r3, lr}
	if (_current == thread) {
    2002:	4b0a      	ldr	r3, [pc, #40]	; (202c <z_impl_k_thread_abort+0x2c>)
    2004:	689b      	ldr	r3, [r3, #8]
    2006:	4283      	cmp	r3, r0
    2008:	d002      	beq.n	2010 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    200a:	f003 fa73 	bl	54f4 <z_thread_abort>
}
    200e:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2010:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    2014:	2b00      	cmp	r3, #0
    2016:	d0f8      	beq.n	200a <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2018:	4b05      	ldr	r3, [pc, #20]	; (2030 <z_impl_k_thread_abort+0x30>)
    201a:	685a      	ldr	r2, [r3, #4]
    201c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    2020:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    2022:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2024:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    2028:	625a      	str	r2, [r3, #36]	; 0x24
    202a:	e7ee      	b.n	200a <z_impl_k_thread_abort+0xa>
    202c:	20001d20 	.word	0x20001d20
    2030:	e000ed00 	.word	0xe000ed00

00002034 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    2034:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2036:	4b03      	ldr	r3, [pc, #12]	; (2044 <z_arm_configure_static_mpu_regions+0x10>)
    2038:	4a03      	ldr	r2, [pc, #12]	; (2048 <z_arm_configure_static_mpu_regions+0x14>)
    203a:	2101      	movs	r1, #1
    203c:	4803      	ldr	r0, [pc, #12]	; (204c <z_arm_configure_static_mpu_regions+0x18>)
    203e:	f004 fae1 	bl	6604 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    2042:	bd08      	pop	{r3, pc}
    2044:	20040000 	.word	0x20040000
    2048:	20000000 	.word	0x20000000
    204c:	000081c8 	.word	0x000081c8

00002050 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    2050:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    2052:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    2056:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    2058:	4804      	ldr	r0, [pc, #16]	; (206c <z_arm_configure_dynamic_mpu_regions+0x1c>)
    205a:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    205c:	2320      	movs	r3, #32
    205e:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    2060:	4b03      	ldr	r3, [pc, #12]	; (2070 <z_arm_configure_dynamic_mpu_regions+0x20>)
    2062:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    2064:	2101      	movs	r1, #1
    2066:	f004 fad1 	bl	660c <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    206a:	bd08      	pop	{r3, pc}
    206c:	20000ba0 	.word	0x20000ba0
    2070:	150b0000 	.word	0x150b0000

00002074 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    2074:	4a08      	ldr	r2, [pc, #32]	; (2098 <region_init+0x24>)
    2076:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    207a:	680b      	ldr	r3, [r1, #0]
    207c:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    2080:	4303      	orrs	r3, r0
    2082:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2086:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    208a:	688b      	ldr	r3, [r1, #8]
    208c:	f043 0301 	orr.w	r3, r3, #1
    2090:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    2094:	4770      	bx	lr
    2096:	bf00      	nop
    2098:	e000ed00 	.word	0xe000ed00

0000209c <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    209c:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    209e:	4c03      	ldr	r4, [pc, #12]	; (20ac <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    20a0:	2301      	movs	r3, #1
    20a2:	7822      	ldrb	r2, [r4, #0]
    20a4:	f004 fa86 	bl	65b4 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    20a8:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    20aa:	bd10      	pop	{r4, pc}
    20ac:	20001f34 	.word	0x20001f34

000020b0 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    20b0:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    20b2:	2300      	movs	r3, #0
    20b4:	4a09      	ldr	r2, [pc, #36]	; (20dc <mpu_configure_dynamic_mpu_regions+0x2c>)
    20b6:	7812      	ldrb	r2, [r2, #0]
    20b8:	f004 fa7c 	bl	65b4 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    20bc:	f110 0f16 	cmn.w	r0, #22
    20c0:	d00a      	beq.n	20d8 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    20c2:	4603      	mov	r3, r0
    20c4:	e006      	b.n	20d4 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    20c6:	4a06      	ldr	r2, [pc, #24]	; (20e0 <mpu_configure_dynamic_mpu_regions+0x30>)
    20c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    20cc:	2100      	movs	r1, #0
    20ce:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    20d2:	3301      	adds	r3, #1
    20d4:	2b07      	cmp	r3, #7
    20d6:	ddf6      	ble.n	20c6 <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    20d8:	bd08      	pop	{r3, pc}
    20da:	bf00      	nop
    20dc:	20001f34 	.word	0x20001f34
    20e0:	e000ed00 	.word	0xe000ed00

000020e4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    20e4:	4b04      	ldr	r3, [pc, #16]	; (20f8 <arm_core_mpu_enable+0x14>)
    20e6:	2205      	movs	r2, #5
    20e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    20ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    20f0:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    20f4:	4770      	bx	lr
    20f6:	bf00      	nop
    20f8:	e000ed00 	.word	0xe000ed00

000020fc <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    20fc:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2100:	4b02      	ldr	r3, [pc, #8]	; (210c <arm_core_mpu_disable+0x10>)
    2102:	2200      	movs	r2, #0
    2104:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    2108:	4770      	bx	lr
    210a:	bf00      	nop
    210c:	e000ed00 	.word	0xe000ed00

00002110 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    2110:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2112:	4b0e      	ldr	r3, [pc, #56]	; (214c <z_arm_mpu_init+0x3c>)
    2114:	681d      	ldr	r5, [r3, #0]
    2116:	2d08      	cmp	r5, #8
    2118:	d815      	bhi.n	2146 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    211a:	f7ff ffef 	bl	20fc <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    211e:	2400      	movs	r4, #0
    2120:	e009      	b.n	2136 <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    2122:	4b0a      	ldr	r3, [pc, #40]	; (214c <z_arm_mpu_init+0x3c>)
    2124:	6859      	ldr	r1, [r3, #4]
    2126:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    212a:	0093      	lsls	r3, r2, #2
    212c:	4419      	add	r1, r3
    212e:	4620      	mov	r0, r4
    2130:	f7ff ffa0 	bl	2074 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2134:	3401      	adds	r4, #1
    2136:	42a5      	cmp	r5, r4
    2138:	d8f3      	bhi.n	2122 <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    213a:	4b05      	ldr	r3, [pc, #20]	; (2150 <z_arm_mpu_init+0x40>)
    213c:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    213e:	f7ff ffd1 	bl	20e4 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    2142:	2000      	movs	r0, #0
}
    2144:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    2146:	f04f 30ff 	mov.w	r0, #4294967295
    214a:	e7fb      	b.n	2144 <z_arm_mpu_init+0x34>
    214c:	000081e4 	.word	0x000081e4
    2150:	20001f34 	.word	0x20001f34

00002154 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2154:	4b01      	ldr	r3, [pc, #4]	; (215c <__stdout_hook_install+0x8>)
    2156:	6018      	str	r0, [r3, #0]
}
    2158:	4770      	bx	lr
    215a:	bf00      	nop
    215c:	200002bc 	.word	0x200002bc

00002160 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    2160:	b510      	push	{r4, lr}
	__asm__ volatile(
    2162:	f04f 0320 	mov.w	r3, #32
    2166:	f3ef 8411 	mrs	r4, BASEPRI
    216a:	f383 8812 	msr	BASEPRI_MAX, r3
    216e:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    2172:	2301      	movs	r3, #1
    2174:	4a0c      	ldr	r2, [pc, #48]	; (21a8 <nordicsemi_nrf52_init+0x48>)
    2176:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    217a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    217e:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    2182:	f004 fad9 	bl	6738 <nrf52_errata_197>
    2186:	b120      	cbz	r0, 2192 <nordicsemi_nrf52_init+0x32>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    2188:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    218c:	2201      	movs	r2, #1
    218e:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    2192:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2196:	2201      	movs	r2, #1
    2198:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    219c:	f384 8811 	msr	BASEPRI, r4
    21a0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    21a4:	2000      	movs	r0, #0
    21a6:	bd10      	pop	{r4, pc}
    21a8:	4001e000 	.word	0x4001e000

000021ac <sys_arch_reboot>:
    *p_gpregret = val;
    21ac:	b2c0      	uxtb	r0, r0
    21ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    21b2:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    21b6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    21ba:	4905      	ldr	r1, [pc, #20]	; (21d0 <sys_arch_reboot+0x24>)
    21bc:	68ca      	ldr	r2, [r1, #12]
    21be:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    21c2:	4b04      	ldr	r3, [pc, #16]	; (21d4 <sys_arch_reboot+0x28>)
    21c4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    21c6:	60cb      	str	r3, [r1, #12]
    21c8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    21cc:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    21ce:	e7fd      	b.n	21cc <sys_arch_reboot+0x20>
    21d0:	e000ed00 	.word	0xe000ed00
    21d4:	05fa0004 	.word	0x05fa0004

000021d8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    21d8:	b130      	cbz	r0, 21e8 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    21da:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    21dc:	0180      	lsls	r0, r0, #6
    21de:	4b03      	ldr	r3, [pc, #12]	; (21ec <arch_busy_wait+0x14>)
    21e0:	f043 0301 	orr.w	r3, r3, #1
    21e4:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    21e6:	bd08      	pop	{r3, pc}
    21e8:	4770      	bx	lr
    21ea:	bf00      	nop
    21ec:	00007e90 	.word	0x00007e90

000021f0 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    21f0:	4800      	ldr	r0, [pc, #0]	; (21f4 <get_hf_flags+0x4>)
    21f2:	4770      	bx	lr
    21f4:	20000bfc 	.word	0x20000bfc

000021f8 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    21f8:	4b03      	ldr	r3, [pc, #12]	; (2208 <get_subsys+0x10>)
    21fa:	1ac0      	subs	r0, r0, r3
    21fc:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    21fe:	4b03      	ldr	r3, [pc, #12]	; (220c <get_subsys+0x14>)
    2200:	fb03 f000 	mul.w	r0, r3, r0
    2204:	4770      	bx	lr
    2206:	bf00      	nop
    2208:	20000bbc 	.word	0x20000bbc
    220c:	b6db6db7 	.word	0xb6db6db7

00002210 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2210:	b538      	push	{r3, r4, r5, lr}
    2212:	4605      	mov	r5, r0
    2214:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2216:	f7ff ffef 	bl	21f8 <get_subsys>
    221a:	4601      	mov	r1, r0
    221c:	2240      	movs	r2, #64	; 0x40
    221e:	4803      	ldr	r0, [pc, #12]	; (222c <onoff_stop+0x1c>)
    2220:	f004 fb21 	bl	6866 <stop>
    2224:	4601      	mov	r1, r0
	notify(mgr, res);
    2226:	4628      	mov	r0, r5
    2228:	47a0      	blx	r4
}
    222a:	bd38      	pop	{r3, r4, r5, pc}
    222c:	00007c00 	.word	0x00007c00

00002230 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2230:	b530      	push	{r4, r5, lr}
    2232:	b083      	sub	sp, #12
    2234:	4605      	mov	r5, r0
    2236:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2238:	f7ff ffde 	bl	21f8 <get_subsys>
    223c:	4601      	mov	r1, r0
    223e:	2340      	movs	r3, #64	; 0x40
    2240:	9300      	str	r3, [sp, #0]
    2242:	4623      	mov	r3, r4
    2244:	4a05      	ldr	r2, [pc, #20]	; (225c <onoff_start+0x2c>)
    2246:	4806      	ldr	r0, [pc, #24]	; (2260 <onoff_start+0x30>)
    2248:	f004 fb27 	bl	689a <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    224c:	1e01      	subs	r1, r0, #0
    224e:	db01      	blt.n	2254 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    2250:	b003      	add	sp, #12
    2252:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    2254:	4628      	mov	r0, r5
    2256:	47a0      	blx	r4
}
    2258:	e7fa      	b.n	2250 <onoff_start+0x20>
    225a:	bf00      	nop
    225c:	000068e3 	.word	0x000068e3
    2260:	00007c00 	.word	0x00007c00

00002264 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    2264:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    2266:	b110      	cbz	r0, 226e <clock_event_handler+0xa>
    2268:	2801      	cmp	r0, #1
    226a:	d00d      	beq.n	2288 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    226c:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    226e:	2100      	movs	r1, #0
    2270:	4808      	ldr	r0, [pc, #32]	; (2294 <clock_event_handler+0x30>)
    2272:	f004 fa83 	bl	677c <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    2276:	6883      	ldr	r3, [r0, #8]
    2278:	f013 0f07 	tst.w	r3, #7
    227c:	d1f6      	bne.n	226c <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    227e:	2100      	movs	r1, #0
    2280:	4804      	ldr	r0, [pc, #16]	; (2294 <clock_event_handler+0x30>)
    2282:	f004 fade 	bl	6842 <clkstarted_handle>
    2286:	e7f1      	b.n	226c <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2288:	2101      	movs	r1, #1
    228a:	4802      	ldr	r0, [pc, #8]	; (2294 <clock_event_handler+0x30>)
    228c:	f004 fad9 	bl	6842 <clkstarted_handle>
}
    2290:	e7ec      	b.n	226c <clock_event_handler+0x8>
    2292:	bf00      	nop
    2294:	00007c00 	.word	0x00007c00

00002298 <generic_hfclk_start>:
{
    2298:	b510      	push	{r4, lr}
	__asm__ volatile(
    229a:	f04f 0320 	mov.w	r3, #32
    229e:	f3ef 8411 	mrs	r4, BASEPRI
    22a2:	f383 8812 	msr	BASEPRI_MAX, r3
    22a6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    22aa:	4a13      	ldr	r2, [pc, #76]	; (22f8 <generic_hfclk_start+0x60>)
    22ac:	6813      	ldr	r3, [r2, #0]
    22ae:	f043 0302 	orr.w	r3, r3, #2
    22b2:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    22b4:	f013 0f01 	tst.w	r3, #1
    22b8:	d108      	bne.n	22cc <generic_hfclk_start+0x34>
	bool already_started = false;
    22ba:	2300      	movs	r3, #0
	__asm__ volatile(
    22bc:	f384 8811 	msr	BASEPRI, r4
    22c0:	f3bf 8f6f 	isb	sy
	if (already_started) {
    22c4:	b99b      	cbnz	r3, 22ee <generic_hfclk_start+0x56>
	hfclk_start();
    22c6:	f004 fb14 	bl	68f2 <hfclk_start>
}
    22ca:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    22cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    22d0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    22d4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    22d8:	f012 0f01 	tst.w	r2, #1
    22dc:	d101      	bne.n	22e2 <generic_hfclk_start+0x4a>
	bool already_started = false;
    22de:	2300      	movs	r3, #0
    22e0:	e7ec      	b.n	22bc <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    22e2:	f7ff ff85 	bl	21f0 <get_hf_flags>
    22e6:	f004 fa99 	bl	681c <set_on_state>
			already_started = true;
    22ea:	2301      	movs	r3, #1
    22ec:	e7e6      	b.n	22bc <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    22ee:	2100      	movs	r1, #0
    22f0:	4802      	ldr	r0, [pc, #8]	; (22fc <generic_hfclk_start+0x64>)
    22f2:	f004 faa6 	bl	6842 <clkstarted_handle>
		return;
    22f6:	e7e8      	b.n	22ca <generic_hfclk_start+0x32>
    22f8:	20000c0c 	.word	0x20000c0c
    22fc:	00007c00 	.word	0x00007c00

00002300 <generic_hfclk_stop>:
{
    2300:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2302:	4b0a      	ldr	r3, [pc, #40]	; (232c <generic_hfclk_stop+0x2c>)
    2304:	f3bf 8f5b 	dmb	ish
    2308:	e853 2f00 	ldrex	r2, [r3]
    230c:	f022 0102 	bic.w	r1, r2, #2
    2310:	e843 1000 	strex	r0, r1, [r3]
    2314:	2800      	cmp	r0, #0
    2316:	d1f7      	bne.n	2308 <generic_hfclk_stop+0x8>
    2318:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    231c:	f012 0f01 	tst.w	r2, #1
    2320:	d000      	beq.n	2324 <generic_hfclk_stop+0x24>
}
    2322:	bd08      	pop	{r3, pc}
	hfclk_stop();
    2324:	f004 faef 	bl	6906 <hfclk_stop>
    2328:	e7fb      	b.n	2322 <generic_hfclk_stop+0x22>
    232a:	bf00      	nop
    232c:	20000c0c 	.word	0x20000c0c

00002330 <api_blocking_start>:
{
    2330:	b500      	push	{lr}
    2332:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2334:	f8cd d000 	str.w	sp, [sp]
    2338:	f8cd d004 	str.w	sp, [sp, #4]
    233c:	2300      	movs	r3, #0
    233e:	9302      	str	r3, [sp, #8]
    2340:	2301      	movs	r3, #1
    2342:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2344:	466b      	mov	r3, sp
    2346:	4a07      	ldr	r2, [pc, #28]	; (2364 <api_blocking_start+0x34>)
    2348:	f004 fac3 	bl	68d2 <api_start>
	if (err < 0) {
    234c:	2800      	cmp	r0, #0
    234e:	db05      	blt.n	235c <api_blocking_start+0x2c>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    2350:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2354:	2300      	movs	r3, #0
    2356:	4668      	mov	r0, sp
    2358:	f002 fcc4 	bl	4ce4 <z_impl_k_sem_take>
}
    235c:	b005      	add	sp, #20
    235e:	f85d fb04 	ldr.w	pc, [sp], #4
    2362:	bf00      	nop
    2364:	0000691b 	.word	0x0000691b

00002368 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    2368:	b570      	push	{r4, r5, r6, lr}
    236a:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    236c:	2200      	movs	r2, #0
    236e:	2101      	movs	r1, #1
    2370:	4610      	mov	r0, r2
    2372:	f7ff fb81 	bl	1a78 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2376:	4811      	ldr	r0, [pc, #68]	; (23bc <clk_init+0x54>)
    2378:	f001 f930 	bl	35dc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    237c:	4b10      	ldr	r3, [pc, #64]	; (23c0 <clk_init+0x58>)
    237e:	4298      	cmp	r0, r3
    2380:	d119      	bne.n	23b6 <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2382:	f005 f880 	bl	7486 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    2386:	2400      	movs	r4, #0
    2388:	2c01      	cmp	r4, #1
    238a:	d812      	bhi.n	23b2 <clk_init+0x4a>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    238c:	4621      	mov	r1, r4
    238e:	4630      	mov	r0, r6
    2390:	f004 f9f4 	bl	677c <get_sub_data>
    2394:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    2396:	4621      	mov	r1, r4
    2398:	4630      	mov	r0, r6
    239a:	f004 f9fa 	bl	6792 <get_onoff_manager>
    239e:	4909      	ldr	r1, [pc, #36]	; (23c4 <clk_init+0x5c>)
    23a0:	f003 ff71 	bl	6286 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    23a4:	2800      	cmp	r0, #0
    23a6:	db05      	blt.n	23b4 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    23a8:	2301      	movs	r3, #1
    23aa:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    23ac:	441c      	add	r4, r3
    23ae:	b2e4      	uxtb	r4, r4
    23b0:	e7ea      	b.n	2388 <clk_init+0x20>
	}

	return 0;
    23b2:	2000      	movs	r0, #0
}
    23b4:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    23b6:	f06f 0004 	mvn.w	r0, #4
    23ba:	e7fb      	b.n	23b4 <clk_init+0x4c>
    23bc:	00002265 	.word	0x00002265
    23c0:	0bad0000 	.word	0x0bad0000
    23c4:	00008234 	.word	0x00008234

000023c8 <lfclk_spinwait>:
{
    23c8:	b570      	push	{r4, r5, r6, lr}
    23ca:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    23cc:	2801      	cmp	r0, #1
    23ce:	d107      	bne.n	23e0 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    23d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    23d4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    23d8:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    23dc:	2b01      	cmp	r3, #1
    23de:	d05a      	beq.n	2496 <lfclk_spinwait+0xce>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    23e0:	f005 fa19 	bl	7816 <k_is_in_isr>
    23e4:	b928      	cbnz	r0, 23f2 <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    23e6:	4b2f      	ldr	r3, [pc, #188]	; (24a4 <lfclk_spinwait+0xdc>)
    23e8:	781b      	ldrb	r3, [r3, #0]
    23ea:	2b00      	cmp	r3, #0
    23ec:	d043      	beq.n	2476 <lfclk_spinwait+0xae>
    23ee:	2300      	movs	r3, #0
    23f0:	e000      	b.n	23f4 <lfclk_spinwait+0x2c>
    23f2:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    23f4:	461c      	mov	r4, r3
    23f6:	2b00      	cmp	r3, #0
    23f8:	d03f      	beq.n	247a <lfclk_spinwait+0xb2>
	__asm__ volatile(
    23fa:	f04f 0320 	mov.w	r3, #32
    23fe:	f3ef 8611 	mrs	r6, BASEPRI
    2402:	f383 8812 	msr	BASEPRI_MAX, r3
    2406:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    240a:	b924      	cbnz	r4, 2416 <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    240c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2410:	2202      	movs	r2, #2
    2412:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2416:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    241a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    241e:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2422:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    2426:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    242a:	d12d      	bne.n	2488 <lfclk_spinwait+0xc0>
    return false;
    242c:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    242e:	b11a      	cbz	r2, 2438 <lfclk_spinwait+0x70>
    2430:	2b01      	cmp	r3, #1
    2432:	d02b      	beq.n	248c <lfclk_spinwait+0xc4>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2434:	2d01      	cmp	r5, #1
    2436:	d029      	beq.n	248c <lfclk_spinwait+0xc4>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    2438:	b30c      	cbz	r4, 247e <lfclk_spinwait+0xb6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    243a:	4630      	mov	r0, r6
    243c:	f7ff fae2 	bl	1a04 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2440:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2444:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2448:	2b00      	cmp	r3, #0
    244a:	d1e4      	bne.n	2416 <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    244c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2450:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    2454:	2b00      	cmp	r3, #0
    2456:	d0de      	beq.n	2416 <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2458:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    245c:	2200      	movs	r2, #0
    245e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2462:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    2466:	2201      	movs	r2, #1
    2468:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    246c:	490e      	ldr	r1, [pc, #56]	; (24a8 <lfclk_spinwait+0xe0>)
    246e:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2472:	609a      	str	r2, [r3, #8]
}
    2474:	e7cf      	b.n	2416 <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2476:	2301      	movs	r3, #1
    2478:	e7bc      	b.n	23f4 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    247a:	2600      	movs	r6, #0
    247c:	e7c5      	b.n	240a <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    247e:	2021      	movs	r0, #33	; 0x21
    2480:	2100      	movs	r1, #0
    2482:	f003 f805 	bl	5490 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2486:	e7db      	b.n	2440 <lfclk_spinwait+0x78>
                return true;
    2488:	2201      	movs	r2, #1
    248a:	e7d0      	b.n	242e <lfclk_spinwait+0x66>
	if (isr_mode) {
    248c:	b124      	cbz	r4, 2498 <lfclk_spinwait+0xd0>
	__asm__ volatile(
    248e:	f386 8811 	msr	BASEPRI, r6
    2492:	f3bf 8f6f 	isb	sy
}
    2496:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    2498:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    249c:	2202      	movs	r2, #2
    249e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    24a2:	e7f8      	b.n	2496 <lfclk_spinwait+0xce>
    24a4:	20001f36 	.word	0x20001f36
    24a8:	e000e100 	.word	0xe000e100

000024ac <z_nrf_clock_control_lf_on>:
{
    24ac:	b510      	push	{r4, lr}
    24ae:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    24b0:	4b10      	ldr	r3, [pc, #64]	; (24f4 <z_nrf_clock_control_lf_on+0x48>)
    24b2:	2101      	movs	r1, #1
    24b4:	f3bf 8f5b 	dmb	ish
    24b8:	e853 2f00 	ldrex	r2, [r3]
    24bc:	e843 1000 	strex	r0, r1, [r3]
    24c0:	2800      	cmp	r0, #0
    24c2:	d1f9      	bne.n	24b8 <z_nrf_clock_control_lf_on+0xc>
    24c4:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    24c8:	b11a      	cbz	r2, 24d2 <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
    24ca:	1e63      	subs	r3, r4, #1
    24cc:	2b01      	cmp	r3, #1
    24ce:	d90d      	bls.n	24ec <z_nrf_clock_control_lf_on+0x40>
}
    24d0:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    24d2:	4809      	ldr	r0, [pc, #36]	; (24f8 <z_nrf_clock_control_lf_on+0x4c>)
    24d4:	f004 f95d 	bl	6792 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    24d8:	4908      	ldr	r1, [pc, #32]	; (24fc <z_nrf_clock_control_lf_on+0x50>)
    24da:	2300      	movs	r3, #0
    24dc:	604b      	str	r3, [r1, #4]
    24de:	608b      	str	r3, [r1, #8]
    24e0:	60cb      	str	r3, [r1, #12]
    24e2:	2301      	movs	r3, #1
    24e4:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    24e6:	f003 feeb 	bl	62c0 <onoff_request>
    24ea:	e7ee      	b.n	24ca <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
    24ec:	4620      	mov	r0, r4
    24ee:	f7ff ff6b 	bl	23c8 <lfclk_spinwait>
		break;
    24f2:	e7ed      	b.n	24d0 <z_nrf_clock_control_lf_on+0x24>
    24f4:	20000c10 	.word	0x20000c10
    24f8:	00007c00 	.word	0x00007c00
    24fc:	20000bac 	.word	0x20000bac

00002500 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    2500:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    2502:	4c04      	ldr	r4, [pc, #16]	; (2514 <rtt_console_init+0x14>)
    2504:	4620      	mov	r0, r4
    2506:	f7fe facd 	bl	aa4 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    250a:	4620      	mov	r0, r4
    250c:	f7ff fe22 	bl	2154 <__stdout_hook_install>

	return 0;
}
    2510:	2000      	movs	r0, #0
    2512:	bd10      	pop	{r4, pc}
    2514:	00002519 	.word	0x00002519

00002518 <rtt_console_out>:
{
    2518:	b570      	push	{r4, r5, r6, lr}
    251a:	b082      	sub	sp, #8
    251c:	4606      	mov	r6, r0
	char c = (char)character;
    251e:	f88d 0007 	strb.w	r0, [sp, #7]
	int max_cnt = CONFIG_RTT_TX_RETRY_CNT;
    2522:	2402      	movs	r4, #2
		SEGGER_RTT_LOCK();
    2524:	f3ef 8511 	mrs	r5, BASEPRI
    2528:	f04f 0120 	mov.w	r1, #32
    252c:	f381 8811 	msr	BASEPRI, r1
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    2530:	2201      	movs	r2, #1
    2532:	f10d 0107 	add.w	r1, sp, #7
    2536:	2000      	movs	r0, #0
    2538:	f002 f810 	bl	455c <SEGGER_RTT_WriteNoLock>
		SEGGER_RTT_UNLOCK();
    253c:	f385 8811 	msr	BASEPRI, r5
		if (cnt) {
    2540:	b938      	cbnz	r0, 2552 <rtt_console_out+0x3a>
		} else if (host_present) {
    2542:	4b09      	ldr	r3, [pc, #36]	; (2568 <rtt_console_out+0x50>)
    2544:	781b      	ldrb	r3, [r3, #0]
    2546:	b15b      	cbz	r3, 2560 <rtt_console_out+0x48>
			if (max_cnt) {
    2548:	b13c      	cbz	r4, 255a <rtt_console_out+0x42>
				wait();
    254a:	f004 f9eb 	bl	6924 <wait>
				max_cnt--;
    254e:	3c01      	subs	r4, #1
		SEGGER_RTT_LOCK();
    2550:	e7e8      	b.n	2524 <rtt_console_out+0xc>
			host_present = true;
    2552:	4b05      	ldr	r3, [pc, #20]	; (2568 <rtt_console_out+0x50>)
    2554:	2201      	movs	r2, #1
    2556:	701a      	strb	r2, [r3, #0]
    2558:	e002      	b.n	2560 <rtt_console_out+0x48>
				host_present = false;
    255a:	4b03      	ldr	r3, [pc, #12]	; (2568 <rtt_console_out+0x50>)
    255c:	2200      	movs	r2, #0
    255e:	701a      	strb	r2, [r3, #0]
}
    2560:	4630      	mov	r0, r6
    2562:	b002      	add	sp, #8
    2564:	bd70      	pop	{r4, r5, r6, pc}
    2566:	bf00      	nop
    2568:	20001f35 	.word	0x20001f35

0000256c <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    256c:	b128      	cbz	r0, 257a <get_dev+0xe>
    256e:	2801      	cmp	r0, #1
    2570:	d101      	bne.n	2576 <get_dev+0xa>
    2572:	4803      	ldr	r0, [pc, #12]	; (2580 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    2574:	4770      	bx	lr
	const struct device *dev = NULL;
    2576:	2000      	movs	r0, #0
    2578:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    257a:	4802      	ldr	r0, [pc, #8]	; (2584 <get_dev+0x18>)
    257c:	4770      	bx	lr
    257e:	bf00      	nop
    2580:	00007c18 	.word	0x00007c18
    2584:	00007c30 	.word	0x00007c30

00002588 <gpio_nrfx_pin_interrupt_configure>:
{
    2588:	b5f0      	push	{r4, r5, r6, r7, lr}
    258a:	b085      	sub	sp, #20
    258c:	460e      	mov	r6, r1
    258e:	4619      	mov	r1, r3
	return port->config;
    2590:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2592:	7b1b      	ldrb	r3, [r3, #12]
    2594:	f006 051f 	and.w	r5, r6, #31
    2598:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    259c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    25a0:	d022      	beq.n	25e8 <gpio_nrfx_pin_interrupt_configure+0x60>
    25a2:	4607      	mov	r7, r0
    25a4:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    25a6:	2300      	movs	r3, #0
    25a8:	9302      	str	r3, [sp, #8]
    25aa:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
    25ac:	4610      	mov	r0, r2
    25ae:	f004 fa3c 	bl	6a2a <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    25b2:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
    25b6:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    25b8:	6899      	ldr	r1, [r3, #8]
    25ba:	40f1      	lsrs	r1, r6
    25bc:	f011 0f01 	tst.w	r1, #1
    25c0:	d102      	bne.n	25c8 <gpio_nrfx_pin_interrupt_configure+0x40>
    25c2:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
    25c6:	d014      	beq.n	25f2 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    25c8:	2300      	movs	r3, #0
    25ca:	aa02      	add	r2, sp, #8
    25cc:	4619      	mov	r1, r3
    25ce:	4628      	mov	r0, r5
    25d0:	f001 fa74 	bl	3abc <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    25d4:	4b1b      	ldr	r3, [pc, #108]	; (2644 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    25d6:	4298      	cmp	r0, r3
    25d8:	d131      	bne.n	263e <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    25da:	2101      	movs	r1, #1
    25dc:	4628      	mov	r0, r5
    25de:	f001 fc4b 	bl	3e78 <nrfx_gpiote_trigger_enable>
	return 0;
    25e2:	2000      	movs	r0, #0
}
    25e4:	b005      	add	sp, #20
    25e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    25e8:	4628      	mov	r0, r5
    25ea:	f001 fca9 	bl	3f40 <nrfx_gpiote_trigger_disable>
		return 0;
    25ee:	2000      	movs	r0, #0
    25f0:	e7f8      	b.n	25e4 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    25f2:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
    25f6:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    25f8:	2a01      	cmp	r2, #1
    25fa:	d014      	beq.n	2626 <gpio_nrfx_pin_interrupt_configure+0x9e>
        case 0: return NRF_P0;
    25fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2600:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    2604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2608:	f013 0f01 	tst.w	r3, #1
    260c:	d1dc      	bne.n	25c8 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    260e:	f10d 0107 	add.w	r1, sp, #7
    2612:	4628      	mov	r0, r5
    2614:	f001 fbd4 	bl	3dc0 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    2618:	4b0b      	ldr	r3, [pc, #44]	; (2648 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    261a:	4298      	cmp	r0, r3
    261c:	d005      	beq.n	262a <gpio_nrfx_pin_interrupt_configure+0xa2>
		trigger_config.p_in_channel = &ch;
    261e:	f10d 0307 	add.w	r3, sp, #7
    2622:	9303      	str	r3, [sp, #12]
    2624:	e7d0      	b.n	25c8 <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
    2626:	4a09      	ldr	r2, [pc, #36]	; (264c <gpio_nrfx_pin_interrupt_configure+0xc4>)
    2628:	e7ea      	b.n	2600 <gpio_nrfx_pin_interrupt_configure+0x78>
			err = nrfx_gpiote_channel_alloc(&ch);
    262a:	f10d 0007 	add.w	r0, sp, #7
    262e:	f001 fc1b 	bl	3e68 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    2632:	4b04      	ldr	r3, [pc, #16]	; (2644 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    2634:	4298      	cmp	r0, r3
    2636:	d0f2      	beq.n	261e <gpio_nrfx_pin_interrupt_configure+0x96>
				return -ENOMEM;
    2638:	f06f 000b 	mvn.w	r0, #11
    263c:	e7d2      	b.n	25e4 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
    263e:	f06f 0004 	mvn.w	r0, #4
    2642:	e7cf      	b.n	25e4 <gpio_nrfx_pin_interrupt_configure+0x5c>
    2644:	0bad0000 	.word	0x0bad0000
    2648:	0bad0004 	.word	0x0bad0004
    264c:	50000300 	.word	0x50000300

00002650 <pin_uninit>:
{
    2650:	b530      	push	{r4, r5, lr}
    2652:	b083      	sub	sp, #12
    2654:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
    2656:	f10d 0107 	add.w	r1, sp, #7
    265a:	f001 fbb1 	bl	3dc0 <nrfx_gpiote_channel_get>
    265e:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
    2660:	4620      	mov	r0, r4
    2662:	f001 fc9d 	bl	3fa0 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    2666:	4b0b      	ldr	r3, [pc, #44]	; (2694 <pin_uninit+0x44>)
    2668:	4298      	cmp	r0, r3
    266a:	d10f      	bne.n	268c <pin_uninit+0x3c>
	if (free_ch) {
    266c:	429d      	cmp	r5, r3
    266e:	d005      	beq.n	267c <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    2670:	4b08      	ldr	r3, [pc, #32]	; (2694 <pin_uninit+0x44>)
    2672:	4298      	cmp	r0, r3
    2674:	d107      	bne.n	2686 <pin_uninit+0x36>
    2676:	2000      	movs	r0, #0
}
    2678:	b003      	add	sp, #12
    267a:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
    267c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    2680:	f001 fbea 	bl	3e58 <nrfx_gpiote_channel_free>
    2684:	e7f4      	b.n	2670 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    2686:	f06f 0004 	mvn.w	r0, #4
    268a:	e7f5      	b.n	2678 <pin_uninit+0x28>
		return -EIO;
    268c:	f06f 0004 	mvn.w	r0, #4
    2690:	e7f2      	b.n	2678 <pin_uninit+0x28>
    2692:	bf00      	nop
    2694:	0bad0000 	.word	0x0bad0000

00002698 <gpio_nrfx_pin_configure>:
{
    2698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    269c:	b087      	sub	sp, #28
	return port->config;
    269e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    26a2:	f898 300c 	ldrb.w	r3, [r8, #12]
    26a6:	f001 051f 	and.w	r5, r1, #31
    26aa:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    26ae:	2a00      	cmp	r2, #0
    26b0:	d044      	beq.n	273c <gpio_nrfx_pin_configure+0xa4>
    26b2:	460c      	mov	r4, r1
    26b4:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    26b6:	2600      	movs	r6, #0
    26b8:	9603      	str	r6, [sp, #12]
    26ba:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
    26bc:	f10d 0117 	add.w	r1, sp, #23
    26c0:	4620      	mov	r0, r4
    26c2:	f001 fb7d 	bl	3dc0 <nrfx_gpiote_channel_get>
    26c6:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    26c8:	4633      	mov	r3, r6
    26ca:	aa03      	add	r2, sp, #12
    26cc:	4631      	mov	r1, r6
    26ce:	4628      	mov	r0, r5
    26d0:	f001 f9f4 	bl	3abc <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    26d4:	4b30      	ldr	r3, [pc, #192]	; (2798 <gpio_nrfx_pin_configure+0x100>)
    26d6:	4298      	cmp	r0, r3
    26d8:	d15b      	bne.n	2792 <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
    26da:	4599      	cmp	r9, r3
    26dc:	d036      	beq.n	274c <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
    26de:	f417 3f00 	tst.w	r7, #131072	; 0x20000
    26e2:	d043      	beq.n	276c <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
    26e4:	f10d 0103 	add.w	r1, sp, #3
    26e8:	4638      	mov	r0, r7
    26ea:	f004 f925 	bl	6938 <get_drive>
		if (rv != 0) {
    26ee:	4606      	mov	r6, r0
    26f0:	bb40      	cbnz	r0, 2744 <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
    26f2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    26f6:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    26fa:	f417 3f80 	tst.w	r7, #65536	; 0x10000
    26fe:	bf0c      	ite	eq
    2700:	2301      	moveq	r3, #1
    2702:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    2704:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    2708:	4638      	mov	r0, r7
    270a:	f004 f95b 	bl	69c4 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    270e:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2712:	f417 2f00 	tst.w	r7, #524288	; 0x80000
    2716:	d01e      	beq.n	2756 <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2718:	f8d8 3004 	ldr.w	r3, [r8, #4]
    271c:	2101      	movs	r1, #1
    271e:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
    2722:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2726:	2200      	movs	r2, #0
    2728:	a901      	add	r1, sp, #4
    272a:	4628      	mov	r0, r5
    272c:	f001 fa7e 	bl	3c2c <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2730:	4b19      	ldr	r3, [pc, #100]	; (2798 <gpio_nrfx_pin_configure+0x100>)
    2732:	4298      	cmp	r0, r3
    2734:	d006      	beq.n	2744 <gpio_nrfx_pin_configure+0xac>
    2736:	f06f 0615 	mvn.w	r6, #21
    273a:	e003      	b.n	2744 <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
    273c:	4628      	mov	r0, r5
    273e:	f7ff ff87 	bl	2650 <pin_uninit>
    2742:	4606      	mov	r6, r0
}
    2744:	4630      	mov	r0, r6
    2746:	b007      	add	sp, #28
    2748:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
    274c:	f89d 0017 	ldrb.w	r0, [sp, #23]
    2750:	f001 fb82 	bl	3e58 <nrfx_gpiote_channel_free>
    2754:	e7c3      	b.n	26de <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2756:	f417 2f80 	tst.w	r7, #262144	; 0x40000
    275a:	d0e4      	beq.n	2726 <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    275c:	f8d8 2004 	ldr.w	r2, [r8, #4]
    2760:	2301      	movs	r3, #1
    2762:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    2766:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
    276a:	e7dc      	b.n	2726 <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
    276c:	4638      	mov	r0, r7
    276e:	f004 f929 	bl	69c4 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    2772:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2776:	2300      	movs	r3, #0
    2778:	461a      	mov	r2, r3
    277a:	a902      	add	r1, sp, #8
    277c:	4628      	mov	r0, r5
    277e:	f001 f99d 	bl	3abc <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2782:	4b05      	ldr	r3, [pc, #20]	; (2798 <gpio_nrfx_pin_configure+0x100>)
    2784:	4298      	cmp	r0, r3
    2786:	d101      	bne.n	278c <gpio_nrfx_pin_configure+0xf4>
    2788:	2600      	movs	r6, #0
    278a:	e7db      	b.n	2744 <gpio_nrfx_pin_configure+0xac>
    278c:	f06f 0615 	mvn.w	r6, #21
    2790:	e7d8      	b.n	2744 <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
    2792:	f06f 0615 	mvn.w	r6, #21
    2796:	e7d5      	b.n	2744 <gpio_nrfx_pin_configure+0xac>
    2798:	0bad0000 	.word	0x0bad0000

0000279c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    279c:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    279e:	f001 fb51 	bl	3e44 <nrfx_gpiote_is_init>
    27a2:	b108      	cbz	r0, 27a8 <gpio_nrfx_init+0xc>
		return 0;
    27a4:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    27a6:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    27a8:	f001 fb22 	bl	3df0 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    27ac:	4b08      	ldr	r3, [pc, #32]	; (27d0 <gpio_nrfx_init+0x34>)
    27ae:	4298      	cmp	r0, r3
    27b0:	d10a      	bne.n	27c8 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    27b2:	2100      	movs	r1, #0
    27b4:	4807      	ldr	r0, [pc, #28]	; (27d4 <gpio_nrfx_init+0x38>)
    27b6:	f001 fafd 	bl	3db4 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    27ba:	2200      	movs	r2, #0
    27bc:	2105      	movs	r1, #5
    27be:	2006      	movs	r0, #6
    27c0:	f7ff f95a 	bl	1a78 <z_arm_irq_priority_set>
	return 0;
    27c4:	2000      	movs	r0, #0
    27c6:	e7ee      	b.n	27a6 <gpio_nrfx_init+0xa>
		return -EIO;
    27c8:	f06f 0004 	mvn.w	r0, #4
    27cc:	e7eb      	b.n	27a6 <gpio_nrfx_init+0xa>
    27ce:	bf00      	nop
    27d0:	0bad0000 	.word	0x0bad0000
    27d4:	00006ac9 	.word	0x00006ac9

000027d8 <configure>:
	}
}

static int configure(const struct device *dev,
		     const struct spi_config *spi_cfg)
{
    27d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    27da:	b087      	sub	sp, #28
    27dc:	460c      	mov	r4, r1
	struct spi_nrfx_data *dev_data = dev->data;
    27de:	6905      	ldr	r5, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
    27e0:	6846      	ldr	r6, [r0, #4]
	struct spi_context *ctx = &dev_data->ctx;
	nrfx_spi_config_t config;
	nrfx_err_t result;

	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    27e2:	f895 705d 	ldrb.w	r7, [r5, #93]	; 0x5d
    27e6:	b117      	cbz	r7, 27ee <configure+0x16>
	._ctx_name.num_cs_gpios = DT_PROP_LEN_OR(_node_id, cs_gpios, 0),

static inline bool spi_context_configured(struct spi_context *ctx,
					  const struct spi_config *config)
{
	return !!(ctx->config == config);
    27e8:	682b      	ldr	r3, [r5, #0]
    27ea:	428b      	cmp	r3, r1
    27ec:	d079      	beq.n	28e2 <configure+0x10a>
		/* Already configured. No need to do it again. */
		return 0;
	}

	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
    27ee:	88a3      	ldrh	r3, [r4, #4]
    27f0:	f413 6f00 	tst.w	r3, #2048	; 0x800
    27f4:	d177      	bne.n	28e6 <configure+0x10e>
		LOG_ERR("Half-duplex not supported");
		return -ENOTSUP;
	}

	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    27f6:	f013 0f01 	tst.w	r3, #1
    27fa:	d177      	bne.n	28ec <configure+0x114>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
		return -EINVAL;
	}

	if (spi_cfg->operation & SPI_MODE_LOOP) {
    27fc:	f013 0f08 	tst.w	r3, #8
    2800:	d177      	bne.n	28f2 <configure+0x11a>
	    (spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
		LOG_ERR("Only single line mode is supported");
		return -EINVAL;
	}

	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    2802:	f3c3 1345 	ubfx	r3, r3, #5, #6
    2806:	2b08      	cmp	r3, #8
    2808:	d176      	bne.n	28f8 <configure+0x120>
		LOG_ERR("Word sizes other than 8 bits are not supported");
		return -EINVAL;
	}

	if (spi_cfg->frequency < 125000) {
    280a:	6822      	ldr	r2, [r4, #0]
    280c:	4b3f      	ldr	r3, [pc, #252]	; (290c <configure+0x134>)
    280e:	429a      	cmp	r2, r3
    2810:	d975      	bls.n	28fe <configure+0x126>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
		return -EINVAL;
	}

	config = dev_config->def_config;
    2812:	f10d 0c04 	add.w	ip, sp, #4
    2816:	f106 0e08 	add.w	lr, r6, #8
    281a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    281e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    2822:	f8de 3000 	ldr.w	r3, [lr]
    2826:	f8cc 3000 	str.w	r3, [ip]

	config.frequency = get_nrf_spi_frequency(spi_cfg->frequency);
    282a:	6823      	ldr	r3, [r4, #0]
	if (frequency < 250000) {
    282c:	4a38      	ldr	r2, [pc, #224]	; (2910 <configure+0x138>)
    282e:	4293      	cmp	r3, r2
    2830:	d933      	bls.n	289a <configure+0xc2>
	} else if (frequency < 500000) {
    2832:	4a38      	ldr	r2, [pc, #224]	; (2914 <configure+0x13c>)
    2834:	4293      	cmp	r3, r2
    2836:	d933      	bls.n	28a0 <configure+0xc8>
	} else if (frequency < 1000000) {
    2838:	4a37      	ldr	r2, [pc, #220]	; (2918 <configure+0x140>)
    283a:	4293      	cmp	r3, r2
    283c:	d933      	bls.n	28a6 <configure+0xce>
	} else if (frequency < 2000000) {
    283e:	4a37      	ldr	r2, [pc, #220]	; (291c <configure+0x144>)
    2840:	4293      	cmp	r3, r2
    2842:	d933      	bls.n	28ac <configure+0xd4>
	} else if (frequency < 4000000) {
    2844:	4a36      	ldr	r2, [pc, #216]	; (2920 <configure+0x148>)
    2846:	4293      	cmp	r3, r2
    2848:	d933      	bls.n	28b2 <configure+0xda>
	} else if (frequency < 8000000) {
    284a:	4a36      	ldr	r2, [pc, #216]	; (2924 <configure+0x14c>)
    284c:	4293      	cmp	r3, r2
    284e:	d233      	bcs.n	28b8 <configure+0xe0>
		return NRF_SPI_FREQ_4M;
    2850:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	config.frequency = get_nrf_spi_frequency(spi_cfg->frequency);
    2854:	9303      	str	r3, [sp, #12]
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
    2856:	88a3      	ldrh	r3, [r4, #4]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    2858:	f013 0f02 	tst.w	r3, #2
    285c:	d02f      	beq.n	28be <configure+0xe6>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
    285e:	f013 0f04 	tst.w	r3, #4
    2862:	d031      	beq.n	28c8 <configure+0xf0>
			return NRF_SPI_MODE_3;
    2864:	2303      	movs	r3, #3
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
    2866:	f88d 3010 	strb.w	r3, [sp, #16]
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
    286a:	88a3      	ldrh	r3, [r4, #4]
	if (operation & SPI_TRANSFER_LSB) {
    286c:	f013 0f10 	tst.w	r3, #16
    2870:	d02e      	beq.n	28d0 <configure+0xf8>
		return NRF_SPI_BIT_ORDER_LSB_FIRST;
    2872:	2301      	movs	r3, #1
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
    2874:	f88d 3011 	strb.w	r3, [sp, #17]

	if (dev_data->initialized) {
    2878:	bb67      	cbnz	r7, 28d4 <configure+0xfc>
		nrfx_spi_uninit(&dev_config->spi);
		dev_data->initialized = false;
	}

	result = nrfx_spi_init(&dev_config->spi, &config,
    287a:	462b      	mov	r3, r5
    287c:	4a2a      	ldr	r2, [pc, #168]	; (2928 <configure+0x150>)
    287e:	a901      	add	r1, sp, #4
    2880:	4630      	mov	r0, r6
    2882:	f001 fd09 	bl	4298 <nrfx_spi_init>
			       event_handler, dev_data);
	if (result != NRFX_SUCCESS) {
    2886:	4b29      	ldr	r3, [pc, #164]	; (292c <configure+0x154>)
    2888:	4298      	cmp	r0, r3
    288a:	d13b      	bne.n	2904 <configure+0x12c>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
		return -EIO;
	}

	dev_data->initialized = true;
    288c:	2301      	movs	r3, #1
    288e:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d

	ctx->config = spi_cfg;
    2892:	602c      	str	r4, [r5, #0]

	return 0;
    2894:	2000      	movs	r0, #0
}
    2896:	b007      	add	sp, #28
    2898:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NRF_SPI_FREQ_125K;
    289a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    289e:	e7d9      	b.n	2854 <configure+0x7c>
		return NRF_SPI_FREQ_250K;
    28a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    28a4:	e7d6      	b.n	2854 <configure+0x7c>
		return NRF_SPI_FREQ_500K;
    28a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    28aa:	e7d3      	b.n	2854 <configure+0x7c>
		return NRF_SPI_FREQ_1M;
    28ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    28b0:	e7d0      	b.n	2854 <configure+0x7c>
		return NRF_SPI_FREQ_2M;
    28b2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    28b6:	e7cd      	b.n	2854 <configure+0x7c>
		return NRF_SPI_FREQ_8M;
    28b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    28bc:	e7ca      	b.n	2854 <configure+0x7c>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
    28be:	f013 0f04 	tst.w	r3, #4
    28c2:	d003      	beq.n	28cc <configure+0xf4>
			return NRF_SPI_MODE_1;
    28c4:	2301      	movs	r3, #1
    28c6:	e7ce      	b.n	2866 <configure+0x8e>
			return NRF_SPI_MODE_2;
    28c8:	2302      	movs	r3, #2
    28ca:	e7cc      	b.n	2866 <configure+0x8e>
			return NRF_SPI_MODE_0;
    28cc:	2300      	movs	r3, #0
    28ce:	e7ca      	b.n	2866 <configure+0x8e>
		return NRF_SPI_BIT_ORDER_MSB_FIRST;
    28d0:	2300      	movs	r3, #0
    28d2:	e7cf      	b.n	2874 <configure+0x9c>
		nrfx_spi_uninit(&dev_config->spi);
    28d4:	4630      	mov	r0, r6
    28d6:	f001 fd39 	bl	434c <nrfx_spi_uninit>
		dev_data->initialized = false;
    28da:	2300      	movs	r3, #0
    28dc:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
    28e0:	e7cb      	b.n	287a <configure+0xa2>
		return 0;
    28e2:	2000      	movs	r0, #0
    28e4:	e7d7      	b.n	2896 <configure+0xbe>
		return -ENOTSUP;
    28e6:	f06f 0085 	mvn.w	r0, #133	; 0x85
    28ea:	e7d4      	b.n	2896 <configure+0xbe>
		return -EINVAL;
    28ec:	f06f 0015 	mvn.w	r0, #21
    28f0:	e7d1      	b.n	2896 <configure+0xbe>
		return -EINVAL;
    28f2:	f06f 0015 	mvn.w	r0, #21
    28f6:	e7ce      	b.n	2896 <configure+0xbe>
		return -EINVAL;
    28f8:	f06f 0015 	mvn.w	r0, #21
    28fc:	e7cb      	b.n	2896 <configure+0xbe>
		return -EINVAL;
    28fe:	f06f 0015 	mvn.w	r0, #21
    2902:	e7c8      	b.n	2896 <configure+0xbe>
		return -EIO;
    2904:	f06f 0004 	mvn.w	r0, #4
    2908:	e7c5      	b.n	2896 <configure+0xbe>
    290a:	bf00      	nop
    290c:	0001e847 	.word	0x0001e847
    2910:	0003d08f 	.word	0x0003d08f
    2914:	0007a11f 	.word	0x0007a11f
    2918:	000f423f 	.word	0x000f423f
    291c:	001e847f 	.word	0x001e847f
    2920:	003d08ff 	.word	0x003d08ff
    2924:	007a1200 	.word	0x007a1200
    2928:	00006d23 	.word	0x00006d23
    292c:	0bad0000 	.word	0x0bad0000

00002930 <transfer_next_chunk>:

static void transfer_next_chunk(const struct device *dev)
{
    2930:	b530      	push	{r4, r5, lr}
    2932:	b085      	sub	sp, #20
    2934:	4603      	mov	r3, r0
	const struct spi_nrfx_config *dev_config = dev->config;
    2936:	6840      	ldr	r0, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    2938:	691c      	ldr	r4, [r3, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    293a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    293c:	2a00      	cmp	r2, #0
    293e:	d04e      	beq.n	29de <transfer_next_chunk+0xae>
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
    2940:	6d23      	ldr	r3, [r4, #80]	; 0x50
    2942:	2b00      	cmp	r3, #0
    2944:	d04d      	beq.n	29e2 <transfer_next_chunk+0xb2>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    2946:	4293      	cmp	r3, r2
    2948:	bf28      	it	cs
    294a:	4613      	movcs	r3, r2
	struct spi_context *ctx = &dev_data->ctx;
	int error = 0;

	size_t chunk_len = spi_context_max_continuous_chunk(ctx);

	if (chunk_len > 0) {
    294c:	2b00      	cmp	r3, #0
    294e:	d054      	beq.n	29fa <transfer_next_chunk+0xca>
		nrfx_spi_xfer_desc_t xfer;
		nrfx_err_t result;

		dev_data->chunk_len = chunk_len;
    2950:	65a3      	str	r3, [r4, #88]	; 0x58

		xfer.p_tx_buffer = ctx->tx_buf;
    2952:	6c61      	ldr	r1, [r4, #68]	; 0x44
    2954:	9100      	str	r1, [sp, #0]
	return !!(ctx->tx_buf && ctx->tx_len);
    2956:	2900      	cmp	r1, #0
    2958:	d045      	beq.n	29e6 <transfer_next_chunk+0xb6>
    295a:	2a00      	cmp	r2, #0
    295c:	d145      	bne.n	29ea <transfer_next_chunk+0xba>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    295e:	2a00      	cmp	r2, #0
    2960:	d045      	beq.n	29ee <transfer_next_chunk+0xbe>
    2962:	461a      	mov	r2, r3
    2964:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    2966:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    2968:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    296a:	2a00      	cmp	r2, #0
    296c:	d041      	beq.n	29f2 <transfer_next_chunk+0xc2>
    296e:	6d22      	ldr	r2, [r4, #80]	; 0x50
    2970:	2a00      	cmp	r2, #0
    2972:	d140      	bne.n	29f6 <transfer_next_chunk+0xc6>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    2974:	b902      	cbnz	r2, 2978 <transfer_next_chunk+0x48>
    2976:	2300      	movs	r3, #0
    2978:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&dev_config->spi, &xfer, 0);
    297a:	2200      	movs	r2, #0
    297c:	4669      	mov	r1, sp
    297e:	f001 fd59 	bl	4434 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
    2982:	4b23      	ldr	r3, [pc, #140]	; (2a10 <transfer_next_chunk+0xe0>)
    2984:	4298      	cmp	r0, r3
    2986:	d028      	beq.n	29da <transfer_next_chunk+0xaa>
			return;
		}

		error = -EIO;
    2988:	f06f 0504 	mvn.w	r5, #4
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    298c:	6823      	ldr	r3, [r4, #0]
    298e:	b1e3      	cbz	r3, 29ca <transfer_next_chunk+0x9a>
    2990:	689a      	ldr	r2, [r3, #8]
    2992:	b1d2      	cbz	r2, 29ca <transfer_next_chunk+0x9a>
    2994:	6811      	ldr	r1, [r2, #0]
    2996:	b1c1      	cbz	r1, 29ca <transfer_next_chunk+0x9a>
			    ctx->config->operation & SPI_HOLD_ON_CS) {
    2998:	889b      	ldrh	r3, [r3, #4]
			if (!force_off &&
    299a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    299e:	d114      	bne.n	29ca <transfer_next_chunk+0x9a>
			k_busy_wait(ctx->config->cs->delay);
    29a0:	6890      	ldr	r0, [r2, #8]
	z_impl_k_busy_wait(usec_to_wait);
    29a2:	f005 f8ec 	bl	7b7e <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    29a6:	6823      	ldr	r3, [r4, #0]
    29a8:	689b      	ldr	r3, [r3, #8]
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
    29aa:	6818      	ldr	r0, [r3, #0]
    29ac:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
    29ae:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    29b0:	681a      	ldr	r2, [r3, #0]
    29b2:	2301      	movs	r3, #1
    29b4:	408b      	lsls	r3, r1
    29b6:	421a      	tst	r2, r3
    29b8:	d121      	bne.n	29fe <transfer_next_chunk+0xce>
    29ba:	2300      	movs	r3, #0
	if (value != 0)	{
    29bc:	b30b      	cbz	r3, 2a02 <transfer_next_chunk+0xd2>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
    29be:	2301      	movs	r3, #1
    29c0:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
    29c4:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    29c6:	68db      	ldr	r3, [r3, #12]
    29c8:	4798      	blx	r3
	ctx->sync_status = status;
    29ca:	6325      	str	r5, [r4, #48]	; 0x30
	k_sem_give(&ctx->sync);
    29cc:	f104 0020 	add.w	r0, r4, #32
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    29d0:	f002 f964 	bl	4c9c <z_impl_k_sem_give>
	spi_context_cs_control(ctx, false);

	LOG_DBG("Transaction finished with status %d", error);

	spi_context_complete(ctx, error);
	dev_data->busy = false;
    29d4:	2300      	movs	r3, #0
    29d6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
    29da:	b005      	add	sp, #20
    29dc:	bd30      	pop	{r4, r5, pc}
		return ctx->rx_len;
    29de:	6d23      	ldr	r3, [r4, #80]	; 0x50
    29e0:	e7b4      	b.n	294c <transfer_next_chunk+0x1c>
		return ctx->tx_len;
    29e2:	4613      	mov	r3, r2
    29e4:	e7b2      	b.n	294c <transfer_next_chunk+0x1c>
	return !!(ctx->tx_buf && ctx->tx_len);
    29e6:	2200      	movs	r2, #0
    29e8:	e7b9      	b.n	295e <transfer_next_chunk+0x2e>
    29ea:	2201      	movs	r2, #1
    29ec:	e7b7      	b.n	295e <transfer_next_chunk+0x2e>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    29ee:	2200      	movs	r2, #0
    29f0:	e7b8      	b.n	2964 <transfer_next_chunk+0x34>
	return !!(ctx->rx_buf && ctx->rx_len);
    29f2:	2200      	movs	r2, #0
    29f4:	e7be      	b.n	2974 <transfer_next_chunk+0x44>
    29f6:	2201      	movs	r2, #1
    29f8:	e7bc      	b.n	2974 <transfer_next_chunk+0x44>
	int error = 0;
    29fa:	2500      	movs	r5, #0
    29fc:	e7c6      	b.n	298c <transfer_next_chunk+0x5c>
		value = (value != 0) ? 0 : 1;
    29fe:	2301      	movs	r3, #1
    2a00:	e7dc      	b.n	29bc <transfer_next_chunk+0x8c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
    2a02:	2301      	movs	r3, #1
    2a04:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
    2a08:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    2a0a:	691b      	ldr	r3, [r3, #16]
    2a0c:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
    2a0e:	e7dc      	b.n	29ca <transfer_next_chunk+0x9a>
    2a10:	0bad0000 	.word	0x0bad0000

00002a14 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    2a14:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    2a16:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    2a18:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    2a1c:	d06f      	beq.n	2afe <baudrate_set+0xea>
    2a1e:	d83a      	bhi.n	2a96 <baudrate_set+0x82>
    2a20:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    2a24:	d06e      	beq.n	2b04 <baudrate_set+0xf0>
    2a26:	d90a      	bls.n	2a3e <baudrate_set+0x2a>
    2a28:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    2a2c:	d075      	beq.n	2b1a <baudrate_set+0x106>
    2a2e:	d924      	bls.n	2a7a <baudrate_set+0x66>
    2a30:	f647 2312 	movw	r3, #31250	; 0x7a12
    2a34:	4299      	cmp	r1, r3
    2a36:	d12b      	bne.n	2a90 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2a38:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2a3c:	e013      	b.n	2a66 <baudrate_set+0x52>
	switch (baudrate) {
    2a3e:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    2a42:	d061      	beq.n	2b08 <baudrate_set+0xf4>
    2a44:	d907      	bls.n	2a56 <baudrate_set+0x42>
    2a46:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    2a4a:	d063      	beq.n	2b14 <baudrate_set+0x100>
    2a4c:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    2a50:	d110      	bne.n	2a74 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2a52:	4b3c      	ldr	r3, [pc, #240]	; (2b44 <baudrate_set+0x130>)
    2a54:	e007      	b.n	2a66 <baudrate_set+0x52>
	switch (baudrate) {
    2a56:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    2a5a:	d058      	beq.n	2b0e <baudrate_set+0xfa>
    2a5c:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    2a60:	d105      	bne.n	2a6e <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    2a62:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2a66:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    2a6a:	2000      	movs	r0, #0
    2a6c:	4770      	bx	lr
	switch (baudrate) {
    2a6e:	f06f 0015 	mvn.w	r0, #21
    2a72:	4770      	bx	lr
    2a74:	f06f 0015 	mvn.w	r0, #21
    2a78:	4770      	bx	lr
    2a7a:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    2a7e:	d04e      	beq.n	2b1e <baudrate_set+0x10a>
    2a80:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    2a84:	d101      	bne.n	2a8a <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2a86:	4b30      	ldr	r3, [pc, #192]	; (2b48 <baudrate_set+0x134>)
    2a88:	e7ed      	b.n	2a66 <baudrate_set+0x52>
	switch (baudrate) {
    2a8a:	f06f 0015 	mvn.w	r0, #21
    2a8e:	4770      	bx	lr
    2a90:	f06f 0015 	mvn.w	r0, #21
    2a94:	4770      	bx	lr
    2a96:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    2a9a:	d042      	beq.n	2b22 <baudrate_set+0x10e>
    2a9c:	d909      	bls.n	2ab2 <baudrate_set+0x9e>
    2a9e:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    2aa2:	d046      	beq.n	2b32 <baudrate_set+0x11e>
    2aa4:	d91f      	bls.n	2ae6 <baudrate_set+0xd2>
    2aa6:	4b29      	ldr	r3, [pc, #164]	; (2b4c <baudrate_set+0x138>)
    2aa8:	4299      	cmp	r1, r3
    2aaa:	d148      	bne.n	2b3e <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2aac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2ab0:	e7d9      	b.n	2a66 <baudrate_set+0x52>
	switch (baudrate) {
    2ab2:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    2ab6:	d037      	beq.n	2b28 <baudrate_set+0x114>
    2ab8:	d905      	bls.n	2ac6 <baudrate_set+0xb2>
    2aba:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    2abe:	d10f      	bne.n	2ae0 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2ac0:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2ac4:	e7cf      	b.n	2a66 <baudrate_set+0x52>
	switch (baudrate) {
    2ac6:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    2aca:	4299      	cmp	r1, r3
    2acc:	d02e      	beq.n	2b2c <baudrate_set+0x118>
    2ace:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    2ad2:	d102      	bne.n	2ada <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2ad4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2ad8:	e7c5      	b.n	2a66 <baudrate_set+0x52>
	switch (baudrate) {
    2ada:	f06f 0015 	mvn.w	r0, #21
    2ade:	4770      	bx	lr
    2ae0:	f06f 0015 	mvn.w	r0, #21
    2ae4:	4770      	bx	lr
    2ae6:	4b1a      	ldr	r3, [pc, #104]	; (2b50 <baudrate_set+0x13c>)
    2ae8:	4299      	cmp	r1, r3
    2aea:	d025      	beq.n	2b38 <baudrate_set+0x124>
    2aec:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    2af0:	d102      	bne.n	2af8 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2af2:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2af6:	e7b6      	b.n	2a66 <baudrate_set+0x52>
	switch (baudrate) {
    2af8:	f06f 0015 	mvn.w	r0, #21
    2afc:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2afe:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    2b02:	e7b0      	b.n	2a66 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2b04:	4b13      	ldr	r3, [pc, #76]	; (2b54 <baudrate_set+0x140>)
    2b06:	e7ae      	b.n	2a66 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2b08:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2b0c:	e7ab      	b.n	2a66 <baudrate_set+0x52>
	switch (baudrate) {
    2b0e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2b12:	e7a8      	b.n	2a66 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2b14:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2b18:	e7a5      	b.n	2a66 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2b1a:	4b0f      	ldr	r3, [pc, #60]	; (2b58 <baudrate_set+0x144>)
    2b1c:	e7a3      	b.n	2a66 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    2b1e:	4b0f      	ldr	r3, [pc, #60]	; (2b5c <baudrate_set+0x148>)
    2b20:	e7a1      	b.n	2a66 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2b22:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2b26:	e79e      	b.n	2a66 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2b28:	4b0d      	ldr	r3, [pc, #52]	; (2b60 <baudrate_set+0x14c>)
    2b2a:	e79c      	b.n	2a66 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    2b2c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2b30:	e799      	b.n	2a66 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2b32:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2b36:	e796      	b.n	2a66 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2b38:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2b3c:	e793      	b.n	2a66 <baudrate_set+0x52>
	switch (baudrate) {
    2b3e:	f06f 0015 	mvn.w	r0, #21
}
    2b42:	4770      	bx	lr
    2b44:	0013b000 	.word	0x0013b000
    2b48:	004ea000 	.word	0x004ea000
    2b4c:	000f4240 	.word	0x000f4240
    2b50:	0003d090 	.word	0x0003d090
    2b54:	00275000 	.word	0x00275000
    2b58:	0075c000 	.word	0x0075c000
    2b5c:	003af000 	.word	0x003af000
    2b60:	013a9000 	.word	0x013a9000

00002b64 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    2b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b68:	4605      	mov	r5, r0
    2b6a:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = dev->data;
    2b6c:	f8d0 8010 	ldr.w	r8, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2b70:	f004 fe51 	bl	7816 <k_is_in_isr>
    2b74:	b920      	cbnz	r0, 2b80 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    2b76:	4b16      	ldr	r3, [pc, #88]	; (2bd0 <uarte_nrfx_poll_out+0x6c>)
    2b78:	781b      	ldrb	r3, [r3, #0]
    2b7a:	b143      	cbz	r3, 2b8e <uarte_nrfx_poll_out+0x2a>
    2b7c:	2300      	movs	r3, #0
    2b7e:	e000      	b.n	2b82 <uarte_nrfx_poll_out+0x1e>
    2b80:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    2b82:	b953      	cbnz	r3, 2b9a <uarte_nrfx_poll_out+0x36>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    2b84:	4628      	mov	r0, r5
    2b86:	f004 fa9d 	bl	70c4 <wait_tx_ready>
    2b8a:	4606      	mov	r6, r0
    2b8c:	e013      	b.n	2bb6 <uarte_nrfx_poll_out+0x52>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2b8e:	2301      	movs	r3, #1
    2b90:	e7f7      	b.n	2b82 <uarte_nrfx_poll_out+0x1e>
    2b92:	f384 8811 	msr	BASEPRI, r4
    2b96:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    2b9a:	f04f 0320 	mov.w	r3, #32
    2b9e:	f3ef 8411 	mrs	r4, BASEPRI
    2ba2:	f383 8812 	msr	BASEPRI_MAX, r3
    2ba6:	f3bf 8f6f 	isb	sy
			key = irq_lock();
    2baa:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    2bac:	4628      	mov	r0, r5
    2bae:	f004 fa3b 	bl	7028 <is_tx_ready>
    2bb2:	2800      	cmp	r0, #0
    2bb4:	d0ed      	beq.n	2b92 <uarte_nrfx_poll_out+0x2e>
	}

	data->char_out = c;
    2bb6:	4641      	mov	r1, r8
    2bb8:	f801 7f10 	strb.w	r7, [r1, #16]!
	tx_start(dev, &data->char_out, 1);
    2bbc:	2201      	movs	r2, #1
    2bbe:	4628      	mov	r0, r5
    2bc0:	f004 fa4c 	bl	705c <tx_start>
	__asm__ volatile(
    2bc4:	f386 8811 	msr	BASEPRI, r6
    2bc8:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    2bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2bd0:	20001f36 	.word	0x20001f36

00002bd4 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    2bd4:	b538      	push	{r3, r4, r5, lr}
    2bd6:	4604      	mov	r4, r0
    2bd8:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    2bda:	f101 0012 	add.w	r0, r1, #18
    2bde:	f001 fa33 	bl	4048 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    2be2:	4b0c      	ldr	r3, [pc, #48]	; (2c14 <endtx_stoptx_ppi_init+0x40>)
    2be4:	4298      	cmp	r0, r3
    2be6:	d111      	bne.n	2c0c <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    2be8:	7cab      	ldrb	r3, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2bea:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    2bee:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    2bf0:	4a09      	ldr	r2, [pc, #36]	; (2c18 <endtx_stoptx_ppi_init+0x44>)
    2bf2:	33a2      	adds	r3, #162	; 0xa2
    2bf4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    2bf8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    2bfc:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    2bfe:	7ca9      	ldrb	r1, [r5, #18]
    2c00:	2301      	movs	r3, #1
    2c02:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    2c04:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    2c08:	2000      	movs	r0, #0
}
    2c0a:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    2c0c:	f06f 0004 	mvn.w	r0, #4
    2c10:	e7fb      	b.n	2c0a <endtx_stoptx_ppi_init+0x36>
    2c12:	bf00      	nop
    2c14:	0bad0000 	.word	0x0bad0000
    2c18:	4001f000 	.word	0x4001f000

00002c1c <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    2c1c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    2c20:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    2c24:	4b01      	ldr	r3, [pc, #4]	; (2c2c <set_comparator+0x10>)
    2c26:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    2c2a:	4770      	bx	lr
    2c2c:	40011000 	.word	0x40011000

00002c30 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    2c30:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    2c34:	4b01      	ldr	r3, [pc, #4]	; (2c3c <get_comparator+0xc>)
    2c36:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    2c3a:	4770      	bx	lr
    2c3c:	40011000 	.word	0x40011000

00002c40 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2c40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2c44:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    2c46:	4a02      	ldr	r2, [pc, #8]	; (2c50 <event_enable+0x10>)
    2c48:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    2c4c:	4770      	bx	lr
    2c4e:	bf00      	nop
    2c50:	40011000 	.word	0x40011000

00002c54 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2c54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2c58:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    2c5a:	4a02      	ldr	r2, [pc, #8]	; (2c64 <event_disable+0x10>)
    2c5c:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    2c60:	4770      	bx	lr
    2c62:	bf00      	nop
    2c64:	40011000 	.word	0x40011000

00002c68 <counter>:
     return p_reg->COUNTER;
    2c68:	4b01      	ldr	r3, [pc, #4]	; (2c70 <counter+0x8>)
    2c6a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    2c6e:	4770      	bx	lr
    2c70:	40011000 	.word	0x40011000

00002c74 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    2c74:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    2c76:	2301      	movs	r3, #1
    2c78:	4083      	lsls	r3, r0
    2c7a:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2c7e:	4a10      	ldr	r2, [pc, #64]	; (2cc0 <compare_int_lock+0x4c>)
    2c80:	f3bf 8f5b 	dmb	ish
    2c84:	e852 1f00 	ldrex	r1, [r2]
    2c88:	ea01 0e0c 	and.w	lr, r1, ip
    2c8c:	e842 e400 	strex	r4, lr, [r2]
    2c90:	2c00      	cmp	r4, #0
    2c92:	d1f7      	bne.n	2c84 <compare_int_lock+0x10>
    2c94:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2c98:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2c9c:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    2ca0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2ca4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    2ca8:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    2cac:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2cb0:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    2cb4:	420b      	tst	r3, r1
}
    2cb6:	bf14      	ite	ne
    2cb8:	2001      	movne	r0, #1
    2cba:	2000      	moveq	r0, #0
    2cbc:	bd10      	pop	{r4, pc}
    2cbe:	bf00      	nop
    2cc0:	20000c30 	.word	0x20000c30

00002cc4 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    2cc4:	b570      	push	{r4, r5, r6, lr}
    2cc6:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    2cc8:	f004 fab6 	bl	7238 <full_int_lock>
    2ccc:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    2cce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2cd2:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    2cd4:	4a17      	ldr	r2, [pc, #92]	; (2d34 <channel_processing_check_and_clear+0x70>)
    2cd6:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    2cda:	4213      	tst	r3, r2
    2cdc:	d105      	bne.n	2cea <channel_processing_check_and_clear+0x26>
	bool result = false;
    2cde:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    2ce0:	4628      	mov	r0, r5
    2ce2:	f004 fab2 	bl	724a <full_int_unlock>

	return result;
}
    2ce6:	4630      	mov	r0, r6
    2ce8:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    2cea:	2301      	movs	r3, #1
    2cec:	40a3      	lsls	r3, r4
    2cee:	43db      	mvns	r3, r3
    2cf0:	4a11      	ldr	r2, [pc, #68]	; (2d38 <channel_processing_check_and_clear+0x74>)
    2cf2:	f3bf 8f5b 	dmb	ish
    2cf6:	e852 1f00 	ldrex	r1, [r2]
    2cfa:	ea01 0003 	and.w	r0, r1, r3
    2cfe:	e842 0600 	strex	r6, r0, [r2]
    2d02:	2e00      	cmp	r6, #0
    2d04:	d1f7      	bne.n	2cf6 <channel_processing_check_and_clear+0x32>
    2d06:	f3bf 8f5b 	dmb	ish
    2d0a:	b959      	cbnz	r1, 2d24 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    2d0c:	f104 0350 	add.w	r3, r4, #80	; 0x50
    2d10:	009b      	lsls	r3, r3, #2
    2d12:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2d14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2d18:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    2d1c:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    2d1e:	b113      	cbz	r3, 2d26 <channel_processing_check_and_clear+0x62>
    2d20:	2301      	movs	r3, #1
    2d22:	e000      	b.n	2d26 <channel_processing_check_and_clear+0x62>
    2d24:	2301      	movs	r3, #1
		if (result) {
    2d26:	461e      	mov	r6, r3
    2d28:	2b00      	cmp	r3, #0
    2d2a:	d0d9      	beq.n	2ce0 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    2d2c:	4620      	mov	r0, r4
    2d2e:	f004 fa74 	bl	721a <event_clear>
    2d32:	e7d5      	b.n	2ce0 <channel_processing_check_and_clear+0x1c>
    2d34:	40011000 	.word	0x40011000
    2d38:	20000c2c 	.word	0x20000c2c

00002d3c <compare_int_unlock>:
	if (key) {
    2d3c:	b901      	cbnz	r1, 2d40 <compare_int_unlock+0x4>
}
    2d3e:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    2d40:	2301      	movs	r3, #1
    2d42:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2d44:	4a11      	ldr	r2, [pc, #68]	; (2d8c <compare_int_unlock+0x50>)
    2d46:	f3bf 8f5b 	dmb	ish
    2d4a:	e852 1f00 	ldrex	r1, [r2]
    2d4e:	4319      	orrs	r1, r3
    2d50:	e842 1c00 	strex	ip, r1, [r2]
    2d54:	f1bc 0f00 	cmp.w	ip, #0
    2d58:	d1f7      	bne.n	2d4a <compare_int_unlock+0xe>
    2d5a:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2d5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2d62:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    2d64:	4a0a      	ldr	r2, [pc, #40]	; (2d90 <compare_int_unlock+0x54>)
    2d66:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2d6a:	f3bf 8f5b 	dmb	ish
    2d6e:	4b09      	ldr	r3, [pc, #36]	; (2d94 <compare_int_unlock+0x58>)
    2d70:	681b      	ldr	r3, [r3, #0]
    2d72:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    2d76:	fa23 f000 	lsr.w	r0, r3, r0
    2d7a:	f010 0f01 	tst.w	r0, #1
    2d7e:	d0de      	beq.n	2d3e <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2d80:	4b05      	ldr	r3, [pc, #20]	; (2d98 <compare_int_unlock+0x5c>)
    2d82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2d86:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    2d8a:	e7d8      	b.n	2d3e <compare_int_unlock+0x2>
    2d8c:	20000c30 	.word	0x20000c30
    2d90:	40011000 	.word	0x40011000
    2d94:	20000c2c 	.word	0x20000c2c
    2d98:	e000e100 	.word	0xe000e100

00002d9c <sys_clock_timeout_handler>:
{
    2d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2da0:	4607      	mov	r7, r0
    2da2:	4614      	mov	r4, r2
    2da4:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    2da6:	4610      	mov	r0, r2
    2da8:	4619      	mov	r1, r3
    2daa:	f004 fa42 	bl	7232 <absolute_time_to_cc>
    2dae:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2db0:	4b15      	ldr	r3, [pc, #84]	; (2e08 <sys_clock_timeout_handler+0x6c>)
    2db2:	681a      	ldr	r2, [r3, #0]
    2db4:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    2db6:	601c      	str	r4, [r3, #0]
    2db8:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    2dba:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    2dbe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    2dc2:	d309      	bcc.n	2dd8 <sys_clock_timeout_handler+0x3c>
	return false;
    2dc4:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    2dc6:	f002 fcab 	bl	5720 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    2dca:	4638      	mov	r0, r7
    2dcc:	f7ff ff30 	bl	2c30 <get_comparator>
    2dd0:	42a8      	cmp	r0, r5
    2dd2:	d00e      	beq.n	2df2 <sys_clock_timeout_handler+0x56>
}
    2dd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    2dd8:	4b0c      	ldr	r3, [pc, #48]	; (2e0c <sys_clock_timeout_handler+0x70>)
    2dda:	681b      	ldr	r3, [r3, #0]
    2ddc:	0a1a      	lsrs	r2, r3, #8
    2dde:	061b      	lsls	r3, r3, #24
    2de0:	eb15 0803 	adds.w	r8, r5, r3
    2de4:	f142 0900 	adc.w	r9, r2, #0
    2de8:	4b09      	ldr	r3, [pc, #36]	; (2e10 <sys_clock_timeout_handler+0x74>)
    2dea:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
    2dee:	2401      	movs	r4, #1
    2df0:	e7e9      	b.n	2dc6 <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
    2df2:	b11c      	cbz	r4, 2dfc <sys_clock_timeout_handler+0x60>
		event_enable(chan);
    2df4:	4638      	mov	r0, r7
    2df6:	f7ff ff23 	bl	2c40 <event_enable>
}
    2dfa:	e7eb      	b.n	2dd4 <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
    2dfc:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    2e00:	4638      	mov	r0, r7
    2e02:	f7ff ff0b 	bl	2c1c <set_comparator>
    2e06:	e7f5      	b.n	2df4 <sys_clock_timeout_handler+0x58>
    2e08:	200004b8 	.word	0x200004b8
    2e0c:	20000c34 	.word	0x20000c34
    2e10:	200004a0 	.word	0x200004a0

00002e14 <z_nrf_rtc_timer_read>:
{
    2e14:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    2e16:	4b0d      	ldr	r3, [pc, #52]	; (2e4c <z_nrf_rtc_timer_read+0x38>)
    2e18:	681c      	ldr	r4, [r3, #0]
    2e1a:	0a25      	lsrs	r5, r4, #8
    2e1c:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    2e1e:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    2e22:	f7ff ff21 	bl	2c68 <counter>
    2e26:	4603      	mov	r3, r0
	val += cntr;
    2e28:	1900      	adds	r0, r0, r4
    2e2a:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    2e2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2e32:	d20a      	bcs.n	2e4a <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    2e34:	4b06      	ldr	r3, [pc, #24]	; (2e50 <z_nrf_rtc_timer_read+0x3c>)
    2e36:	e9d3 2300 	ldrd	r2, r3, [r3]
    2e3a:	4290      	cmp	r0, r2
    2e3c:	eb71 0303 	sbcs.w	r3, r1, r3
    2e40:	d203      	bcs.n	2e4a <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    2e42:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    2e46:	f141 0100 	adc.w	r1, r1, #0
}
    2e4a:	bd38      	pop	{r3, r4, r5, pc}
    2e4c:	20000c34 	.word	0x20000c34
    2e50:	200004a0 	.word	0x200004a0

00002e54 <compare_set_nolocks>:
{
    2e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e56:	4606      	mov	r6, r0
    2e58:	4614      	mov	r4, r2
    2e5a:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    2e5c:	4610      	mov	r0, r2
    2e5e:	4619      	mov	r1, r3
    2e60:	f004 f9e7 	bl	7232 <absolute_time_to_cc>
    2e64:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    2e66:	f7ff ffd5 	bl	2e14 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    2e6a:	42a0      	cmp	r0, r4
    2e6c:	eb71 0305 	sbcs.w	r3, r1, r5
    2e70:	d21d      	bcs.n	2eae <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
    2e72:	1a23      	subs	r3, r4, r0
    2e74:	eb65 0101 	sbc.w	r1, r5, r1
    2e78:	4a1b      	ldr	r2, [pc, #108]	; (2ee8 <compare_set_nolocks+0x94>)
    2e7a:	4293      	cmp	r3, r2
    2e7c:	f171 0300 	sbcs.w	r3, r1, #0
    2e80:	d22f      	bcs.n	2ee2 <compare_set_nolocks+0x8e>
		if (target_time != cc_data[chan].target_time) {
    2e82:	4b1a      	ldr	r3, [pc, #104]	; (2eec <compare_set_nolocks+0x98>)
    2e84:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    2e88:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    2e8c:	42ab      	cmp	r3, r5
    2e8e:	bf08      	it	eq
    2e90:	42a2      	cmpeq	r2, r4
    2e92:	d01a      	beq.n	2eca <compare_set_nolocks+0x76>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    2e94:	4639      	mov	r1, r7
    2e96:	4630      	mov	r0, r6
    2e98:	f004 f9dc 	bl	7254 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    2e9c:	4639      	mov	r1, r7
    2e9e:	f004 f9b8 	bl	7212 <counter_sub>
    2ea2:	1900      	adds	r0, r0, r4
    2ea4:	f145 0300 	adc.w	r3, r5, #0
    2ea8:	4604      	mov	r4, r0
    2eaa:	461d      	mov	r5, r3
    2eac:	e00d      	b.n	2eca <compare_set_nolocks+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
    2eae:	2301      	movs	r3, #1
    2eb0:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2eb2:	4a0f      	ldr	r2, [pc, #60]	; (2ef0 <compare_set_nolocks+0x9c>)
    2eb4:	f3bf 8f5b 	dmb	ish
    2eb8:	e852 1f00 	ldrex	r1, [r2]
    2ebc:	4319      	orrs	r1, r3
    2ebe:	e842 1000 	strex	r0, r1, [r2]
    2ec2:	2800      	cmp	r0, #0
    2ec4:	d1f8      	bne.n	2eb8 <compare_set_nolocks+0x64>
    2ec6:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    2eca:	4b08      	ldr	r3, [pc, #32]	; (2eec <compare_set_nolocks+0x98>)
    2ecc:	0132      	lsls	r2, r6, #4
    2ece:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    2ed2:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    2ed6:	9906      	ldr	r1, [sp, #24]
    2ed8:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    2eda:	9b07      	ldr	r3, [sp, #28]
    2edc:	6073      	str	r3, [r6, #4]
	return ret;
    2ede:	2000      	movs	r0, #0
}
    2ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    2ee2:	f06f 0015 	mvn.w	r0, #21
    2ee6:	e7fb      	b.n	2ee0 <compare_set_nolocks+0x8c>
    2ee8:	01000001 	.word	0x01000001
    2eec:	200004a8 	.word	0x200004a8
    2ef0:	20000c2c 	.word	0x20000c2c

00002ef4 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    2ef4:	b530      	push	{r4, r5, lr}
    2ef6:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    2ef8:	2300      	movs	r3, #0
    2efa:	4a1d      	ldr	r2, [pc, #116]	; (2f70 <sys_clock_driver_init+0x7c>)
    2efc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2f00:	2b00      	cmp	r3, #0
    2f02:	dd24      	ble.n	2f4e <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
    2f04:	4c1a      	ldr	r4, [pc, #104]	; (2f70 <sys_clock_driver_init+0x7c>)
    2f06:	2502      	movs	r5, #2
    2f08:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2f0c:	4b19      	ldr	r3, [pc, #100]	; (2f74 <sys_clock_driver_init+0x80>)
    2f0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2f12:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    2f16:	2200      	movs	r2, #0
    2f18:	2101      	movs	r1, #1
    2f1a:	2011      	movs	r0, #17
    2f1c:	f7fe fdac 	bl	1a78 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    2f20:	2011      	movs	r0, #17
    2f22:	f7fe fd79 	bl	1a18 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2f26:	2301      	movs	r3, #1
    2f28:	60a3      	str	r3, [r4, #8]
    2f2a:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    2f2c:	4a12      	ldr	r2, [pc, #72]	; (2f78 <sys_clock_driver_init+0x84>)
    2f2e:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    2f30:	2400      	movs	r4, #0
    2f32:	9401      	str	r4, [sp, #4]
    2f34:	4b11      	ldr	r3, [pc, #68]	; (2f7c <sys_clock_driver_init+0x88>)
    2f36:	9300      	str	r3, [sp, #0]
    2f38:	4a11      	ldr	r2, [pc, #68]	; (2f80 <sys_clock_driver_init+0x8c>)
    2f3a:	2300      	movs	r3, #0
    2f3c:	4620      	mov	r0, r4
    2f3e:	f004 f9c4 	bl	72ca <compare_set>

	z_nrf_clock_control_lf_on(mode);
    2f42:	4628      	mov	r0, r5
    2f44:	f7ff fab2 	bl	24ac <z_nrf_clock_control_lf_on>

	return 0;
}
    2f48:	4620      	mov	r0, r4
    2f4a:	b003      	add	sp, #12
    2f4c:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    2f4e:	4a0d      	ldr	r2, [pc, #52]	; (2f84 <sys_clock_driver_init+0x90>)
    2f50:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    2f54:	f04f 30ff 	mov.w	r0, #4294967295
    2f58:	f04f 31ff 	mov.w	r1, #4294967295
    2f5c:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2f60:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2f64:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    2f66:	4902      	ldr	r1, [pc, #8]	; (2f70 <sys_clock_driver_init+0x7c>)
    2f68:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2f6c:	3301      	adds	r3, #1
    2f6e:	e7c7      	b.n	2f00 <sys_clock_driver_init+0xc>
    2f70:	40011000 	.word	0x40011000
    2f74:	e000e100 	.word	0xe000e100
    2f78:	20000c30 	.word	0x20000c30
    2f7c:	00002d9d 	.word	0x00002d9d
    2f80:	007fffff 	.word	0x007fffff
    2f84:	200004a8 	.word	0x200004a8

00002f88 <process_channel>:
{
    2f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2f8c:	b082      	sub	sp, #8
    2f8e:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    2f90:	f7ff fe98 	bl	2cc4 <channel_processing_check_and_clear>
    2f94:	b910      	cbnz	r0, 2f9c <process_channel+0x14>
}
    2f96:	b002      	add	sp, #8
    2f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    2f9c:	f7ff ff3a 	bl	2e14 <z_nrf_rtc_timer_read>
    2fa0:	4682      	mov	sl, r0
    2fa2:	460e      	mov	r6, r1
		mcu_critical_state = full_int_lock();
    2fa4:	f004 f948 	bl	7238 <full_int_lock>
    2fa8:	4605      	mov	r5, r0
		expire_time = cc_data[chan].target_time;
    2faa:	4b13      	ldr	r3, [pc, #76]	; (2ff8 <process_channel+0x70>)
    2fac:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2fb0:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    2fb4:	45c2      	cmp	sl, r8
    2fb6:	eb76 0309 	sbcs.w	r3, r6, r9
    2fba:	d20b      	bcs.n	2fd4 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    2fbc:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    2fbe:	4628      	mov	r0, r5
    2fc0:	f004 f943 	bl	724a <full_int_unlock>
		if (handler) {
    2fc4:	2e00      	cmp	r6, #0
    2fc6:	d0e6      	beq.n	2f96 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    2fc8:	9700      	str	r7, [sp, #0]
    2fca:	4642      	mov	r2, r8
    2fcc:	464b      	mov	r3, r9
    2fce:	4620      	mov	r0, r4
    2fd0:	47b0      	blx	r6
}
    2fd2:	e7e0      	b.n	2f96 <process_channel+0xe>
			handler = cc_data[chan].callback;
    2fd4:	4a08      	ldr	r2, [pc, #32]	; (2ff8 <process_channel+0x70>)
    2fd6:	0123      	lsls	r3, r4, #4
    2fd8:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    2fdc:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    2fde:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    2fe0:	2000      	movs	r0, #0
    2fe2:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2fe4:	f04f 32ff 	mov.w	r2, #4294967295
    2fe8:	f04f 33ff 	mov.w	r3, #4294967295
    2fec:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    2ff0:	4620      	mov	r0, r4
    2ff2:	f7ff fe2f 	bl	2c54 <event_disable>
    2ff6:	e7e2      	b.n	2fbe <process_channel+0x36>
    2ff8:	200004a8 	.word	0x200004a8

00002ffc <rtc_nrf_isr>:
{
    2ffc:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    2ffe:	4b0e      	ldr	r3, [pc, #56]	; (3038 <rtc_nrf_isr+0x3c>)
    3000:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    3004:	f013 0f02 	tst.w	r3, #2
    3008:	d00d      	beq.n	3026 <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    300a:	4b0b      	ldr	r3, [pc, #44]	; (3038 <rtc_nrf_isr+0x3c>)
    300c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    3010:	b14b      	cbz	r3, 3026 <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3012:	4b09      	ldr	r3, [pc, #36]	; (3038 <rtc_nrf_isr+0x3c>)
    3014:	2200      	movs	r2, #0
    3016:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    301a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    301e:	4a07      	ldr	r2, [pc, #28]	; (303c <rtc_nrf_isr+0x40>)
    3020:	6813      	ldr	r3, [r2, #0]
    3022:	3301      	adds	r3, #1
    3024:	6013      	str	r3, [r2, #0]
{
    3026:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    3028:	2c00      	cmp	r4, #0
    302a:	dd00      	ble.n	302e <rtc_nrf_isr+0x32>
}
    302c:	bd10      	pop	{r4, pc}
		process_channel(chan);
    302e:	4620      	mov	r0, r4
    3030:	f7ff ffaa 	bl	2f88 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    3034:	3401      	adds	r4, #1
    3036:	e7f7      	b.n	3028 <rtc_nrf_isr+0x2c>
    3038:	40011000 	.word	0x40011000
    303c:	20000c34 	.word	0x20000c34

00003040 <sys_clock_set_timeout>:
{
    3040:	b510      	push	{r4, lr}
    3042:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3044:	f1b0 3fff 	cmp.w	r0, #4294967295
    3048:	d006      	beq.n	3058 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    304a:	2801      	cmp	r0, #1
    304c:	dd06      	ble.n	305c <sys_clock_set_timeout+0x1c>
    304e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3052:	da05      	bge.n	3060 <sys_clock_set_timeout+0x20>
    3054:	1e44      	subs	r4, r0, #1
    3056:	e004      	b.n	3062 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3058:	480f      	ldr	r0, [pc, #60]	; (3098 <sys_clock_set_timeout+0x58>)
    305a:	e7f8      	b.n	304e <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    305c:	2400      	movs	r4, #0
    305e:	e000      	b.n	3062 <sys_clock_set_timeout+0x22>
    3060:	4c0d      	ldr	r4, [pc, #52]	; (3098 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3062:	f7ff fed7 	bl	2e14 <z_nrf_rtc_timer_read>
    3066:	4b0d      	ldr	r3, [pc, #52]	; (309c <sys_clock_set_timeout+0x5c>)
    3068:	6819      	ldr	r1, [r3, #0]
    306a:	685b      	ldr	r3, [r3, #4]
    306c:	1a40      	subs	r0, r0, r1
	if (unannounced >= COUNTER_HALF_SPAN) {
    306e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3072:	d300      	bcc.n	3076 <sys_clock_set_timeout+0x36>
		ticks = 0;
    3074:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    3076:	4420      	add	r0, r4
    3078:	1c42      	adds	r2, r0, #1
	if (cyc > MAX_CYCLES) {
    307a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    307e:	d300      	bcc.n	3082 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    3080:	4a05      	ldr	r2, [pc, #20]	; (3098 <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
    3082:	2000      	movs	r0, #0
    3084:	188a      	adds	r2, r1, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3086:	9001      	str	r0, [sp, #4]
    3088:	4905      	ldr	r1, [pc, #20]	; (30a0 <sys_clock_set_timeout+0x60>)
    308a:	9100      	str	r1, [sp, #0]
    308c:	f143 0300 	adc.w	r3, r3, #0
    3090:	f004 f91b 	bl	72ca <compare_set>
}
    3094:	b002      	add	sp, #8
    3096:	bd10      	pop	{r4, pc}
    3098:	007fffff 	.word	0x007fffff
    309c:	200004b8 	.word	0x200004b8
    30a0:	00002d9d 	.word	0x00002d9d

000030a4 <sys_clock_elapsed>:
{
    30a4:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    30a6:	f7ff feb5 	bl	2e14 <z_nrf_rtc_timer_read>
    30aa:	4b02      	ldr	r3, [pc, #8]	; (30b4 <sys_clock_elapsed+0x10>)
    30ac:	681b      	ldr	r3, [r3, #0]
}
    30ae:	1ac0      	subs	r0, r0, r3
    30b0:	bd08      	pop	{r3, pc}
    30b2:	bf00      	nop
    30b4:	200004b8 	.word	0x200004b8

000030b8 <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
    30b8:	b500      	push	{lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    30ba:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    30be:	d001      	beq.n	30c4 <nrf_pin_configure+0xc>
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    30c0:	2201      	movs	r2, #1
		dir = NRF_GPIO_PIN_DIR_INPUT;
    30c2:	2100      	movs	r1, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    30c4:	f3c0 1e81 	ubfx	lr, r0, #6, #2
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
    30c8:	f3c0 2c03 	ubfx	ip, r0, #8, #4
    *p_pin = pin_number & 0x1F;
    30cc:	f000 031f 	and.w	r3, r0, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    30d0:	f010 0f20 	tst.w	r0, #32
    30d4:	d10d      	bne.n	30f2 <nrf_pin_configure+0x3a>
        case 0: return NRF_P0;
    30d6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    30da:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    30de:	ea41 018e 	orr.w	r1, r1, lr, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    30e2:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    30e6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    30ea:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
    30ee:	f85d fb04 	ldr.w	pc, [sp], #4
        case 1: return NRF_P1;
    30f2:	4801      	ldr	r0, [pc, #4]	; (30f8 <nrf_pin_configure+0x40>)
    30f4:	e7f1      	b.n	30da <nrf_pin_configure+0x22>
    30f6:	bf00      	nop
    30f8:	50000300 	.word	0x50000300

000030fc <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    30fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    30fe:	4605      	mov	r5, r0
    3100:	460e      	mov	r6, r1
    3102:	4617      	mov	r7, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    3104:	2400      	movs	r4, #0
    3106:	e017      	b.n	3138 <pinctrl_configure_pins+0x3c>
		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    3108:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    310c:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    3110:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
    3114:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3118:	f012 0f20 	tst.w	r2, #32
    311c:	d128      	bne.n	3170 <pinctrl_configure_pins+0x74>
        case 0: return NRF_P0;
    311e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3122:	2101      	movs	r1, #1
    3124:	fa01 f303 	lsl.w	r3, r1, r3
    p_reg->OUTSET = set_mask;
    3128:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    312c:	460a      	mov	r2, r1
    312e:	5828      	ldr	r0, [r5, r0]
    3130:	f7ff ffc2 	bl	30b8 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    3134:	3401      	adds	r4, #1
    3136:	b2e4      	uxtb	r4, r4
    3138:	42b4      	cmp	r4, r6
    313a:	f080 8087 	bcs.w	324c <pinctrl_configure_pins+0x150>
		switch (NRF_GET_FUN(pins[i])) {
    313e:	00a0      	lsls	r0, r4, #2
    3140:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    3144:	0c1a      	lsrs	r2, r3, #16
    3146:	2a06      	cmp	r2, #6
    3148:	f200 8082 	bhi.w	3250 <pinctrl_configure_pins+0x154>
    314c:	a101      	add	r1, pc, #4	; (adr r1, 3154 <pinctrl_configure_pins+0x58>)
    314e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    3152:	bf00      	nop
    3154:	00003109 	.word	0x00003109
    3158:	00003175 	.word	0x00003175
    315c:	0000318b 	.word	0x0000318b
    3160:	000031bd 	.word	0x000031bd
    3164:	000031d3 	.word	0x000031d3
    3168:	00003205 	.word	0x00003205
    316c:	00003237 	.word	0x00003237
        case 1: return NRF_P1;
    3170:	4a39      	ldr	r2, [pc, #228]	; (3258 <pinctrl_configure_pins+0x15c>)
    3172:	e7d6      	b.n	3122 <pinctrl_configure_pins+0x26>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
		case NRF_FUN_UART_RX:
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    3174:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3178:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    317c:	2200      	movs	r2, #0
    317e:	4611      	mov	r1, r2
    3180:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    3184:	f7ff ff98 	bl	30b8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    3188:	e7d4      	b.n	3134 <pinctrl_configure_pins+0x38>
		case NRF_FUN_UART_RTS:
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    318a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    318e:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    3192:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
    3196:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    319a:	f012 0f20 	tst.w	r2, #32
    319e:	d10b      	bne.n	31b8 <pinctrl_configure_pins+0xbc>
        case 0: return NRF_P0;
    31a0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    31a4:	2101      	movs	r1, #1
    31a6:	fa01 f303 	lsl.w	r3, r1, r3
    p_reg->OUTSET = set_mask;
    31aa:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    31ae:	460a      	mov	r2, r1
    31b0:	5828      	ldr	r0, [r5, r0]
    31b2:	f7ff ff81 	bl	30b8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    31b6:	e7bd      	b.n	3134 <pinctrl_configure_pins+0x38>
        case 1: return NRF_P1;
    31b8:	4a27      	ldr	r2, [pc, #156]	; (3258 <pinctrl_configure_pins+0x15c>)
    31ba:	e7f3      	b.n	31a4 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_UART_CTS:
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
    31bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    31c0:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    31c4:	2200      	movs	r2, #0
    31c6:	4611      	mov	r1, r2
    31c8:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    31cc:	f7ff ff74 	bl	30b8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    31d0:	e7b0      	b.n	3134 <pinctrl_configure_pins+0x38>
#endif /* defined(NRF_PSEL_UART) */
#if defined(NRF_PSEL_SPIM)
		case NRF_FUN_SPIM_SCK:
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    31d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    31d6:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    31da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
    31de:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    31e2:	f012 0f20 	tst.w	r2, #32
    31e6:	d10b      	bne.n	3200 <pinctrl_configure_pins+0x104>
        case 0: return NRF_P0;
    31e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    31ec:	2101      	movs	r1, #1
    31ee:	fa01 f303 	lsl.w	r3, r1, r3
    p_reg->OUTCLR = clr_mask;
    31f2:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    31f6:	2200      	movs	r2, #0
    31f8:	5828      	ldr	r0, [r5, r0]
    31fa:	f7ff ff5d 	bl	30b8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    31fe:	e799      	b.n	3134 <pinctrl_configure_pins+0x38>
        case 1: return NRF_P1;
    3200:	4a15      	ldr	r2, [pc, #84]	; (3258 <pinctrl_configure_pins+0x15c>)
    3202:	e7f3      	b.n	31ec <pinctrl_configure_pins+0xf0>
		case NRF_FUN_SPIM_MOSI:
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    3204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3208:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    320c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
    3210:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3214:	f012 0f20 	tst.w	r2, #32
    3218:	d10b      	bne.n	3232 <pinctrl_configure_pins+0x136>
        case 0: return NRF_P0;
    321a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    321e:	2101      	movs	r1, #1
    3220:	fa01 f303 	lsl.w	r3, r1, r3
    p_reg->OUTCLR = clr_mask;
    3224:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    3228:	460a      	mov	r2, r1
    322a:	5828      	ldr	r0, [r5, r0]
    322c:	f7ff ff44 	bl	30b8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    3230:	e780      	b.n	3134 <pinctrl_configure_pins+0x38>
        case 1: return NRF_P1;
    3232:	4a09      	ldr	r2, [pc, #36]	; (3258 <pinctrl_configure_pins+0x15c>)
    3234:	e7f3      	b.n	321e <pinctrl_configure_pins+0x122>
		case NRF_FUN_SPIM_MISO:
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    3236:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    323a:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    323e:	2200      	movs	r2, #0
    3240:	4611      	mov	r1, r2
    3242:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    3246:	f7ff ff37 	bl	30b8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    324a:	e773      	b.n	3134 <pinctrl_configure_pins+0x38>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    324c:	2000      	movs	r0, #0
}
    324e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switch (NRF_GET_FUN(pins[i])) {
    3250:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3254:	e7fb      	b.n	324e <pinctrl_configure_pins+0x152>
    3256:	bf00      	nop
    3258:	50000300 	.word	0x50000300

0000325c <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    325c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3260:	4905      	ldr	r1, [pc, #20]	; (3278 <__NVIC_SystemReset+0x1c>)
    3262:	68ca      	ldr	r2, [r1, #12]
    3264:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3268:	4b04      	ldr	r3, [pc, #16]	; (327c <__NVIC_SystemReset+0x20>)
    326a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    326c:	60cb      	str	r3, [r1, #12]
    326e:	f3bf 8f4f 	dsb	sy
    __NOP();
    3272:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3274:	e7fd      	b.n	3272 <__NVIC_SystemReset+0x16>
    3276:	bf00      	nop
    3278:	e000ed00 	.word	0xe000ed00
    327c:	05fa0004 	.word	0x05fa0004

00003280 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3280:	4b02      	ldr	r3, [pc, #8]	; (328c <nvmc_wait+0xc>)
    3282:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    3286:	2b00      	cmp	r3, #0
    3288:	d0fa      	beq.n	3280 <nvmc_wait>
}
    328a:	4770      	bx	lr
    328c:	4001e000 	.word	0x4001e000

00003290 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    3290:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3292:	4b03      	ldr	r3, [pc, #12]	; (32a0 <nvmc_config+0x10>)
    3294:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    3298:	f7ff fff2 	bl	3280 <nvmc_wait>
}
    329c:	bd08      	pop	{r3, pc}
    329e:	bf00      	nop
    32a0:	4001e000 	.word	0x4001e000

000032a4 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    32a4:	4b01      	ldr	r3, [pc, #4]	; (32ac <SystemCoreClockUpdate+0x8>)
    32a6:	4a02      	ldr	r2, [pc, #8]	; (32b0 <SystemCoreClockUpdate+0xc>)
    32a8:	601a      	str	r2, [r3, #0]
}
    32aa:	4770      	bx	lr
    32ac:	20000348 	.word	0x20000348
    32b0:	03d09000 	.word	0x03d09000

000032b4 <SystemInit>:

void SystemInit(void)
{
    32b4:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    32b6:	f004 f84d 	bl	7354 <nrf52_errata_36>
    32ba:	b140      	cbz	r0, 32ce <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    32bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    32c0:	2200      	movs	r2, #0
    32c2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    32c6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    32ca:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    32ce:	f004 f84b 	bl	7368 <nrf52_errata_66>
    32d2:	2800      	cmp	r0, #0
    32d4:	d046      	beq.n	3364 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    32d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    32da:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    32de:	4b60      	ldr	r3, [pc, #384]	; (3460 <SystemInit+0x1ac>)
    32e0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    32e4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    32e8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    32ec:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    32f0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    32f4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    32f8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    32fc:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    3300:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    3304:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    3308:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    330c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    3310:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    3314:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    3318:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    331c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    3320:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    3324:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    3328:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    332c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    3330:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    3334:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    3338:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    333c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    3340:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    3344:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    3348:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    334c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    3350:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    3354:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    3358:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    335c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    3360:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    3364:	f004 f80a 	bl	737c <nrf52_errata_98>
    3368:	b118      	cbz	r0, 3372 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    336a:	4b3e      	ldr	r3, [pc, #248]	; (3464 <SystemInit+0x1b0>)
    336c:	4a3e      	ldr	r2, [pc, #248]	; (3468 <SystemInit+0x1b4>)
    336e:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    3372:	f004 f816 	bl	73a2 <nrf52_errata_103>
    3376:	b118      	cbz	r0, 3380 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    3378:	4b3c      	ldr	r3, [pc, #240]	; (346c <SystemInit+0x1b8>)
    337a:	22fb      	movs	r2, #251	; 0xfb
    337c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    3380:	f004 f822 	bl	73c8 <nrf52_errata_115>
    3384:	b170      	cbz	r0, 33a4 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    3386:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    338a:	f8d1 3ee4 	ldr.w	r3, [r1, #3812]	; 0xee4
    338e:	f023 030f 	bic.w	r3, r3, #15
    3392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3396:	f8d2 2258 	ldr.w	r2, [r2, #600]	; 0x258
    339a:	f002 020f 	and.w	r2, r2, #15
    339e:	4313      	orrs	r3, r2
    33a0:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    33a4:	f004 f823 	bl	73ee <nrf52_errata_120>
    33a8:	b120      	cbz	r0, 33b4 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    33aa:	4b31      	ldr	r3, [pc, #196]	; (3470 <SystemInit+0x1bc>)
    33ac:	f44f 7200 	mov.w	r2, #512	; 0x200
    33b0:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    33b4:	f004 f82e 	bl	7414 <nrf52_errata_136>
    33b8:	b160      	cbz	r0, 33d4 <SystemInit+0x120>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    33ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    33be:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    33c2:	f013 0f01 	tst.w	r3, #1
    33c6:	d005      	beq.n	33d4 <SystemInit+0x120>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    33c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    33cc:	f06f 0201 	mvn.w	r2, #1
    33d0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    33d4:	f004 f828 	bl	7428 <nrf52_configuration_249>
    33d8:	b138      	cbz	r0, 33ea <SystemInit+0x136>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    33da:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    33de:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    33e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    33e6:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure NFCT pins as GPIOs if NFCT is not to be used in your code. If CONFIG_NFCT_PINS_AS_GPIOS is not defined,
       two GPIOs (see Product Specification to see which ones) will be reserved for NFC and will not be available as
       normal GPIOs. */
    #if defined (CONFIG_NFCT_PINS_AS_GPIOS) && defined(NFCT_PRESENT)
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    33ea:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    33ee:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    33f2:	f013 0f01 	tst.w	r3, #1
    33f6:	d10e      	bne.n	3416 <SystemInit+0x162>

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    33f8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    33fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3400:	2b00      	cmp	r3, #0
    3402:	db1a      	blt.n	343a <SystemInit+0x186>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    3404:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3408:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    340c:	2b00      	cmp	r3, #0
    340e:	db14      	blt.n	343a <SystemInit+0x186>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    3410:	f7ff ff48 	bl	32a4 <SystemCoreClockUpdate>
}
    3414:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    3416:	2001      	movs	r0, #1
    3418:	f7ff ff3a 	bl	3290 <nvmc_config>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    341c:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    3420:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    3424:	f023 0301 	bic.w	r3, r3, #1
    3428:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            nvmc_wait();
    342c:	f7ff ff28 	bl	3280 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    3430:	2000      	movs	r0, #0
    3432:	f7ff ff2d 	bl	3290 <nvmc_config>
            NVIC_SystemReset();
    3436:	f7ff ff11 	bl	325c <__NVIC_SystemReset>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    343a:	2001      	movs	r0, #1
    343c:	f7ff ff28 	bl	3290 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    3440:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    3444:	2512      	movs	r5, #18
    3446:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    344a:	f7ff ff19 	bl	3280 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    344e:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    3452:	f7ff ff15 	bl	3280 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    3456:	2000      	movs	r0, #0
    3458:	f7ff ff1a 	bl	3290 <nvmc_config>
            NVIC_SystemReset();
    345c:	f7ff fefe 	bl	325c <__NVIC_SystemReset>
    3460:	4000c000 	.word	0x4000c000
    3464:	40005000 	.word	0x40005000
    3468:	00038148 	.word	0x00038148
    346c:	4000f000 	.word	0x4000f000
    3470:	40029000 	.word	0x40029000

00003474 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    3474:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    3476:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    3478:	fab4 f384 	clz	r3, r4
    347c:	f1c3 031f 	rsb	r3, r3, #31
    3480:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    3484:	2b00      	cmp	r3, #0
    3486:	db16      	blt.n	34b6 <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    3488:	2201      	movs	r2, #1
    348a:	fa02 f303 	lsl.w	r3, r2, r3
    348e:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3492:	f3bf 8f5b 	dmb	ish
    3496:	e850 2f00 	ldrex	r2, [r0]
    349a:	42a2      	cmp	r2, r4
    349c:	d104      	bne.n	34a8 <nrfx_flag32_alloc+0x34>
    349e:	e840 3e00 	strex	lr, r3, [r0]
    34a2:	f1be 0f00 	cmp.w	lr, #0
    34a6:	d1f6      	bne.n	3496 <nrfx_flag32_alloc+0x22>
    34a8:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    34ac:	d1e3      	bne.n	3476 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    34ae:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    34b2:	4802      	ldr	r0, [pc, #8]	; (34bc <nrfx_flag32_alloc+0x48>)
}
    34b4:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    34b6:	4802      	ldr	r0, [pc, #8]	; (34c0 <nrfx_flag32_alloc+0x4c>)
    34b8:	e7fc      	b.n	34b4 <nrfx_flag32_alloc+0x40>
    34ba:	bf00      	nop
    34bc:	0bad0000 	.word	0x0bad0000
    34c0:	0bad0002 	.word	0x0bad0002

000034c4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    34c4:	6803      	ldr	r3, [r0, #0]
    34c6:	40cb      	lsrs	r3, r1
    34c8:	f013 0f01 	tst.w	r3, #1
    34cc:	d115      	bne.n	34fa <nrfx_flag32_free+0x36>
{
    34ce:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    34d0:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    34d2:	2301      	movs	r3, #1
    34d4:	408b      	lsls	r3, r1
    34d6:	4313      	orrs	r3, r2
    34d8:	f3bf 8f5b 	dmb	ish
    34dc:	e850 cf00 	ldrex	ip, [r0]
    34e0:	4594      	cmp	ip, r2
    34e2:	d104      	bne.n	34ee <nrfx_flag32_free+0x2a>
    34e4:	e840 3e00 	strex	lr, r3, [r0]
    34e8:	f1be 0f00 	cmp.w	lr, #0
    34ec:	d1f6      	bne.n	34dc <nrfx_flag32_free+0x18>
    34ee:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    34f2:	d1ed      	bne.n	34d0 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    34f4:	4802      	ldr	r0, [pc, #8]	; (3500 <nrfx_flag32_free+0x3c>)
}
    34f6:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    34fa:	4802      	ldr	r0, [pc, #8]	; (3504 <nrfx_flag32_free+0x40>)
}
    34fc:	4770      	bx	lr
    34fe:	bf00      	nop
    3500:	0bad0000 	.word	0x0bad0000
    3504:	0bad0004 	.word	0x0bad0004

00003508 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    3508:	b570      	push	{r4, r5, r6, lr}
    350a:	b082      	sub	sp, #8
    switch (domain)
    350c:	4605      	mov	r5, r0
    350e:	b118      	cbz	r0, 3518 <clock_stop+0x10>
    3510:	2801      	cmp	r0, #1
    3512:	d016      	beq.n	3542 <clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    3514:	b002      	add	sp, #8
    3516:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
    3518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    351c:	2202      	movs	r2, #2
    351e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3522:	2200      	movs	r2, #0
    3524:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    3528:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    352c:	2201      	movs	r2, #1
    352e:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    3530:	2301      	movs	r3, #1
    3532:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    3536:	429d      	cmp	r5, r3
    3538:	d00f      	beq.n	355a <clock_stop+0x52>
    353a:	2600      	movs	r6, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    353c:	f242 7410 	movw	r4, #10000	; 0x2710
    3540:	e029      	b.n	3596 <clock_stop+0x8e>
    p_reg->INTENCLR = mask;
    3542:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3546:	2201      	movs	r2, #1
    3548:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    354c:	2100      	movs	r1, #0
    354e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    3552:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3556:	605a      	str	r2, [r3, #4]
}
    3558:	e7ea      	b.n	3530 <clock_stop+0x28>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    355a:	f10d 0607 	add.w	r6, sp, #7
    355e:	e7ed      	b.n	353c <clock_stop+0x34>
            if (p_clk_src != NULL)
    3560:	b136      	cbz	r6, 3570 <clock_stop+0x68>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3562:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3566:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    356a:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    356e:	6033      	str	r3, [r6, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3574:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    3578:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    357c:	d122      	bne.n	35c4 <clock_stop+0xbc>
    return false;
    357e:	2300      	movs	r3, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    3580:	b323      	cbz	r3, 35cc <clock_stop+0xc4>
    3582:	b11e      	cbz	r6, 358c <clock_stop+0x84>
    3584:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3588:	2b01      	cmp	r3, #1
    358a:	d11f      	bne.n	35cc <clock_stop+0xc4>
    358c:	2001      	movs	r0, #1
    358e:	f003 ff5e 	bl	744e <nrfx_busy_wait>
    3592:	3c01      	subs	r4, #1
    3594:	d01a      	beq.n	35cc <clock_stop+0xc4>
    switch (domain)
    3596:	2d00      	cmp	r5, #0
    3598:	d0e2      	beq.n	3560 <clock_stop+0x58>
    359a:	2d01      	cmp	r5, #1
    359c:	d001      	beq.n	35a2 <clock_stop+0x9a>
    359e:	2300      	movs	r3, #0
    35a0:	e7ee      	b.n	3580 <clock_stop+0x78>
            if (p_clk_src != NULL)
    35a2:	b136      	cbz	r6, 35b2 <clock_stop+0xaa>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    35a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    35a8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    35ac:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    35b0:	7033      	strb	r3, [r6, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    35b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    35b6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    35ba:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    35be:	d103      	bne.n	35c8 <clock_stop+0xc0>
    return false;
    35c0:	2300      	movs	r3, #0
    35c2:	e7dd      	b.n	3580 <clock_stop+0x78>
                return true;
    35c4:	2301      	movs	r3, #1
    35c6:	e7db      	b.n	3580 <clock_stop+0x78>
                return true;
    35c8:	2301      	movs	r3, #1
    35ca:	e7d9      	b.n	3580 <clock_stop+0x78>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    35cc:	2d01      	cmp	r5, #1
    35ce:	d1a1      	bne.n	3514 <clock_stop+0xc>
            m_clock_cb.hfclk_started = false;
    35d0:	4b01      	ldr	r3, [pc, #4]	; (35d8 <clock_stop+0xd0>)
    35d2:	2200      	movs	r2, #0
    35d4:	715a      	strb	r2, [r3, #5]
    35d6:	e79d      	b.n	3514 <clock_stop+0xc>
    35d8:	20000c38 	.word	0x20000c38

000035dc <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    35dc:	4b06      	ldr	r3, [pc, #24]	; (35f8 <nrfx_clock_init+0x1c>)
    35de:	791b      	ldrb	r3, [r3, #4]
    35e0:	b93b      	cbnz	r3, 35f2 <nrfx_clock_init+0x16>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    35e2:	4b05      	ldr	r3, [pc, #20]	; (35f8 <nrfx_clock_init+0x1c>)
    35e4:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    35e6:	2201      	movs	r2, #1
    35e8:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    35ea:	2200      	movs	r2, #0
    35ec:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    35ee:	4803      	ldr	r0, [pc, #12]	; (35fc <nrfx_clock_init+0x20>)
    35f0:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    35f2:	4803      	ldr	r0, [pc, #12]	; (3600 <nrfx_clock_init+0x24>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    35f4:	4770      	bx	lr
    35f6:	bf00      	nop
    35f8:	20000c38 	.word	0x20000c38
    35fc:	0bad0000 	.word	0x0bad0000
    3600:	0bad000c 	.word	0x0bad000c

00003604 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    3604:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3606:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    360a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    360e:	b18b      	cbz	r3, 3634 <nrfx_power_clock_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3610:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3614:	2200      	movs	r2, #0
    3616:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    361a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    361e:	2201      	movs	r2, #1
    3620:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    3624:	4b15      	ldr	r3, [pc, #84]	; (367c <nrfx_power_clock_irq_handler+0x78>)
    3626:	795b      	ldrb	r3, [r3, #5]
    3628:	b923      	cbnz	r3, 3634 <nrfx_power_clock_irq_handler+0x30>
        {
            m_clock_cb.hfclk_started = true;
    362a:	4b14      	ldr	r3, [pc, #80]	; (367c <nrfx_power_clock_irq_handler+0x78>)
    362c:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    362e:	681b      	ldr	r3, [r3, #0]
    3630:	2000      	movs	r0, #0
    3632:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3634:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3638:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    363c:	b19b      	cbz	r3, 3666 <nrfx_power_clock_irq_handler+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    363e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3642:	2200      	movs	r2, #0
    3644:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    3648:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    364c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3650:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    3654:	f012 0f03 	tst.w	r2, #3
    3658:	d106      	bne.n	3668 <nrfx_power_clock_irq_handler+0x64>
    p_reg->LFCLKSRC = (uint32_t)(source);
    365a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    365e:	2201      	movs	r2, #1
    3660:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3664:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3666:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    3668:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    366c:	2202      	movs	r2, #2
    366e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3672:	4b02      	ldr	r3, [pc, #8]	; (367c <nrfx_power_clock_irq_handler+0x78>)
    3674:	681b      	ldr	r3, [r3, #0]
    3676:	2001      	movs	r0, #1
    3678:	4798      	blx	r3
}
    367a:	e7f4      	b.n	3666 <nrfx_power_clock_irq_handler+0x62>
    367c:	20000c38 	.word	0x20000c38

00003680 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3680:	3008      	adds	r0, #8
    3682:	4b03      	ldr	r3, [pc, #12]	; (3690 <pin_in_use+0x10>)
    3684:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3688:	f000 0001 	and.w	r0, r0, #1
    368c:	4770      	bx	lr
    368e:	bf00      	nop
    3690:	2000034c 	.word	0x2000034c

00003694 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3694:	3008      	adds	r0, #8
    3696:	4b03      	ldr	r3, [pc, #12]	; (36a4 <pin_in_use_by_te+0x10>)
    3698:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    369c:	f3c0 1040 	ubfx	r0, r0, #5, #1
    36a0:	4770      	bx	lr
    36a2:	bf00      	nop
    36a4:	2000034c 	.word	0x2000034c

000036a8 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    36a8:	3008      	adds	r0, #8
    36aa:	4b04      	ldr	r3, [pc, #16]	; (36bc <pin_has_trigger+0x14>)
    36ac:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    36b0:	f010 001c 	ands.w	r0, r0, #28
    36b4:	bf18      	it	ne
    36b6:	2001      	movne	r0, #1
    36b8:	4770      	bx	lr
    36ba:	bf00      	nop
    36bc:	2000034c 	.word	0x2000034c

000036c0 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    36c0:	3008      	adds	r0, #8
    36c2:	4b03      	ldr	r3, [pc, #12]	; (36d0 <pin_is_output+0x10>)
    36c4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    36c8:	f3c0 0040 	ubfx	r0, r0, #1, #1
    36cc:	4770      	bx	lr
    36ce:	bf00      	nop
    36d0:	2000034c 	.word	0x2000034c

000036d4 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    36d4:	3008      	adds	r0, #8
    36d6:	4b02      	ldr	r3, [pc, #8]	; (36e0 <pin_te_get+0xc>)
    36d8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    36dc:	0b40      	lsrs	r0, r0, #13
    36de:	4770      	bx	lr
    36e0:	2000034c 	.word	0x2000034c

000036e4 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    36e4:	2200      	movs	r2, #0
    36e6:	e004      	b.n	36f2 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    36e8:	f04f 33ff 	mov.w	r3, #4294967295
    36ec:	4283      	cmp	r3, r0
    36ee:	d00f      	beq.n	3710 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    36f0:	3201      	adds	r2, #1
    36f2:	2a2f      	cmp	r2, #47	; 0x2f
    36f4:	d80a      	bhi.n	370c <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    36f6:	f102 0308 	add.w	r3, r2, #8
    36fa:	4906      	ldr	r1, [pc, #24]	; (3714 <handler_in_use+0x30>)
    36fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    3700:	f413 7f80 	tst.w	r3, #256	; 0x100
    3704:	d0f0      	beq.n	36e8 <handler_in_use+0x4>
    3706:	f3c3 2343 	ubfx	r3, r3, #9, #4
    370a:	e7ef      	b.n	36ec <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    370c:	2000      	movs	r0, #0
    370e:	4770      	bx	lr
            return true;
    3710:	2001      	movs	r0, #1
}
    3712:	4770      	bx	lr
    3714:	2000034c 	.word	0x2000034c

00003718 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    3718:	2300      	movs	r3, #0
    371a:	b113      	cbz	r3, 3722 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    371c:	f04f 30ff 	mov.w	r0, #4294967295
}
    3720:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3722:	4a07      	ldr	r2, [pc, #28]	; (3740 <find_handler+0x28>)
    3724:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    3728:	4282      	cmp	r2, r0
    372a:	d001      	beq.n	3730 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    372c:	3301      	adds	r3, #1
    372e:	e7f4      	b.n	371a <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3730:	4a03      	ldr	r2, [pc, #12]	; (3740 <find_handler+0x28>)
    3732:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    3736:	6852      	ldr	r2, [r2, #4]
    3738:	428a      	cmp	r2, r1
    373a:	d1f7      	bne.n	372c <find_handler+0x14>
            return i;
    373c:	4618      	mov	r0, r3
    373e:	4770      	bx	lr
    3740:	2000034c 	.word	0x2000034c

00003744 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3744:	3008      	adds	r0, #8
    3746:	4b06      	ldr	r3, [pc, #24]	; (3760 <channel_handler_get+0x1c>)
    3748:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    374c:	f410 7f80 	tst.w	r0, #256	; 0x100
    3750:	d004      	beq.n	375c <channel_handler_get+0x18>
    3752:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    3756:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    375a:	4770      	bx	lr
        return NULL;
    375c:	2000      	movs	r0, #0
}
    375e:	4770      	bx	lr
    3760:	2000034c 	.word	0x2000034c

00003764 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    3764:	b570      	push	{r4, r5, r6, lr}
    3766:	4604      	mov	r4, r0
    3768:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    376a:	f7ff ffeb 	bl	3744 <channel_handler_get>

    if (handler)
    376e:	b120      	cbz	r0, 377a <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    3770:	6806      	ldr	r6, [r0, #0]
    3772:	6842      	ldr	r2, [r0, #4]
    3774:	4629      	mov	r1, r5
    3776:	4620      	mov	r0, r4
    3778:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    377a:	4b04      	ldr	r3, [pc, #16]	; (378c <call_handler+0x28>)
    377c:	689b      	ldr	r3, [r3, #8]
    377e:	b123      	cbz	r3, 378a <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3780:	4a02      	ldr	r2, [pc, #8]	; (378c <call_handler+0x28>)
    3782:	68d2      	ldr	r2, [r2, #12]
    3784:	4629      	mov	r1, r5
    3786:	4620      	mov	r0, r4
    3788:	4798      	blx	r3
    }
}
    378a:	bd70      	pop	{r4, r5, r6, pc}
    378c:	2000034c 	.word	0x2000034c

00003790 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3790:	f100 0208 	add.w	r2, r0, #8
    3794:	4b0e      	ldr	r3, [pc, #56]	; (37d0 <release_handler+0x40>)
    3796:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    379a:	f413 7f80 	tst.w	r3, #256	; 0x100
    379e:	d016      	beq.n	37ce <release_handler+0x3e>
{
    37a0:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    37a2:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    37a6:	4610      	mov	r0, r2
    37a8:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    37ac:	4a08      	ldr	r2, [pc, #32]	; (37d0 <release_handler+0x40>)
    37ae:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    37b2:	4620      	mov	r0, r4
    37b4:	f7ff ff96 	bl	36e4 <handler_in_use>
    37b8:	b100      	cbz	r0, 37bc <release_handler+0x2c>
}
    37ba:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    37bc:	4804      	ldr	r0, [pc, #16]	; (37d0 <release_handler+0x40>)
    37be:	2300      	movs	r3, #0
    37c0:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    37c4:	4621      	mov	r1, r4
    37c6:	3074      	adds	r0, #116	; 0x74
    37c8:	f7ff fe7c 	bl	34c4 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    37cc:	e7f5      	b.n	37ba <release_handler+0x2a>
    37ce:	4770      	bx	lr
    37d0:	2000034c 	.word	0x2000034c

000037d4 <pin_handler_trigger_uninit>:
{
    37d4:	b510      	push	{r4, lr}
    37d6:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    37d8:	f7ff ff5c 	bl	3694 <pin_in_use_by_te>
    37dc:	b140      	cbz	r0, 37f0 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    37de:	4620      	mov	r0, r4
    37e0:	f7ff ff78 	bl	36d4 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    37e4:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    37e8:	4b06      	ldr	r3, [pc, #24]	; (3804 <pin_handler_trigger_uninit+0x30>)
    37ea:	2200      	movs	r2, #0
    37ec:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    37f0:	4620      	mov	r0, r4
    37f2:	f7ff ffcd 	bl	3790 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    37f6:	3408      	adds	r4, #8
    37f8:	4b03      	ldr	r3, [pc, #12]	; (3808 <pin_handler_trigger_uninit+0x34>)
    37fa:	2200      	movs	r2, #0
    37fc:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    3800:	bd10      	pop	{r4, pc}
    3802:	bf00      	nop
    3804:	40006000 	.word	0x40006000
    3808:	2000034c 	.word	0x2000034c

0000380c <pin_handler_set>:
{
    380c:	b570      	push	{r4, r5, r6, lr}
    380e:	b082      	sub	sp, #8
    3810:	4606      	mov	r6, r0
    3812:	460c      	mov	r4, r1
    3814:	4615      	mov	r5, r2
    release_handler(pin);
    3816:	f7ff ffbb 	bl	3790 <release_handler>
    if (!handler)
    381a:	b324      	cbz	r4, 3866 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    381c:	4629      	mov	r1, r5
    381e:	4620      	mov	r0, r4
    3820:	f7ff ff7a 	bl	3718 <find_handler>
    if (handler_id < 0)
    3824:	1e03      	subs	r3, r0, #0
    3826:	db13      	blt.n	3850 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    3828:	4a10      	ldr	r2, [pc, #64]	; (386c <pin_handler_set+0x60>)
    382a:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    382e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    3832:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3834:	025b      	lsls	r3, r3, #9
    3836:	b29b      	uxth	r3, r3
    3838:	f106 0008 	add.w	r0, r6, #8
    383c:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    3840:	430b      	orrs	r3, r1
    3842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3846:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    384a:	4809      	ldr	r0, [pc, #36]	; (3870 <pin_handler_set+0x64>)
}
    384c:	b002      	add	sp, #8
    384e:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    3850:	f10d 0107 	add.w	r1, sp, #7
    3854:	4807      	ldr	r0, [pc, #28]	; (3874 <pin_handler_set+0x68>)
    3856:	f7ff fe0d 	bl	3474 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    385a:	4b05      	ldr	r3, [pc, #20]	; (3870 <pin_handler_set+0x64>)
    385c:	4298      	cmp	r0, r3
    385e:	d1f5      	bne.n	384c <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    3860:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3864:	e7e0      	b.n	3828 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    3866:	4802      	ldr	r0, [pc, #8]	; (3870 <pin_handler_set+0x64>)
    3868:	e7f0      	b.n	384c <pin_handler_set+0x40>
    386a:	bf00      	nop
    386c:	2000034c 	.word	0x2000034c
    3870:	0bad0000 	.word	0x0bad0000
    3874:	200003c0 	.word	0x200003c0

00003878 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    3878:	b538      	push	{r3, r4, r5, lr}
    387a:	4604      	mov	r4, r0
    while (mask)
    387c:	e018      	b.n	38b0 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    387e:	fa94 f3a4 	rbit	r3, r4
    3882:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    3886:	2201      	movs	r2, #1
    3888:	409a      	lsls	r2, r3
    388a:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    388e:	4a0a      	ldr	r2, [pc, #40]	; (38b8 <gpiote_evt_handle+0x40>)
    3890:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    3894:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    3898:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    389c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    38a0:	f3c0 4001 	ubfx	r0, r0, #16, #2
    38a4:	f003 fe68 	bl	7578 <gpiote_polarity_to_trigger>
    38a8:	4601      	mov	r1, r0
    38aa:	4628      	mov	r0, r5
    38ac:	f7ff ff5a 	bl	3764 <call_handler>
    while (mask)
    38b0:	2c00      	cmp	r4, #0
    38b2:	d1e4      	bne.n	387e <gpiote_evt_handle+0x6>
    }
}
    38b4:	bd38      	pop	{r3, r4, r5, pc}
    38b6:	bf00      	nop
    38b8:	40006000 	.word	0x40006000

000038bc <latch_pending_read_and_check>:
{
    38bc:	b082      	sub	sp, #8
    38be:	4684      	mov	ip, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    38c0:	4b11      	ldr	r3, [pc, #68]	; (3908 <latch_pending_read_and_check+0x4c>)
    38c2:	e893 0003 	ldmia.w	r3, {r0, r1}
    38c6:	ab02      	add	r3, sp, #8
    38c8:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    38cc:	4660      	mov	r0, ip
    38ce:	2300      	movs	r3, #0
    38d0:	e00b      	b.n	38ea <latch_pending_read_and_check+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
    38d2:	aa02      	add	r2, sp, #8
    38d4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    38d8:	f852 2c08 	ldr.w	r2, [r2, #-8]
    38dc:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    38e0:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    38e4:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    38e8:	3301      	adds	r3, #1
    38ea:	2b01      	cmp	r3, #1
    38ec:	d9f1      	bls.n	38d2 <latch_pending_read_and_check+0x16>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    38ee:	2300      	movs	r3, #0
    38f0:	2b01      	cmp	r3, #1
    38f2:	d804      	bhi.n	38fe <latch_pending_read_and_check+0x42>
        if (latch[port_idx])
    38f4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
    38f8:	b922      	cbnz	r2, 3904 <latch_pending_read_and_check+0x48>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    38fa:	3301      	adds	r3, #1
    38fc:	e7f8      	b.n	38f0 <latch_pending_read_and_check+0x34>
    return false;
    38fe:	2000      	movs	r0, #0
}
    3900:	b002      	add	sp, #8
    3902:	4770      	bx	lr
            return true;
    3904:	2001      	movs	r0, #1
    3906:	e7fb      	b.n	3900 <latch_pending_read_and_check+0x44>
    3908:	00007e88 	.word	0x00007e88

0000390c <next_sense_cond_call_handler>:
{
    390c:	b570      	push	{r4, r5, r6, lr}
    390e:	4604      	mov	r4, r0
    3910:	460d      	mov	r5, r1
    3912:	4616      	mov	r6, r2
    if (is_level(trigger))
    3914:	4608      	mov	r0, r1
    3916:	f003 fe31 	bl	757c <is_level>
    391a:	b9d0      	cbnz	r0, 3952 <next_sense_cond_call_handler+0x46>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    391c:	2e02      	cmp	r6, #2
    391e:	d052      	beq.n	39c6 <next_sense_cond_call_handler+0xba>
    3920:	2002      	movs	r0, #2
    *p_pin = pin_number & 0x1F;
    3922:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    3926:	0961      	lsrs	r1, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3928:	2901      	cmp	r1, #1
    392a:	d04e      	beq.n	39ca <next_sense_cond_call_handler+0xbe>
        case 0: return NRF_P0;
    392c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3930:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    3934:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    3938:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    393c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    3940:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    3944:	2d03      	cmp	r5, #3
    3946:	d044      	beq.n	39d2 <next_sense_cond_call_handler+0xc6>
    3948:	2e02      	cmp	r6, #2
    394a:	d040      	beq.n	39ce <next_sense_cond_call_handler+0xc2>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    394c:	2e03      	cmp	r6, #3
    394e:	d045      	beq.n	39dc <next_sense_cond_call_handler+0xd0>
}
    3950:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
    3952:	4629      	mov	r1, r5
    3954:	4620      	mov	r0, r4
    3956:	f7ff ff05 	bl	3764 <call_handler>
    *p_pin = pin_number & 0x1F;
    395a:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    395e:	0962      	lsrs	r2, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3960:	2a01      	cmp	r2, #1
    3962:	d02a      	beq.n	39ba <next_sense_cond_call_handler+0xae>
        case 0: return NRF_P0;
    3964:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3968:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    396c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3970:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    3974:	429e      	cmp	r6, r3
    3976:	d1eb      	bne.n	3950 <next_sense_cond_call_handler+0x44>
    *p_pin = pin_number & 0x1F;
    3978:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    397c:	0962      	lsrs	r2, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    397e:	2a01      	cmp	r2, #1
    3980:	d01d      	beq.n	39be <next_sense_cond_call_handler+0xb2>
        case 0: return NRF_P0;
    3982:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3986:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    398a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    398e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    3992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    *p_pin = pin_number & 0x1F;
    3996:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    399a:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    399c:	2c01      	cmp	r4, #1
    399e:	d010      	beq.n	39c2 <next_sense_cond_call_handler+0xb6>
        case 0: return NRF_P0;
    39a0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    39a4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    39a8:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    39ac:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    39b0:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    39b4:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
    39b8:	e7ca      	b.n	3950 <next_sense_cond_call_handler+0x44>
        case 1: return NRF_P1;
    39ba:	4a0a      	ldr	r2, [pc, #40]	; (39e4 <next_sense_cond_call_handler+0xd8>)
    39bc:	e7d4      	b.n	3968 <next_sense_cond_call_handler+0x5c>
    39be:	4909      	ldr	r1, [pc, #36]	; (39e4 <next_sense_cond_call_handler+0xd8>)
    39c0:	e7e1      	b.n	3986 <next_sense_cond_call_handler+0x7a>
    39c2:	4908      	ldr	r1, [pc, #32]	; (39e4 <next_sense_cond_call_handler+0xd8>)
    39c4:	e7ee      	b.n	39a4 <next_sense_cond_call_handler+0x98>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    39c6:	2003      	movs	r0, #3
    39c8:	e7ab      	b.n	3922 <next_sense_cond_call_handler+0x16>
    39ca:	4906      	ldr	r1, [pc, #24]	; (39e4 <next_sense_cond_call_handler+0xd8>)
    39cc:	e7b0      	b.n	3930 <next_sense_cond_call_handler+0x24>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    39ce:	2d01      	cmp	r5, #1
    39d0:	d1bc      	bne.n	394c <next_sense_cond_call_handler+0x40>
            call_handler(pin, trigger);
    39d2:	4629      	mov	r1, r5
    39d4:	4620      	mov	r0, r4
    39d6:	f7ff fec5 	bl	3764 <call_handler>
}
    39da:	e7b9      	b.n	3950 <next_sense_cond_call_handler+0x44>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    39dc:	2d02      	cmp	r5, #2
    39de:	d1b7      	bne.n	3950 <next_sense_cond_call_handler+0x44>
    39e0:	e7f7      	b.n	39d2 <next_sense_cond_call_handler+0xc6>
    39e2:	bf00      	nop
    39e4:	50000300 	.word	0x50000300

000039e8 <port_event_handle>:
{
    39e8:	b570      	push	{r4, r5, r6, lr}
    39ea:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    39ec:	4a2f      	ldr	r2, [pc, #188]	; (3aac <port_event_handle+0xc4>)
    39ee:	466b      	mov	r3, sp
    39f0:	e892 0003 	ldmia.w	r2, {r0, r1}
    39f4:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    39f8:	2300      	movs	r3, #0
    39fa:	a802      	add	r0, sp, #8
    39fc:	e00b      	b.n	3a16 <port_event_handle+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
    39fe:	aa04      	add	r2, sp, #16
    3a00:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    3a04:	f852 2c10 	ldr.w	r2, [r2, #-16]
    3a08:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    3a0c:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    3a10:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    3a14:	3301      	adds	r3, #1
    3a16:	2b01      	cmp	r3, #1
    3a18:	d9f1      	bls.n	39fe <port_event_handle+0x16>
    3a1a:	e042      	b.n	3aa2 <port_event_handle+0xba>
        case 1: return NRF_P1;
    3a1c:	4e24      	ldr	r6, [pc, #144]	; (3ab0 <port_event_handle+0xc8>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3a1e:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    3a22:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
    3a26:	f3c2 4201 	ubfx	r2, r2, #16, #2
    3a2a:	f7ff ff6f 	bl	390c <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
    3a2e:	2301      	movs	r3, #1
    3a30:	40ab      	lsls	r3, r5
    3a32:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
            while (latch[i])
    3a36:	ab04      	add	r3, sp, #16
    3a38:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    3a3c:	f853 0c08 	ldr.w	r0, [r3, #-8]
    3a40:	b310      	cbz	r0, 3a88 <port_event_handle+0xa0>
                uint32_t pin = NRF_CTZ(latch[i]);
    3a42:	fa90 f0a0 	rbit	r0, r0
    3a46:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
    3a4a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3a4e:	f100 0208 	add.w	r2, r0, #8
    3a52:	4b18      	ldr	r3, [pc, #96]	; (3ab4 <port_event_handle+0xcc>)
    3a54:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
    3a58:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    3a5c:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
    3a5e:	f000 0207 	and.w	r2, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    3a62:	f10d 0c08 	add.w	ip, sp, #8
    3a66:	2301      	movs	r3, #1
    3a68:	fa03 f202 	lsl.w	r2, r3, r2
    3a6c:	f81c 3005 	ldrb.w	r3, [ip, r5]
    3a70:	ea23 0302 	bic.w	r3, r3, r2
    3a74:	f80c 3005 	strb.w	r3, [ip, r5]
    *p_pin = pin_number & 0x1F;
    3a78:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
    3a7c:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3a7e:	2b01      	cmp	r3, #1
    3a80:	d0cc      	beq.n	3a1c <port_event_handle+0x34>
        case 0: return NRF_P0;
    3a82:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    3a86:	e7ca      	b.n	3a1e <port_event_handle+0x36>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    3a88:	3401      	adds	r4, #1
    3a8a:	2c01      	cmp	r4, #1
    3a8c:	d9d3      	bls.n	3a36 <port_event_handle+0x4e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3a8e:	4b0a      	ldr	r3, [pc, #40]	; (3ab8 <port_event_handle+0xd0>)
    3a90:	2200      	movs	r2, #0
    3a92:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    3a96:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    } while (latch_pending_read_and_check(latch));
    3a9a:	a802      	add	r0, sp, #8
    3a9c:	f7ff ff0e 	bl	38bc <latch_pending_read_and_check>
    3aa0:	b108      	cbz	r0, 3aa6 <port_event_handle+0xbe>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    3aa2:	2400      	movs	r4, #0
    3aa4:	e7f1      	b.n	3a8a <port_event_handle+0xa2>
}
    3aa6:	b004      	add	sp, #16
    3aa8:	bd70      	pop	{r4, r5, r6, pc}
    3aaa:	bf00      	nop
    3aac:	00007e88 	.word	0x00007e88
    3ab0:	50000300 	.word	0x50000300
    3ab4:	2000034c 	.word	0x2000034c
    3ab8:	40006000 	.word	0x40006000

00003abc <nrfx_gpiote_input_configure>:
{
    3abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ac0:	4604      	mov	r4, r0
    3ac2:	4615      	mov	r5, r2
    3ac4:	461e      	mov	r6, r3
    if (p_input_config)
    3ac6:	b371      	cbz	r1, 3b26 <nrfx_gpiote_input_configure+0x6a>
    3ac8:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
    3aca:	f003 fd3f 	bl	754c <pin_is_task_output>
    3ace:	2800      	cmp	r0, #0
    3ad0:	f040 8099 	bne.w	3c06 <nrfx_gpiote_input_configure+0x14a>
    *p_pin = pin_number & 0x1F;
    3ad4:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    3ad8:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3ada:	2b01      	cmp	r3, #1
    3adc:	d045      	beq.n	3b6a <nrfx_gpiote_input_configure+0xae>
        case 0: return NRF_P0;
    3ade:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3ae2:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    3ae6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    3aea:	2f00      	cmp	r7, #0
    3aec:	d03f      	beq.n	3b6e <nrfx_gpiote_input_configure+0xb2>
    3aee:	210c      	movs	r1, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    3af0:	f041 0103 	orr.w	r1, r1, #3
    cnf &= ~to_update;
    3af4:	ea23 0301 	bic.w	r3, r3, r1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    3af8:	2f00      	cmp	r7, #0
    3afa:	d03a      	beq.n	3b72 <nrfx_gpiote_input_configure+0xb6>
    3afc:	7839      	ldrb	r1, [r7, #0]
    3afe:	0089      	lsls	r1, r1, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3b00:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    3b02:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    3b06:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    3b0a:	4a43      	ldr	r2, [pc, #268]	; (3c18 <nrfx_gpiote_input_configure+0x15c>)
    3b0c:	f104 0108 	add.w	r1, r4, #8
    3b10:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3b14:	f023 0302 	bic.w	r3, r3, #2
    3b18:	b29b      	uxth	r3, r3
    3b1a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    3b1e:	f043 0301 	orr.w	r3, r3, #1
    3b22:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    3b26:	b1bd      	cbz	r5, 3b58 <nrfx_gpiote_input_configure+0x9c>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    3b28:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    3b2a:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    3b2e:	4620      	mov	r0, r4
    3b30:	f7ff fdc6 	bl	36c0 <pin_is_output>
    3b34:	b1f8      	cbz	r0, 3b76 <nrfx_gpiote_input_configure+0xba>
            if (use_evt)
    3b36:	f1b8 0f00 	cmp.w	r8, #0
    3b3a:	d166      	bne.n	3c0a <nrfx_gpiote_input_configure+0x14e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    3b3c:	4a36      	ldr	r2, [pc, #216]	; (3c18 <nrfx_gpiote_input_configure+0x15c>)
    3b3e:	f104 0108 	add.w	r1, r4, #8
    3b42:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3b46:	f023 031c 	bic.w	r3, r3, #28
    3b4a:	b29b      	uxth	r3, r3
    3b4c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    3b50:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    3b54:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    3b58:	2e00      	cmp	r6, #0
    3b5a:	d05a      	beq.n	3c12 <nrfx_gpiote_input_configure+0x156>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    3b5c:	6872      	ldr	r2, [r6, #4]
    3b5e:	6831      	ldr	r1, [r6, #0]
    3b60:	4620      	mov	r0, r4
    3b62:	f7ff fe53 	bl	380c <pin_handler_set>
}
    3b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        case 1: return NRF_P1;
    3b6a:	482c      	ldr	r0, [pc, #176]	; (3c1c <nrfx_gpiote_input_configure+0x160>)
    3b6c:	e7b9      	b.n	3ae2 <nrfx_gpiote_input_configure+0x26>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    3b6e:	2100      	movs	r1, #0
    3b70:	e7be      	b.n	3af0 <nrfx_gpiote_input_configure+0x34>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    3b72:	2100      	movs	r1, #0
    3b74:	e7c4      	b.n	3b00 <nrfx_gpiote_input_configure+0x44>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    3b76:	4a28      	ldr	r2, [pc, #160]	; (3c18 <nrfx_gpiote_input_configure+0x15c>)
    3b78:	f104 0108 	add.w	r1, r4, #8
    3b7c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3b80:	f023 0320 	bic.w	r3, r3, #32
    3b84:	04db      	lsls	r3, r3, #19
    3b86:	0cdb      	lsrs	r3, r3, #19
    3b88:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    3b8c:	f1b8 0f00 	cmp.w	r8, #0
    3b90:	d0d4      	beq.n	3b3c <nrfx_gpiote_input_configure+0x80>
                if (!edge)
    3b92:	2f03      	cmp	r7, #3
    3b94:	d83b      	bhi.n	3c0e <nrfx_gpiote_input_configure+0x152>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3b96:	686b      	ldr	r3, [r5, #4]
    3b98:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3b9a:	b937      	cbnz	r7, 3baa <nrfx_gpiote_input_configure+0xee>
    p_reg->CONFIG[idx] = 0;
    3b9c:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    3ba0:	4b1f      	ldr	r3, [pc, #124]	; (3c20 <nrfx_gpiote_input_configure+0x164>)
    3ba2:	2200      	movs	r2, #0
    3ba4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    3ba8:	e7c8      	b.n	3b3c <nrfx_gpiote_input_configure+0x80>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    3baa:	4638      	mov	r0, r7
    3bac:	f003 fce5 	bl	757a <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3bb0:	4b1b      	ldr	r3, [pc, #108]	; (3c20 <nrfx_gpiote_input_configure+0x164>)
    3bb2:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    3bb6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    3bba:	f021 0103 	bic.w	r1, r1, #3
    3bbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3bc2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    3bc6:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    3bca:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    3bce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3bd2:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    3bd6:	0221      	lsls	r1, r4, #8
    3bd8:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    3bdc:	0400      	lsls	r0, r0, #16
    3bde:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3be2:	4301      	orrs	r1, r0
    3be4:	ea4c 0101 	orr.w	r1, ip, r1
    3be8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3bec:	036b      	lsls	r3, r5, #13
    3bee:	b29b      	uxth	r3, r3
    3bf0:	4a09      	ldr	r2, [pc, #36]	; (3c18 <nrfx_gpiote_input_configure+0x15c>)
    3bf2:	f104 0108 	add.w	r1, r4, #8
    3bf6:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
    3bfa:	4303      	orrs	r3, r0
    3bfc:	f043 0320 	orr.w	r3, r3, #32
    3c00:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    3c04:	e79a      	b.n	3b3c <nrfx_gpiote_input_configure+0x80>
            return NRFX_ERROR_INVALID_PARAM;
    3c06:	4807      	ldr	r0, [pc, #28]	; (3c24 <nrfx_gpiote_input_configure+0x168>)
    3c08:	e7ad      	b.n	3b66 <nrfx_gpiote_input_configure+0xaa>
                return NRFX_ERROR_INVALID_PARAM;
    3c0a:	4806      	ldr	r0, [pc, #24]	; (3c24 <nrfx_gpiote_input_configure+0x168>)
    3c0c:	e7ab      	b.n	3b66 <nrfx_gpiote_input_configure+0xaa>
                    return NRFX_ERROR_INVALID_PARAM;
    3c0e:	4805      	ldr	r0, [pc, #20]	; (3c24 <nrfx_gpiote_input_configure+0x168>)
    3c10:	e7a9      	b.n	3b66 <nrfx_gpiote_input_configure+0xaa>
        err = NRFX_SUCCESS;
    3c12:	4805      	ldr	r0, [pc, #20]	; (3c28 <nrfx_gpiote_input_configure+0x16c>)
    3c14:	e7a7      	b.n	3b66 <nrfx_gpiote_input_configure+0xaa>
    3c16:	bf00      	nop
    3c18:	2000034c 	.word	0x2000034c
    3c1c:	50000300 	.word	0x50000300
    3c20:	40006000 	.word	0x40006000
    3c24:	0bad0004 	.word	0x0bad0004
    3c28:	0bad0000 	.word	0x0bad0000

00003c2c <nrfx_gpiote_output_configure>:
{
    3c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c2e:	4604      	mov	r4, r0
    3c30:	4615      	mov	r5, r2
    if (p_config)
    3c32:	2900      	cmp	r1, #0
    3c34:	d055      	beq.n	3ce2 <nrfx_gpiote_output_configure+0xb6>
    3c36:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    3c38:	f003 fc97 	bl	756a <pin_is_input>
    3c3c:	b128      	cbz	r0, 3c4a <nrfx_gpiote_output_configure+0x1e>
    3c3e:	4620      	mov	r0, r4
    3c40:	f7ff fd28 	bl	3694 <pin_in_use_by_te>
    3c44:	2800      	cmp	r0, #0
    3c46:	f040 80a2 	bne.w	3d8e <nrfx_gpiote_output_configure+0x162>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    3c4a:	4620      	mov	r0, r4
    3c4c:	f7ff fd2c 	bl	36a8 <pin_has_trigger>
    3c50:	b118      	cbz	r0, 3c5a <nrfx_gpiote_output_configure+0x2e>
    3c52:	7873      	ldrb	r3, [r6, #1]
    3c54:	2b01      	cmp	r3, #1
    3c56:	f000 809c 	beq.w	3d92 <nrfx_gpiote_output_configure+0x166>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    3c5a:	f106 0c01 	add.w	ip, r6, #1
    3c5e:	1cb7      	adds	r7, r6, #2
    *p_pin = pin_number & 0x1F;
    3c60:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    3c64:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3c66:	2b01      	cmp	r3, #1
    3c68:	d057      	beq.n	3d1a <nrfx_gpiote_output_configure+0xee>
        case 0: return NRF_P0;
    3c6a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3c6e:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    3c72:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    3c76:	f1bc 0f00 	cmp.w	ip, #0
    3c7a:	d050      	beq.n	3d1e <nrfx_gpiote_output_configure+0xf2>
    3c7c:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    3c7e:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    3c82:	2f00      	cmp	r7, #0
    3c84:	d04d      	beq.n	3d22 <nrfx_gpiote_output_configure+0xf6>
    3c86:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    3c8a:	ea43 030e 	orr.w	r3, r3, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    3c8e:	2e00      	cmp	r6, #0
    3c90:	d04a      	beq.n	3d28 <nrfx_gpiote_output_configure+0xfc>
    3c92:	f44f 6ee0 	mov.w	lr, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    3c96:	ea43 030e 	orr.w	r3, r3, lr
    cnf &= ~to_update;
    3c9a:	ea20 0003 	bic.w	r0, r0, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    3c9e:	f1bc 0f00 	cmp.w	ip, #0
    3ca2:	d044      	beq.n	3d2e <nrfx_gpiote_output_configure+0x102>
    3ca4:	7873      	ldrb	r3, [r6, #1]
    3ca6:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3ca8:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    3cac:	2f00      	cmp	r7, #0
    3cae:	d040      	beq.n	3d32 <nrfx_gpiote_output_configure+0x106>
    3cb0:	f896 c002 	ldrb.w	ip, [r6, #2]
    3cb4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    3cb8:	ea43 030c 	orr.w	r3, r3, ip
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    3cbc:	2e00      	cmp	r6, #0
    3cbe:	d03b      	beq.n	3d38 <nrfx_gpiote_output_configure+0x10c>
    3cc0:	7836      	ldrb	r6, [r6, #0]
    3cc2:	0236      	lsls	r6, r6, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    3cc4:	4333      	orrs	r3, r6
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3cc6:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
    3cc8:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    3ccc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    3cd0:	4a33      	ldr	r2, [pc, #204]	; (3da0 <nrfx_gpiote_output_configure+0x174>)
    3cd2:	f104 0108 	add.w	r1, r4, #8
    3cd6:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3cda:	f043 0303 	orr.w	r3, r3, #3
    3cde:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    3ce2:	2d00      	cmp	r5, #0
    3ce4:	d057      	beq.n	3d96 <nrfx_gpiote_output_configure+0x16a>
        if (pin_is_input(pin))
    3ce6:	4620      	mov	r0, r4
    3ce8:	f003 fc3f 	bl	756a <pin_is_input>
    3cec:	2800      	cmp	r0, #0
    3cee:	d154      	bne.n	3d9a <nrfx_gpiote_output_configure+0x16e>
        uint32_t ch = p_task_config->task_ch;
    3cf0:	782b      	ldrb	r3, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    3cf2:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    3cf6:	4a2b      	ldr	r2, [pc, #172]	; (3da4 <nrfx_gpiote_output_configure+0x178>)
    3cf8:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3cfc:	4928      	ldr	r1, [pc, #160]	; (3da0 <nrfx_gpiote_output_configure+0x174>)
    3cfe:	f104 0008 	add.w	r0, r4, #8
    3d02:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    3d06:	f022 0220 	bic.w	r2, r2, #32
    3d0a:	04d2      	lsls	r2, r2, #19
    3d0c:	0cd2      	lsrs	r2, r2, #19
    3d0e:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    3d12:	786a      	ldrb	r2, [r5, #1]
    3d14:	b992      	cbnz	r2, 3d3c <nrfx_gpiote_output_configure+0x110>
    return NRFX_SUCCESS;
    3d16:	4824      	ldr	r0, [pc, #144]	; (3da8 <nrfx_gpiote_output_configure+0x17c>)
}
    3d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
    3d1a:	4924      	ldr	r1, [pc, #144]	; (3dac <nrfx_gpiote_output_configure+0x180>)
    3d1c:	e7a7      	b.n	3c6e <nrfx_gpiote_output_configure+0x42>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    3d1e:	2300      	movs	r3, #0
    3d20:	e7ad      	b.n	3c7e <nrfx_gpiote_output_configure+0x52>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    3d22:	f04f 0e00 	mov.w	lr, #0
    3d26:	e7b0      	b.n	3c8a <nrfx_gpiote_output_configure+0x5e>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    3d28:	f04f 0e00 	mov.w	lr, #0
    3d2c:	e7b3      	b.n	3c96 <nrfx_gpiote_output_configure+0x6a>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    3d2e:	2300      	movs	r3, #0
    3d30:	e7ba      	b.n	3ca8 <nrfx_gpiote_output_configure+0x7c>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    3d32:	f04f 0c00 	mov.w	ip, #0
    3d36:	e7bf      	b.n	3cb8 <nrfx_gpiote_output_configure+0x8c>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    3d38:	2600      	movs	r6, #0
    3d3a:	e7c3      	b.n	3cc4 <nrfx_gpiote_output_configure+0x98>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    3d3c:	78af      	ldrb	r7, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    3d3e:	4819      	ldr	r0, [pc, #100]	; (3da4 <nrfx_gpiote_output_configure+0x178>)
    3d40:	f503 75a2 	add.w	r5, r3, #324	; 0x144
    3d44:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    3d48:	f421 1199 	bic.w	r1, r1, #1253376	; 0x132000
    3d4c:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
    3d50:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3d54:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
    3d58:	0221      	lsls	r1, r4, #8
    3d5a:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3d5e:	0412      	lsls	r2, r2, #16
    3d60:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3d64:	430a      	orrs	r2, r1
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3d66:	0539      	lsls	r1, r7, #20
    3d68:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3d6c:	430a      	orrs	r2, r1
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3d6e:	4332      	orrs	r2, r6
    3d70:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3d74:	035b      	lsls	r3, r3, #13
    3d76:	b29b      	uxth	r3, r3
    3d78:	4a09      	ldr	r2, [pc, #36]	; (3da0 <nrfx_gpiote_output_configure+0x174>)
    3d7a:	3408      	adds	r4, #8
    3d7c:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
    3d80:	430b      	orrs	r3, r1
    3d82:	f043 0320 	orr.w	r3, r3, #32
    3d86:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    3d8a:	4807      	ldr	r0, [pc, #28]	; (3da8 <nrfx_gpiote_output_configure+0x17c>)
    3d8c:	e7c4      	b.n	3d18 <nrfx_gpiote_output_configure+0xec>
    3d8e:	4808      	ldr	r0, [pc, #32]	; (3db0 <nrfx_gpiote_output_configure+0x184>)
    3d90:	e7c2      	b.n	3d18 <nrfx_gpiote_output_configure+0xec>
    3d92:	4807      	ldr	r0, [pc, #28]	; (3db0 <nrfx_gpiote_output_configure+0x184>)
    3d94:	e7c0      	b.n	3d18 <nrfx_gpiote_output_configure+0xec>
    3d96:	4804      	ldr	r0, [pc, #16]	; (3da8 <nrfx_gpiote_output_configure+0x17c>)
    3d98:	e7be      	b.n	3d18 <nrfx_gpiote_output_configure+0xec>
            return NRFX_ERROR_INVALID_PARAM;
    3d9a:	4805      	ldr	r0, [pc, #20]	; (3db0 <nrfx_gpiote_output_configure+0x184>)
    3d9c:	e7bc      	b.n	3d18 <nrfx_gpiote_output_configure+0xec>
    3d9e:	bf00      	nop
    3da0:	2000034c 	.word	0x2000034c
    3da4:	40006000 	.word	0x40006000
    3da8:	0bad0000 	.word	0x0bad0000
    3dac:	50000300 	.word	0x50000300
    3db0:	0bad0004 	.word	0x0bad0004

00003db4 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    3db4:	4b01      	ldr	r3, [pc, #4]	; (3dbc <nrfx_gpiote_global_callback_set+0x8>)
    3db6:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    3db8:	60d9      	str	r1, [r3, #12]
}
    3dba:	4770      	bx	lr
    3dbc:	2000034c 	.word	0x2000034c

00003dc0 <nrfx_gpiote_channel_get>:
{
    3dc0:	b538      	push	{r3, r4, r5, lr}
    3dc2:	4604      	mov	r4, r0
    3dc4:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
    3dc6:	f7ff fc65 	bl	3694 <pin_in_use_by_te>
    3dca:	b140      	cbz	r0, 3dde <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3dcc:	f104 0008 	add.w	r0, r4, #8
    3dd0:	4b04      	ldr	r3, [pc, #16]	; (3de4 <nrfx_gpiote_channel_get+0x24>)
    3dd2:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    3dd6:	0b5b      	lsrs	r3, r3, #13
    3dd8:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    3dda:	4803      	ldr	r0, [pc, #12]	; (3de8 <nrfx_gpiote_channel_get+0x28>)
}
    3ddc:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3dde:	4803      	ldr	r0, [pc, #12]	; (3dec <nrfx_gpiote_channel_get+0x2c>)
    3de0:	e7fc      	b.n	3ddc <nrfx_gpiote_channel_get+0x1c>
    3de2:	bf00      	nop
    3de4:	2000034c 	.word	0x2000034c
    3de8:	0bad0000 	.word	0x0bad0000
    3dec:	0bad0004 	.word	0x0bad0004

00003df0 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    3df0:	4b10      	ldr	r3, [pc, #64]	; (3e34 <nrfx_gpiote_init+0x44>)
    3df2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    3df6:	b10b      	cbz	r3, 3dfc <nrfx_gpiote_init+0xc>
        return err_code;
    3df8:	480f      	ldr	r0, [pc, #60]	; (3e38 <nrfx_gpiote_init+0x48>)
}
    3dfa:	4770      	bx	lr
{
    3dfc:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    3dfe:	4c0d      	ldr	r4, [pc, #52]	; (3e34 <nrfx_gpiote_init+0x44>)
    3e00:	2260      	movs	r2, #96	; 0x60
    3e02:	2100      	movs	r1, #0
    3e04:	f104 0010 	add.w	r0, r4, #16
    3e08:	f002 fc75 	bl	66f6 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    3e0c:	2006      	movs	r0, #6
    3e0e:	f7fd fe03 	bl	1a18 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3e12:	4b0a      	ldr	r3, [pc, #40]	; (3e3c <nrfx_gpiote_init+0x4c>)
    3e14:	2200      	movs	r2, #0
    3e16:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    3e1a:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    3e1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3e22:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    3e26:	2301      	movs	r3, #1
    3e28:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3e2c:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
    3e2e:	4804      	ldr	r0, [pc, #16]	; (3e40 <nrfx_gpiote_init+0x50>)
}
    3e30:	bd10      	pop	{r4, pc}
    3e32:	bf00      	nop
    3e34:	2000034c 	.word	0x2000034c
    3e38:	0bad0005 	.word	0x0bad0005
    3e3c:	40006000 	.word	0x40006000
    3e40:	0bad0000 	.word	0x0bad0000

00003e44 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    3e44:	4b03      	ldr	r3, [pc, #12]	; (3e54 <nrfx_gpiote_is_init+0x10>)
    3e46:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    3e4a:	3800      	subs	r0, #0
    3e4c:	bf18      	it	ne
    3e4e:	2001      	movne	r0, #1
    3e50:	4770      	bx	lr
    3e52:	bf00      	nop
    3e54:	2000034c 	.word	0x2000034c

00003e58 <nrfx_gpiote_channel_free>:
{
    3e58:	b508      	push	{r3, lr}
    3e5a:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    3e5c:	4801      	ldr	r0, [pc, #4]	; (3e64 <nrfx_gpiote_channel_free+0xc>)
    3e5e:	f7ff fb31 	bl	34c4 <nrfx_flag32_free>
}
    3e62:	bd08      	pop	{r3, pc}
    3e64:	200003bc 	.word	0x200003bc

00003e68 <nrfx_gpiote_channel_alloc>:
{
    3e68:	b508      	push	{r3, lr}
    3e6a:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    3e6c:	4801      	ldr	r0, [pc, #4]	; (3e74 <nrfx_gpiote_channel_alloc+0xc>)
    3e6e:	f7ff fb01 	bl	3474 <nrfx_flag32_alloc>
}
    3e72:	bd08      	pop	{r3, pc}
    3e74:	200003bc 	.word	0x200003bc

00003e78 <nrfx_gpiote_trigger_enable>:
{
    3e78:	b538      	push	{r3, r4, r5, lr}
    3e7a:	4604      	mov	r4, r0
    3e7c:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3e7e:	f7ff fc09 	bl	3694 <pin_in_use_by_te>
    3e82:	b308      	cbz	r0, 3ec8 <nrfx_gpiote_trigger_enable+0x50>
    3e84:	4620      	mov	r0, r4
    3e86:	f003 fb70 	bl	756a <pin_is_input>
    3e8a:	b1e8      	cbz	r0, 3ec8 <nrfx_gpiote_trigger_enable+0x50>
        uint8_t ch = pin_te_get(pin);
    3e8c:	4620      	mov	r0, r4
    3e8e:	f7ff fc21 	bl	36d4 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    3e92:	0083      	lsls	r3, r0, #2
    3e94:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
    3e98:	b29b      	uxth	r3, r3
    3e9a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3e9e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3ea2:	2200      	movs	r2, #0
    3ea4:	601a      	str	r2, [r3, #0]
    3ea6:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3ea8:	4a22      	ldr	r2, [pc, #136]	; (3f34 <nrfx_gpiote_trigger_enable+0xbc>)
    3eaa:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    3eae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    3eb2:	f043 0301 	orr.w	r3, r3, #1
    3eb6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    3eba:	b39d      	cbz	r5, 3f24 <nrfx_gpiote_trigger_enable+0xac>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    3ebc:	2301      	movs	r3, #1
    3ebe:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->INTENSET = mask;
    3ec2:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
}
    3ec6:	e02d      	b.n	3f24 <nrfx_gpiote_trigger_enable+0xac>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3ec8:	f104 0308 	add.w	r3, r4, #8
    3ecc:	4a1a      	ldr	r2, [pc, #104]	; (3f38 <nrfx_gpiote_trigger_enable+0xc0>)
    3ece:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    3ed2:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    3ed6:	2b04      	cmp	r3, #4
    3ed8:	d012      	beq.n	3f00 <nrfx_gpiote_trigger_enable+0x88>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    3eda:	2b05      	cmp	r3, #5
    3edc:	d023      	beq.n	3f26 <nrfx_gpiote_trigger_enable+0xae>
    *p_pin = pin_number & 0x1F;
    3ede:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    3ee2:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3ee4:	2b01      	cmp	r3, #1
    3ee6:	d009      	beq.n	3efc <nrfx_gpiote_trigger_enable+0x84>
        case 0: return NRF_P0;
    3ee8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return p_reg->IN;
    3eec:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3ef0:	40d3      	lsrs	r3, r2
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3ef2:	f013 0f01 	tst.w	r3, #1
    3ef6:	d018      	beq.n	3f2a <nrfx_gpiote_trigger_enable+0xb2>
    3ef8:	2003      	movs	r0, #3
    3efa:	e002      	b.n	3f02 <nrfx_gpiote_trigger_enable+0x8a>
        case 1: return NRF_P1;
    3efc:	4b0f      	ldr	r3, [pc, #60]	; (3f3c <nrfx_gpiote_trigger_enable+0xc4>)
    3efe:	e7f5      	b.n	3eec <nrfx_gpiote_trigger_enable+0x74>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    3f00:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
    3f02:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    3f06:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3f08:	2c01      	cmp	r4, #1
    3f0a:	d010      	beq.n	3f2e <nrfx_gpiote_trigger_enable+0xb6>
        case 0: return NRF_P0;
    3f0c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3f10:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    3f14:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    3f18:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3f1c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    3f20:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    3f24:	bd38      	pop	{r3, r4, r5, pc}
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    3f26:	2002      	movs	r0, #2
    3f28:	e7eb      	b.n	3f02 <nrfx_gpiote_trigger_enable+0x8a>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3f2a:	2002      	movs	r0, #2
    3f2c:	e7e9      	b.n	3f02 <nrfx_gpiote_trigger_enable+0x8a>
        case 1: return NRF_P1;
    3f2e:	4903      	ldr	r1, [pc, #12]	; (3f3c <nrfx_gpiote_trigger_enable+0xc4>)
    3f30:	e7ee      	b.n	3f10 <nrfx_gpiote_trigger_enable+0x98>
    3f32:	bf00      	nop
    3f34:	40006000 	.word	0x40006000
    3f38:	2000034c 	.word	0x2000034c
    3f3c:	50000300 	.word	0x50000300

00003f40 <nrfx_gpiote_trigger_disable>:
{
    3f40:	b510      	push	{r4, lr}
    3f42:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3f44:	f7ff fba6 	bl	3694 <pin_in_use_by_te>
    3f48:	b1a0      	cbz	r0, 3f74 <nrfx_gpiote_trigger_disable+0x34>
    3f4a:	4620      	mov	r0, r4
    3f4c:	f003 fb0d 	bl	756a <pin_is_input>
    3f50:	b180      	cbz	r0, 3f74 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    3f52:	4620      	mov	r0, r4
    3f54:	f7ff fbbe 	bl	36d4 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    3f58:	2201      	movs	r2, #1
    3f5a:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    3f5c:	4b0e      	ldr	r3, [pc, #56]	; (3f98 <nrfx_gpiote_trigger_disable+0x58>)
    3f5e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3f62:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    3f66:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    3f6a:	f022 0203 	bic.w	r2, r2, #3
    3f6e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    3f72:	e00e      	b.n	3f92 <nrfx_gpiote_trigger_disable+0x52>
    *p_pin = pin_number & 0x1F;
    3f74:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    3f78:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3f7a:	2c01      	cmp	r4, #1
    3f7c:	d00a      	beq.n	3f94 <nrfx_gpiote_trigger_disable+0x54>
        case 0: return NRF_P0;
    3f7e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3f82:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3f86:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    3f8a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    3f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3f92:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    3f94:	4901      	ldr	r1, [pc, #4]	; (3f9c <nrfx_gpiote_trigger_disable+0x5c>)
    3f96:	e7f4      	b.n	3f82 <nrfx_gpiote_trigger_disable+0x42>
    3f98:	40006000 	.word	0x40006000
    3f9c:	50000300 	.word	0x50000300

00003fa0 <nrfx_gpiote_pin_uninit>:
{
    3fa0:	b510      	push	{r4, lr}
    3fa2:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    3fa4:	f7ff fb6c 	bl	3680 <pin_in_use>
    3fa8:	b908      	cbnz	r0, 3fae <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    3faa:	480c      	ldr	r0, [pc, #48]	; (3fdc <nrfx_gpiote_pin_uninit+0x3c>)
}
    3fac:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
    3fae:	4620      	mov	r0, r4
    3fb0:	f7ff ffc6 	bl	3f40 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    3fb4:	4620      	mov	r0, r4
    3fb6:	f7ff fc0d 	bl	37d4 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
    3fba:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    3fbe:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3fc0:	2c01      	cmp	r4, #1
    3fc2:	d008      	beq.n	3fd6 <nrfx_gpiote_pin_uninit+0x36>
        case 0: return NRF_P0;
    3fc4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    3fc8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3fcc:	2102      	movs	r1, #2
    3fce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return NRFX_SUCCESS;
    3fd2:	4803      	ldr	r0, [pc, #12]	; (3fe0 <nrfx_gpiote_pin_uninit+0x40>)
    3fd4:	e7ea      	b.n	3fac <nrfx_gpiote_pin_uninit+0xc>
        case 1: return NRF_P1;
    3fd6:	4a03      	ldr	r2, [pc, #12]	; (3fe4 <nrfx_gpiote_pin_uninit+0x44>)
    3fd8:	e7f6      	b.n	3fc8 <nrfx_gpiote_pin_uninit+0x28>
    3fda:	bf00      	nop
    3fdc:	0bad0004 	.word	0x0bad0004
    3fe0:	0bad0000 	.word	0x0bad0000
    3fe4:	50000300 	.word	0x50000300

00003fe8 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    3fe8:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    3fea:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    3fec:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3ff0:	2100      	movs	r1, #0
    uint32_t status = 0;
    3ff2:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3ff4:	e003      	b.n	3ffe <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    3ff6:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    3ff8:	3304      	adds	r3, #4
    3ffa:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3ffc:	3101      	adds	r1, #1
    3ffe:	2907      	cmp	r1, #7
    4000:	d814      	bhi.n	402c <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4002:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    4006:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    400a:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    400c:	2a00      	cmp	r2, #0
    400e:	d0f2      	beq.n	3ff6 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    4010:	4a0c      	ldr	r2, [pc, #48]	; (4044 <nrfx_gpiote_irq_handler+0x5c>)
    4012:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    4016:	4210      	tst	r0, r2
    4018:	d0ed      	beq.n	3ff6 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    401a:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    401e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4022:	2500      	movs	r5, #0
    4024:	6015      	str	r5, [r2, #0]
    4026:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    4028:	4304      	orrs	r4, r0
    402a:	e7e4      	b.n	3ff6 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    402c:	4b05      	ldr	r3, [pc, #20]	; (4044 <nrfx_gpiote_irq_handler+0x5c>)
    402e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    4032:	b91b      	cbnz	r3, 403c <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    4034:	4620      	mov	r0, r4
    4036:	f7ff fc1f 	bl	3878 <gpiote_evt_handle>
}
    403a:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    403c:	f7ff fcd4 	bl	39e8 <port_event_handle>
    4040:	e7f8      	b.n	4034 <nrfx_gpiote_irq_handler+0x4c>
    4042:	bf00      	nop
    4044:	40006000 	.word	0x40006000

00004048 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    4048:	b508      	push	{r3, lr}
    404a:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    404c:	4801      	ldr	r0, [pc, #4]	; (4054 <nrfx_ppi_channel_alloc+0xc>)
    404e:	f7ff fa11 	bl	3474 <nrfx_flag32_alloc>
}
    4052:	bd08      	pop	{r3, pc}
    4054:	200003c8 	.word	0x200003c8

00004058 <configure_pins>:


static void configure_pins(NRF_SPI_Type *            p_spi,
                           nrfx_spi_config_t const * p_config)
{
    if (!p_config->skip_gpio_cfg)
    4058:	7bcb      	ldrb	r3, [r1, #15]
    405a:	b1a3      	cbz	r3, 4086 <configure_pins+0x2e>
            nrf_gpio_pin_write(p_config->ss_pin, 1);
            nrf_gpio_cfg_output(p_config->ss_pin);
        }
    }

    if (!p_config->skip_psel_cfg)
    405c:	7c0b      	ldrb	r3, [r1, #16]
    405e:	2b00      	cmp	r3, #0
    4060:	f040 80ae 	bne.w	41c0 <configure_pins+0x168>
    {
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
    4064:	784b      	ldrb	r3, [r1, #1]
                            ? p_config->mosi_pin
                            : NRF_SPI_PIN_NOT_CONNECTED;
    4066:	2bff      	cmp	r3, #255	; 0xff
    4068:	f000 80a4 	beq.w	41b4 <configure_pins+0x15c>
    406c:	461a      	mov	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    406e:	788b      	ldrb	r3, [r1, #2]
                            ? p_config->miso_pin
                            : NRF_SPI_PIN_NOT_CONNECTED;
    4070:	2bff      	cmp	r3, #255	; 0xff
    4072:	f000 80a2 	beq.w	41ba <configure_pins+0x162>

        nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
    4076:	7809      	ldrb	r1, [r1, #0]
                                        uint32_t       sck_pin,
                                        uint32_t       mosi_pin,
                                        uint32_t       miso_pin)
{
#if defined(SPI_PSEL_SCK_CONNECT_Pos)
    p_reg->PSEL.SCK = sck_pin;
    4078:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
#else
    p_reg->PSELSCK  = sck_pin;
#endif

#if defined(SPI_PSEL_MOSI_CONNECT_Pos)
    p_reg->PSEL.MOSI = mosi_pin;
    407c:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
#else
    p_reg->PSELMOSI = mosi_pin;
#endif

#if defined(SPI_PSEL_MISO_CONNECT_Pos)
    p_reg->PSEL.MISO = miso_pin;
    4080:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    4084:	4770      	bx	lr
{
    4086:	b430      	push	{r4, r5}
        nrf_gpio_pin_write(p_config->sck_pin,
    4088:	780b      	ldrb	r3, [r1, #0]
                           p_config->mode <= NRF_SPI_MODE_1 ? 0 : 1);
    408a:	7b0a      	ldrb	r2, [r1, #12]
    if (value == 0)
    408c:	2a01      	cmp	r2, #1
    408e:	d871      	bhi.n	4174 <configure_pins+0x11c>
    *p_pin = pin_number & 0x1F;
    4090:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    4094:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4096:	2b01      	cmp	r3, #1
    4098:	d06a      	beq.n	4170 <configure_pins+0x118>
        case 0: return NRF_P0;
    409a:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    409e:	2301      	movs	r3, #1
    40a0:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    40a2:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
        nrf_gpio_cfg(p_config->sck_pin,
    40a6:	780b      	ldrb	r3, [r1, #0]
    *p_pin = pin_number & 0x1F;
    40a8:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    40ac:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    40ae:	2b01      	cmp	r3, #1
    40b0:	d06e      	beq.n	4190 <configure_pins+0x138>
        case 0: return NRF_P0;
    40b2:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    40b6:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    40ba:	2201      	movs	r2, #1
    40bc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
    40c0:	784b      	ldrb	r3, [r1, #1]
    40c2:	2bff      	cmp	r3, #255	; 0xff
    40c4:	d017      	beq.n	40f6 <configure_pins+0x9e>
    *p_pin = pin_number & 0x1F;
    40c6:	f003 041f 	and.w	r4, r3, #31
    return pin_number >> 5;
    40ca:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    40cc:	4293      	cmp	r3, r2
    40ce:	d061      	beq.n	4194 <configure_pins+0x13c>
        case 0: return NRF_P0;
    40d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    40d4:	2301      	movs	r3, #1
    40d6:	40a3      	lsls	r3, r4
    p_reg->OUTCLR = clr_mask;
    40d8:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
            nrf_gpio_cfg_output(p_config->mosi_pin);
    40dc:	784b      	ldrb	r3, [r1, #1]
    *p_pin = pin_number & 0x1F;
    40de:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    40e2:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    40e4:	2b01      	cmp	r3, #1
    40e6:	d057      	beq.n	4198 <configure_pins+0x140>
        case 0: return NRF_P0;
    40e8:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    40ec:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    40f0:	2203      	movs	r2, #3
    40f2:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    40f6:	788b      	ldrb	r3, [r1, #2]
    40f8:	2bff      	cmp	r3, #255	; 0xff
    40fa:	d00c      	beq.n	4116 <configure_pins+0xbe>
            nrf_gpio_cfg_input(p_config->miso_pin, p_config->miso_pull);
    40fc:	7b8c      	ldrb	r4, [r1, #14]
    *p_pin = pin_number & 0x1F;
    40fe:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    4102:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4104:	2b01      	cmp	r3, #1
    4106:	d049      	beq.n	419c <configure_pins+0x144>
        case 0: return NRF_P0;
    4108:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    410c:	00a4      	lsls	r4, r4, #2
    reg->PIN_CNF[pin_number] = cnf;
    410e:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    4112:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
    4116:	78cb      	ldrb	r3, [r1, #3]
    4118:	2bff      	cmp	r3, #255	; 0xff
    411a:	d017      	beq.n	414c <configure_pins+0xf4>
    *p_pin = pin_number & 0x1F;
    411c:	f003 041f 	and.w	r4, r3, #31
    return pin_number >> 5;
    4120:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4122:	2b01      	cmp	r3, #1
    4124:	d03c      	beq.n	41a0 <configure_pins+0x148>
        case 0: return NRF_P0;
    4126:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    412a:	2301      	movs	r3, #1
    412c:	40a3      	lsls	r3, r4
    p_reg->OUTSET = set_mask;
    412e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            nrf_gpio_cfg_output(p_config->ss_pin);
    4132:	78cb      	ldrb	r3, [r1, #3]
    *p_pin = pin_number & 0x1F;
    4134:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    4138:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    413a:	2b01      	cmp	r3, #1
    413c:	d032      	beq.n	41a4 <configure_pins+0x14c>
        case 0: return NRF_P0;
    413e:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    4142:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    4146:	2203      	movs	r2, #3
    4148:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    414c:	7c0b      	ldrb	r3, [r1, #16]
    414e:	b96b      	cbnz	r3, 416c <configure_pins+0x114>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
    4150:	784b      	ldrb	r3, [r1, #1]
                            : NRF_SPI_PIN_NOT_CONNECTED;
    4152:	2bff      	cmp	r3, #255	; 0xff
    4154:	d028      	beq.n	41a8 <configure_pins+0x150>
    4156:	461a      	mov	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    4158:	788b      	ldrb	r3, [r1, #2]
                            : NRF_SPI_PIN_NOT_CONNECTED;
    415a:	2bff      	cmp	r3, #255	; 0xff
    415c:	d027      	beq.n	41ae <configure_pins+0x156>
        nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
    415e:	7809      	ldrb	r1, [r1, #0]
    p_reg->PSEL.SCK = sck_pin;
    4160:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
    4164:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
    4168:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    }
}
    416c:	bc30      	pop	{r4, r5}
    416e:	4770      	bx	lr
        case 1: return NRF_P1;
    4170:	4c14      	ldr	r4, [pc, #80]	; (41c4 <configure_pins+0x16c>)
    4172:	e794      	b.n	409e <configure_pins+0x46>
    *p_pin = pin_number & 0x1F;
    4174:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    4178:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    417a:	2b01      	cmp	r3, #1
    417c:	d006      	beq.n	418c <configure_pins+0x134>
        case 0: return NRF_P0;
    417e:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4182:	2301      	movs	r3, #1
    4184:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    4186:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
}
    418a:	e78c      	b.n	40a6 <configure_pins+0x4e>
        case 1: return NRF_P1;
    418c:	4c0d      	ldr	r4, [pc, #52]	; (41c4 <configure_pins+0x16c>)
    418e:	e7f8      	b.n	4182 <configure_pins+0x12a>
    4190:	4c0c      	ldr	r4, [pc, #48]	; (41c4 <configure_pins+0x16c>)
    4192:	e790      	b.n	40b6 <configure_pins+0x5e>
    4194:	4a0b      	ldr	r2, [pc, #44]	; (41c4 <configure_pins+0x16c>)
    4196:	e79d      	b.n	40d4 <configure_pins+0x7c>
    4198:	4c0a      	ldr	r4, [pc, #40]	; (41c4 <configure_pins+0x16c>)
    419a:	e7a7      	b.n	40ec <configure_pins+0x94>
    419c:	4d09      	ldr	r5, [pc, #36]	; (41c4 <configure_pins+0x16c>)
    419e:	e7b5      	b.n	410c <configure_pins+0xb4>
    41a0:	4a08      	ldr	r2, [pc, #32]	; (41c4 <configure_pins+0x16c>)
    41a2:	e7c2      	b.n	412a <configure_pins+0xd2>
    41a4:	4c07      	ldr	r4, [pc, #28]	; (41c4 <configure_pins+0x16c>)
    41a6:	e7cc      	b.n	4142 <configure_pins+0xea>
                            : NRF_SPI_PIN_NOT_CONNECTED;
    41a8:	f04f 32ff 	mov.w	r2, #4294967295
    41ac:	e7d4      	b.n	4158 <configure_pins+0x100>
                            : NRF_SPI_PIN_NOT_CONNECTED;
    41ae:	f04f 33ff 	mov.w	r3, #4294967295
    41b2:	e7d4      	b.n	415e <configure_pins+0x106>
                            : NRF_SPI_PIN_NOT_CONNECTED;
    41b4:	f04f 32ff 	mov.w	r2, #4294967295
    41b8:	e759      	b.n	406e <configure_pins+0x16>
                            : NRF_SPI_PIN_NOT_CONNECTED;
    41ba:	f04f 33ff 	mov.w	r3, #4294967295
    41be:	e75a      	b.n	4076 <configure_pins+0x1e>
    41c0:	4770      	bx	lr
    41c2:	bf00      	nop
    41c4:	50000300 	.word	0x50000300

000041c8 <finish_transfer>:

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
}

static void finish_transfer(spi_control_block_t * p_cb)
{
    41c8:	b508      	push	{r3, lr}
    41ca:	4603      	mov	r3, r0
    // If Slave Select signal is used, this is the time to deactivate it.
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    41cc:	7f82      	ldrb	r2, [r0, #30]
    41ce:	2aff      	cmp	r2, #255	; 0xff
    41d0:	d00a      	beq.n	41e8 <finish_transfer+0x20>
    *p_pin = pin_number & 0x1F;
    41d2:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    41d6:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    41d8:	2a01      	cmp	r2, #1
    41da:	d00e      	beq.n	41fa <finish_transfer+0x32>
        case 0: return NRF_P0;
    41dc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    41e0:	2201      	movs	r2, #1
    41e2:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    41e4:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
        nrf_gpio_pin_write(p_cb->ss_pin, 1);
    }

    // By clearing this flag before calling the handler we allow subsequent
    // transfers to be started directly from the handler function.
    p_cb->transfer_in_progress = false;
    41e8:	2200      	movs	r2, #0
    41ea:	775a      	strb	r2, [r3, #29]

    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
    41ec:	721a      	strb	r2, [r3, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    41ee:	4618      	mov	r0, r3
    41f0:	f850 2b08 	ldr.w	r2, [r0], #8
    41f4:	6859      	ldr	r1, [r3, #4]
    41f6:	4790      	blx	r2
}
    41f8:	bd08      	pop	{r3, pc}
        case 1: return NRF_P1;
    41fa:	4801      	ldr	r0, [pc, #4]	; (4200 <finish_transfer+0x38>)
    41fc:	e7f0      	b.n	41e0 <finish_transfer+0x18>
    41fe:	bf00      	nop
    4200:	50000300 	.word	0x50000300

00004204 <spi_xfer>:
}

static void spi_xfer(NRF_SPI_Type               * p_spi,
                     spi_control_block_t        * p_cb,
                     nrfx_spi_xfer_desc_t const * p_xfer_desc)
{
    4204:	b538      	push	{r3, r4, r5, lr}
    4206:	4604      	mov	r4, r0
    4208:	460d      	mov	r5, r1
    p_cb->bytes_transferred = 0;
    420a:	2300      	movs	r3, #0
    420c:	620b      	str	r3, [r1, #32]
    p_reg->INTENCLR = mask;
    420e:	2104      	movs	r1, #4
    4210:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4214:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    4218:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108

    // Start the transfer by writing some byte to the TXD register;
    // if TX buffer is not empty, take the first byte from this buffer,
    // otherwise - use over-run character.
    nrf_spi_txd_set(p_spi,
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
    421c:	6853      	ldr	r3, [r2, #4]
    nrf_spi_txd_set(p_spi,
    421e:	b183      	cbz	r3, 4242 <spi_xfer+0x3e>
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
    4220:	6813      	ldr	r3, [r2, #0]
    nrf_spi_txd_set(p_spi,
    4222:	781b      	ldrb	r3, [r3, #0]
#endif
}

NRF_STATIC_INLINE void nrf_spi_txd_set(NRF_SPI_Type * p_reg, uint8_t data)
{
    p_reg->TXD = data;
    4224:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

    // TXD register is double buffered, so next byte to be transmitted can
    // be written immediately, if needed, i.e. if TX or RX transfer is to
    // be more that 1 byte long. Again - if there is something more in TX
    // buffer send it, otherwise use over-run character.
    if (p_xfer_desc->tx_length > 1)
    4228:	6853      	ldr	r3, [r2, #4]
    422a:	2b01      	cmp	r3, #1
    422c:	d90b      	bls.n	4246 <spi_xfer+0x42>
    {
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
    422e:	6813      	ldr	r3, [r2, #0]
    4230:	785b      	ldrb	r3, [r3, #1]
    4232:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    // For blocking mode (user handler not provided) wait here for READY
    // events (indicating that the byte from TXD register was transmitted
    // and a new incoming byte was moved to the RXD register) and continue
    // transaction until all requested bytes are transferred.
    // In non-blocking mode - IRQ service routine will do this stuff.
    if (p_cb->handler)
    4236:	682b      	ldr	r3, [r5, #0]
    4238:	b163      	cbz	r3, 4254 <spi_xfer+0x50>
    p_reg->INTENSET = mask;
    423a:	2304      	movs	r3, #4
    423c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
        {
            nrf_gpio_pin_write(p_cb->ss_pin, 1);
        }
    }
}
    4240:	bd38      	pop	{r3, r4, r5, pc}
    nrf_spi_txd_set(p_spi,
    4242:	7feb      	ldrb	r3, [r5, #31]
    4244:	e7ee      	b.n	4224 <spi_xfer+0x20>
    else if (p_xfer_desc->rx_length > 1)
    4246:	68d3      	ldr	r3, [r2, #12]
    4248:	2b01      	cmp	r3, #1
    424a:	d9f4      	bls.n	4236 <spi_xfer+0x32>
        nrf_spi_txd_set(p_spi, p_cb->orc);
    424c:	7feb      	ldrb	r3, [r5, #31]
    p_reg->TXD = data;
    424e:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
}
    4252:	e7f0      	b.n	4236 <spi_xfer+0x32>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4254:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
    4258:	2b00      	cmp	r3, #0
    425a:	d0fb      	beq.n	4254 <spi_xfer+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    425c:	2300      	movs	r3, #0
    425e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    4262:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
    4266:	4629      	mov	r1, r5
    4268:	4620      	mov	r0, r4
    426a:	f003 f98c 	bl	7586 <transfer_byte>
    426e:	2800      	cmp	r0, #0
    4270:	d1f0      	bne.n	4254 <spi_xfer+0x50>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    4272:	7fab      	ldrb	r3, [r5, #30]
    4274:	2bff      	cmp	r3, #255	; 0xff
    4276:	d0e3      	beq.n	4240 <spi_xfer+0x3c>
    *p_pin = pin_number & 0x1F;
    4278:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    427c:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    427e:	2b01      	cmp	r3, #1
    4280:	d006      	beq.n	4290 <spi_xfer+0x8c>
        case 0: return NRF_P0;
    4282:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4286:	2301      	movs	r3, #1
    4288:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    428a:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
}
    428e:	e7d7      	b.n	4240 <spi_xfer+0x3c>
        case 1: return NRF_P1;
    4290:	4900      	ldr	r1, [pc, #0]	; (4294 <spi_xfer+0x90>)
    4292:	e7f8      	b.n	4286 <spi_xfer+0x82>
    4294:	50000300 	.word	0x50000300

00004298 <nrfx_spi_init>:
{
    4298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    429a:	4606      	mov	r6, r0
    429c:	460d      	mov	r5, r1
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    429e:	7904      	ldrb	r4, [r0, #4]
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    42a0:	6807      	ldr	r7, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    42a2:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    42a6:	4926      	ldr	r1, [pc, #152]	; (4340 <nrfx_spi_init+0xa8>)
    42a8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    42ac:	7f09      	ldrb	r1, [r1, #28]
    42ae:	b109      	cbz	r1, 42b4 <nrfx_spi_init+0x1c>
        return err_code;
    42b0:	4824      	ldr	r0, [pc, #144]	; (4344 <nrfx_spi_init+0xac>)
}
    42b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    p_cb->handler = handler;
    42b4:	4822      	ldr	r0, [pc, #136]	; (4340 <nrfx_spi_init+0xa8>)
    42b6:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    42ba:	eb00 01cc 	add.w	r1, r0, ip, lsl #3
    42be:	f840 203c 	str.w	r2, [r0, ip, lsl #3]
    p_cb->p_context = p_context;
    42c2:	604b      	str	r3, [r1, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    42c4:	7beb      	ldrb	r3, [r5, #15]
    42c6:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25
    p_cb->ss_pin = p_config->ss_pin;
    42ca:	78eb      	ldrb	r3, [r5, #3]
    42cc:	778b      	strb	r3, [r1, #30]
    p_cb->orc = p_config->orc;
    42ce:	796b      	ldrb	r3, [r5, #5]
    42d0:	77cb      	strb	r3, [r1, #31]
    configure_pins(p_spi, p_config);
    42d2:	4629      	mov	r1, r5
    42d4:	4638      	mov	r0, r7
    42d6:	f7ff febf 	bl	4058 <configure_pins>
    nrf_spi_frequency_set(p_spi, p_config->frequency);
    42da:	68ab      	ldr	r3, [r5, #8]
}

NRF_STATIC_INLINE void nrf_spi_frequency_set(NRF_SPI_Type *      p_reg,
                                             nrf_spi_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
    42dc:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
    42e0:	7b2a      	ldrb	r2, [r5, #12]
    42e2:	7b6b      	ldrb	r3, [r5, #13]
NRF_STATIC_INLINE void nrf_spi_configure(NRF_SPI_Type *      p_reg,
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    42e4:	3b00      	subs	r3, #0
    42e6:	bf18      	it	ne
    42e8:	2301      	movne	r3, #1
    switch (spi_mode)
    42ea:	2a02      	cmp	r2, #2
    42ec:	d021      	beq.n	4332 <nrfx_spi_init+0x9a>
    42ee:	2a03      	cmp	r2, #3
    42f0:	d022      	beq.n	4338 <nrfx_spi_init+0xa0>
    42f2:	2a01      	cmp	r2, #1
    42f4:	d01a      	beq.n	432c <nrfx_spi_init+0x94>
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    42f6:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    42fa:	2301      	movs	r3, #1
    42fc:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
    if (p_cb->handler)
    4300:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    4304:	4a0e      	ldr	r2, [pc, #56]	; (4340 <nrfx_spi_init+0xa8>)
    4306:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    430a:	b123      	cbz	r3, 4316 <nrfx_spi_init+0x7e>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    430c:	6830      	ldr	r0, [r6, #0]
    430e:	f340 3007 	sbfx	r0, r0, #12, #8
    4312:	f7fd fb81 	bl	1a18 <arch_irq_enable>
    p_cb->transfer_in_progress = false;
    4316:	4b0a      	ldr	r3, [pc, #40]	; (4340 <nrfx_spi_init+0xa8>)
    4318:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    431c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    4320:	2100      	movs	r1, #0
    4322:	7751      	strb	r1, [r2, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4324:	2301      	movs	r3, #1
    4326:	7713      	strb	r3, [r2, #28]
    return err_code;
    4328:	4807      	ldr	r0, [pc, #28]	; (4348 <nrfx_spi_init+0xb0>)
    432a:	e7c2      	b.n	42b2 <nrfx_spi_init+0x1a>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
    432c:	f043 0302 	orr.w	r3, r3, #2
        break;
    4330:	e7e1      	b.n	42f6 <nrfx_spi_init+0x5e>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    4332:	f043 0304 	orr.w	r3, r3, #4
        break;
    4336:	e7de      	b.n	42f6 <nrfx_spi_init+0x5e>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    4338:	f043 0306 	orr.w	r3, r3, #6
        break;
    433c:	e7db      	b.n	42f6 <nrfx_spi_init+0x5e>
    433e:	bf00      	nop
    4340:	20000c40 	.word	0x20000c40
    4344:	0bad0005 	.word	0x0bad0005
    4348:	0bad0000 	.word	0x0bad0000

0000434c <nrfx_spi_uninit>:
{
    434c:	b538      	push	{r3, r4, r5, lr}
    spi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    434e:	7904      	ldrb	r4, [r0, #4]
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    4350:	6805      	ldr	r5, [r0, #0]
    if (p_cb->handler)
    4352:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    4356:	4b35      	ldr	r3, [pc, #212]	; (442c <nrfx_spi_uninit+0xe0>)
    4358:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    435c:	b133      	cbz	r3, 436c <nrfx_spi_uninit+0x20>
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    435e:	f345 3007 	sbfx	r0, r5, #12, #8
    4362:	f7fd fb67 	bl	1a34 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    4366:	2304      	movs	r3, #4
    4368:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Disabled << SPI_ENABLE_ENABLE_Pos);
    436c:	2300      	movs	r3, #0
    436e:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
    if (!p_cb->skip_gpio_cfg)
    4372:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    4376:	4a2d      	ldr	r2, [pc, #180]	; (442c <nrfx_spi_uninit+0xe0>)
    4378:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    437c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4380:	2b00      	cmp	r3, #0
    4382:	d143      	bne.n	440c <nrfx_spi_uninit+0xc0>
    return p_reg->PSEL.SCK;
    4384:	f8d5 3508 	ldr.w	r3, [r5, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    4388:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    438c:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    438e:	2b01      	cmp	r3, #1
    4390:	d044      	beq.n	441c <nrfx_spi_uninit+0xd0>
        case 0: return NRF_P0;
    4392:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    4396:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    439a:	2202      	movs	r2, #2
    439c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return p_reg->PSEL.MISO;
    43a0:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
        if (miso_pin != NRF_SPI_PIN_NOT_CONNECTED)
    43a4:	f1b3 3fff 	cmp.w	r3, #4294967295
    43a8:	d00b      	beq.n	43c2 <nrfx_spi_uninit+0x76>
    *p_pin = pin_number & 0x1F;
    43aa:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    43ae:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    43b0:	2b01      	cmp	r3, #1
    43b2:	d035      	beq.n	4420 <nrfx_spi_uninit+0xd4>
        case 0: return NRF_P0;
    43b4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    43b8:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    43bc:	2202      	movs	r2, #2
    43be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return p_reg->PSEL.MOSI;
    43c2:	f8d5 350c 	ldr.w	r3, [r5, #1292]	; 0x50c
        if (mosi_pin != NRF_SPI_PIN_NOT_CONNECTED)
    43c6:	f1b3 3fff 	cmp.w	r3, #4294967295
    43ca:	d00b      	beq.n	43e4 <nrfx_spi_uninit+0x98>
    *p_pin = pin_number & 0x1F;
    43cc:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    43d0:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    43d2:	2b01      	cmp	r3, #1
    43d4:	d026      	beq.n	4424 <nrfx_spi_uninit+0xd8>
        case 0: return NRF_P0;
    43d6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    43da:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    43de:	2202      	movs	r2, #2
    43e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    43e4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    43e8:	4a10      	ldr	r2, [pc, #64]	; (442c <nrfx_spi_uninit+0xe0>)
    43ea:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    43ee:	7f9b      	ldrb	r3, [r3, #30]
    43f0:	2bff      	cmp	r3, #255	; 0xff
    43f2:	d00b      	beq.n	440c <nrfx_spi_uninit+0xc0>
    *p_pin = pin_number & 0x1F;
    43f4:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    43f8:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    43fa:	2b01      	cmp	r3, #1
    43fc:	d014      	beq.n	4428 <nrfx_spi_uninit+0xdc>
        case 0: return NRF_P0;
    43fe:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    4402:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    4406:	2202      	movs	r2, #2
    4408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    440c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    4410:	4b06      	ldr	r3, [pc, #24]	; (442c <nrfx_spi_uninit+0xe0>)
    4412:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    4416:	2300      	movs	r3, #0
    4418:	7723      	strb	r3, [r4, #28]
}
    441a:	bd38      	pop	{r3, r4, r5, pc}
        case 1: return NRF_P1;
    441c:	4904      	ldr	r1, [pc, #16]	; (4430 <nrfx_spi_uninit+0xe4>)
    441e:	e7ba      	b.n	4396 <nrfx_spi_uninit+0x4a>
    4420:	4903      	ldr	r1, [pc, #12]	; (4430 <nrfx_spi_uninit+0xe4>)
    4422:	e7c9      	b.n	43b8 <nrfx_spi_uninit+0x6c>
    4424:	4902      	ldr	r1, [pc, #8]	; (4430 <nrfx_spi_uninit+0xe4>)
    4426:	e7d8      	b.n	43da <nrfx_spi_uninit+0x8e>
    4428:	4901      	ldr	r1, [pc, #4]	; (4430 <nrfx_spi_uninit+0xe4>)
    442a:	e7ea      	b.n	4402 <nrfx_spi_uninit+0xb6>
    442c:	20000c40 	.word	0x20000c40
    4430:	50000300 	.word	0x50000300

00004434 <nrfx_spi_xfer>:

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    4434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4438:	f890 c004 	ldrb.w	ip, [r0, #4]
    443c:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
    4440:	4d21      	ldr	r5, [pc, #132]	; (44c8 <nrfx_spi_xfer+0x94>)
    4442:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    4446:	7f6b      	ldrb	r3, [r5, #29]
    4448:	2b00      	cmp	r3, #0
    444a:	d13b      	bne.n	44c4 <nrfx_spi_xfer+0x90>
    444c:	4604      	mov	r4, r0
    444e:	468e      	mov	lr, r1
    4450:	4617      	mov	r7, r2
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
    4452:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
    4456:	4a1c      	ldr	r2, [pc, #112]	; (44c8 <nrfx_spi_xfer+0x94>)
    4458:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    445c:	b10b      	cbz	r3, 4462 <nrfx_spi_xfer+0x2e>
        {
            p_cb->transfer_in_progress = true;
    445e:	2201      	movs	r2, #1
    4460:	776a      	strb	r2, [r5, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    4462:	eb0c 068c 	add.w	r6, ip, ip, lsl #2
    4466:	4b18      	ldr	r3, [pc, #96]	; (44c8 <nrfx_spi_xfer+0x94>)
    4468:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    446c:	f106 080c 	add.w	r8, r6, #12
    4470:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
    4474:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
    p_cb->abort = false;
    4478:	2300      	movs	r3, #0
    447a:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    447e:	7fb3      	ldrb	r3, [r6, #30]
    4480:	2bff      	cmp	r3, #255	; 0xff
    4482:	d00a      	beq.n	449a <nrfx_spi_xfer+0x66>
    *p_pin = pin_number & 0x1F;
    4484:	f003 011f 	and.w	r1, r3, #31
    return pin_number >> 5;
    4488:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    448a:	2b01      	cmp	r3, #1
    448c:	d011      	beq.n	44b2 <nrfx_spi_xfer+0x7e>
        case 0: return NRF_P0;
    448e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4492:	2301      	movs	r3, #1
    4494:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
    4496:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    {
        nrf_gpio_pin_write(p_cb->ss_pin, 0);
    }
    if (flags)
    449a:	b167      	cbz	r7, 44b6 <nrfx_spi_xfer+0x82>
    {
        p_cb->transfer_in_progress = false;
    449c:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
    44a0:	4b09      	ldr	r3, [pc, #36]	; (44c8 <nrfx_spi_xfer+0x94>)
    44a2:	eb03 0ccc 	add.w	ip, r3, ip, lsl #3
    44a6:	2300      	movs	r3, #0
    44a8:	f88c 301d 	strb.w	r3, [ip, #29]
        err_code = NRFX_ERROR_NOT_SUPPORTED;
    44ac:	4807      	ldr	r0, [pc, #28]	; (44cc <nrfx_spi_xfer+0x98>)
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    44ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        case 1: return NRF_P1;
    44b2:	4a07      	ldr	r2, [pc, #28]	; (44d0 <nrfx_spi_xfer+0x9c>)
    44b4:	e7ed      	b.n	4492 <nrfx_spi_xfer+0x5e>
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
    44b6:	4672      	mov	r2, lr
    44b8:	4629      	mov	r1, r5
    44ba:	6820      	ldr	r0, [r4, #0]
    44bc:	f7ff fea2 	bl	4204 <spi_xfer>
    nrfx_err_t err_code = NRFX_SUCCESS;
    44c0:	4804      	ldr	r0, [pc, #16]	; (44d4 <nrfx_spi_xfer+0xa0>)
    44c2:	e7f4      	b.n	44ae <nrfx_spi_xfer+0x7a>
        return err_code;
    44c4:	4804      	ldr	r0, [pc, #16]	; (44d8 <nrfx_spi_xfer+0xa4>)
    44c6:	e7f2      	b.n	44ae <nrfx_spi_xfer+0x7a>
    44c8:	20000c40 	.word	0x20000c40
    44cc:	0bad0003 	.word	0x0bad0003
    44d0:	50000300 	.word	0x50000300
    44d4:	0bad0000 	.word	0x0bad0000
    44d8:	0bad000b 	.word	0x0bad000b

000044dc <nrfx_spi_1_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPI1_ENABLED)
void nrfx_spi_1_irq_handler(void)
{
    44dc:	b508      	push	{r3, lr}
    irq_handler(NRF_SPI1, &m_cb[NRFX_SPI1_INST_IDX]);
    44de:	4903      	ldr	r1, [pc, #12]	; (44ec <nrfx_spi_1_irq_handler+0x10>)
    44e0:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    44e4:	f003 f88a 	bl	75fc <irq_handler>
}
    44e8:	bd08      	pop	{r3, pc}
    44ea:	bf00      	nop
    44ec:	20000c40 	.word	0x20000c40

000044f0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    44f0:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    44f2:	4c14      	ldr	r4, [pc, #80]	; (4544 <_DoInit+0x54>)
    44f4:	2303      	movs	r3, #3
    44f6:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    44f8:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    44fa:	4a13      	ldr	r2, [pc, #76]	; (4548 <_DoInit+0x58>)
    44fc:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    44fe:	4b13      	ldr	r3, [pc, #76]	; (454c <_DoInit+0x5c>)
    4500:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    4502:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    4506:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    4508:	2300      	movs	r3, #0
    450a:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    450c:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    450e:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    4510:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    4512:	4a0f      	ldr	r2, [pc, #60]	; (4550 <_DoInit+0x60>)
    4514:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    4516:	2210      	movs	r2, #16
    4518:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    451a:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    451c:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    451e:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    4520:	490c      	ldr	r1, [pc, #48]	; (4554 <_DoInit+0x64>)
    4522:	1de0      	adds	r0, r4, #7
    4524:	f002 f876 	bl	6614 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4528:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    452c:	490a      	ldr	r1, [pc, #40]	; (4558 <_DoInit+0x68>)
    452e:	4620      	mov	r0, r4
    4530:	f002 f870 	bl	6614 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4534:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    4538:	2320      	movs	r3, #32
    453a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    453c:	f3bf 8f5f 	dmb	sy
}
    4540:	bd10      	pop	{r4, pc}
    4542:	bf00      	nop
    4544:	20000c68 	.word	0x20000c68
    4548:	00008360 	.word	0x00008360
    454c:	20000d20 	.word	0x20000d20
    4550:	20000d10 	.word	0x20000d10
    4554:	0000836c 	.word	0x0000836c
    4558:	00008370 	.word	0x00008370

0000455c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    455c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    455e:	460f      	mov	r7, r1
    4560:	4616      	mov	r6, r2
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    4562:	4b18      	ldr	r3, [pc, #96]	; (45c4 <SEGGER_RTT_WriteNoLock+0x68>)
    4564:	1c45      	adds	r5, r0, #1
    4566:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    456a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    456e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    4572:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    4576:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    4578:	2c01      	cmp	r4, #1
    457a:	d011      	beq.n	45a0 <SEGGER_RTT_WriteNoLock+0x44>
    457c:	2c02      	cmp	r4, #2
    457e:	d01c      	beq.n	45ba <SEGGER_RTT_WriteNoLock+0x5e>
    4580:	b114      	cbz	r4, 4588 <SEGGER_RTT_WriteNoLock+0x2c>
    4582:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
    4584:	4620      	mov	r0, r4
    4586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    4588:	4628      	mov	r0, r5
    458a:	f003 f846 	bl	761a <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    458e:	4286      	cmp	r6, r0
    4590:	d8f8      	bhi.n	4584 <SEGGER_RTT_WriteNoLock+0x28>
      _WriteNoCheck(pRing, pData, NumBytes);
    4592:	4632      	mov	r2, r6
    4594:	4639      	mov	r1, r7
    4596:	4628      	mov	r0, r5
    4598:	f003 f84b 	bl	7632 <_WriteNoCheck>
      Status = NumBytes;
    459c:	4634      	mov	r4, r6
    459e:	e7f1      	b.n	4584 <SEGGER_RTT_WriteNoLock+0x28>
    Avail = _GetAvailWriteSpace(pRing);
    45a0:	4628      	mov	r0, r5
    45a2:	f003 f83a 	bl	761a <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    45a6:	4634      	mov	r4, r6
    45a8:	4286      	cmp	r6, r0
    45aa:	bf28      	it	cs
    45ac:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    45ae:	4622      	mov	r2, r4
    45b0:	4639      	mov	r1, r7
    45b2:	4628      	mov	r0, r5
    45b4:	f003 f83d 	bl	7632 <_WriteNoCheck>
    break;
    45b8:	e7e4      	b.n	4584 <SEGGER_RTT_WriteNoLock+0x28>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    45ba:	4628      	mov	r0, r5
    45bc:	f003 f85f 	bl	767e <_WriteBlocking>
    45c0:	4604      	mov	r4, r0
    break;
    45c2:	e7df      	b.n	4584 <SEGGER_RTT_WriteNoLock+0x28>
    45c4:	20000c68 	.word	0x20000c68

000045c8 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    45c8:	4b03      	ldr	r3, [pc, #12]	; (45d8 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    45ca:	e000      	b.n	45ce <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    45cc:	3318      	adds	r3, #24
	while (dev < __device_end) {
    45ce:	4a03      	ldr	r2, [pc, #12]	; (45dc <z_device_state_init+0x14>)
    45d0:	4293      	cmp	r3, r2
    45d2:	d3fb      	bcc.n	45cc <z_device_state_init+0x4>
	}
}
    45d4:	4770      	bx	lr
    45d6:	bf00      	nop
    45d8:	00007c00 	.word	0x00007c00
    45dc:	00007c90 	.word	0x00007c90

000045e0 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    45e0:	b570      	push	{r4, r5, r6, lr}
    45e2:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    45e4:	4b11      	ldr	r3, [pc, #68]	; (462c <z_sys_init_run_level+0x4c>)
    45e6:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    45ea:	e009      	b.n	4600 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    45ec:	4240      	negs	r0, r0
    45ee:	e017      	b.n	4620 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    45f0:	68eb      	ldr	r3, [r5, #12]
    45f2:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    45f4:	68ea      	ldr	r2, [r5, #12]
    45f6:	7853      	ldrb	r3, [r2, #1]
    45f8:	f043 0301 	orr.w	r3, r3, #1
    45fc:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    45fe:	3408      	adds	r4, #8
    4600:	1c73      	adds	r3, r6, #1
    4602:	4a0a      	ldr	r2, [pc, #40]	; (462c <z_sys_init_run_level+0x4c>)
    4604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4608:	42a3      	cmp	r3, r4
    460a:	d90d      	bls.n	4628 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    460c:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    460e:	6823      	ldr	r3, [r4, #0]
    4610:	4628      	mov	r0, r5
    4612:	4798      	blx	r3
		if (dev != NULL) {
    4614:	2d00      	cmp	r5, #0
    4616:	d0f2      	beq.n	45fe <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    4618:	2800      	cmp	r0, #0
    461a:	d0eb      	beq.n	45f4 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    461c:	2800      	cmp	r0, #0
    461e:	dbe5      	blt.n	45ec <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    4620:	28ff      	cmp	r0, #255	; 0xff
    4622:	dde5      	ble.n	45f0 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    4624:	20ff      	movs	r0, #255	; 0xff
    4626:	e7e3      	b.n	45f0 <z_sys_init_run_level+0x10>
		}
	}
}
    4628:	bd70      	pop	{r4, r5, r6, pc}
    462a:	bf00      	nop
    462c:	00008378 	.word	0x00008378

00004630 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    4630:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    4632:	4605      	mov	r5, r0
    4634:	b328      	cbz	r0, 4682 <z_impl_device_get_binding+0x52>
    4636:	7803      	ldrb	r3, [r0, #0]
    4638:	b32b      	cbz	r3, 4686 <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    463a:	4c14      	ldr	r4, [pc, #80]	; (468c <z_impl_device_get_binding+0x5c>)
    463c:	e000      	b.n	4640 <z_impl_device_get_binding+0x10>
    463e:	3418      	adds	r4, #24
    4640:	4b13      	ldr	r3, [pc, #76]	; (4690 <z_impl_device_get_binding+0x60>)
    4642:	429c      	cmp	r4, r3
    4644:	d008      	beq.n	4658 <z_impl_device_get_binding+0x28>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    4646:	4620      	mov	r0, r4
    4648:	f003 f853 	bl	76f2 <z_device_is_ready>
    464c:	2800      	cmp	r0, #0
    464e:	d0f6      	beq.n	463e <z_impl_device_get_binding+0xe>
    4650:	6823      	ldr	r3, [r4, #0]
    4652:	42ab      	cmp	r3, r5
    4654:	d1f3      	bne.n	463e <z_impl_device_get_binding+0xe>
    4656:	e012      	b.n	467e <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    4658:	4c0c      	ldr	r4, [pc, #48]	; (468c <z_impl_device_get_binding+0x5c>)
    465a:	e000      	b.n	465e <z_impl_device_get_binding+0x2e>
    465c:	3418      	adds	r4, #24
    465e:	4b0c      	ldr	r3, [pc, #48]	; (4690 <z_impl_device_get_binding+0x60>)
    4660:	429c      	cmp	r4, r3
    4662:	d00b      	beq.n	467c <z_impl_device_get_binding+0x4c>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    4664:	4620      	mov	r0, r4
    4666:	f003 f844 	bl	76f2 <z_device_is_ready>
    466a:	2800      	cmp	r0, #0
    466c:	d0f6      	beq.n	465c <z_impl_device_get_binding+0x2c>
    466e:	6821      	ldr	r1, [r4, #0]
    4670:	4628      	mov	r0, r5
    4672:	f002 f806 	bl	6682 <strcmp>
    4676:	2800      	cmp	r0, #0
    4678:	d1f0      	bne.n	465c <z_impl_device_get_binding+0x2c>
    467a:	e000      	b.n	467e <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
    467c:	2400      	movs	r4, #0
}
    467e:	4620      	mov	r0, r4
    4680:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    4682:	4604      	mov	r4, r0
    4684:	e7fb      	b.n	467e <z_impl_device_get_binding+0x4e>
    4686:	2400      	movs	r4, #0
    4688:	e7f9      	b.n	467e <z_impl_device_get_binding+0x4e>
    468a:	bf00      	nop
    468c:	00007c00 	.word	0x00007c00
    4690:	00007c90 	.word	0x00007c90

00004694 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    4694:	b510      	push	{r4, lr}
    4696:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    4698:	4c11      	ldr	r4, [pc, #68]	; (46e0 <init_idle_thread+0x4c>)
    469a:	23b0      	movs	r3, #176	; 0xb0
    469c:	fb03 4400 	mla	r4, r3, r0, r4
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    46a0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    46a4:	4b0f      	ldr	r3, [pc, #60]	; (46e4 <init_idle_thread+0x50>)
    46a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	z_setup_new_thread(thread, stack,
    46aa:	4a0f      	ldr	r2, [pc, #60]	; (46e8 <init_idle_thread+0x54>)
    46ac:	9205      	str	r2, [sp, #20]
    46ae:	2201      	movs	r2, #1
    46b0:	9204      	str	r2, [sp, #16]
    46b2:	220f      	movs	r2, #15
    46b4:	9203      	str	r2, [sp, #12]
    46b6:	2200      	movs	r2, #0
    46b8:	9202      	str	r2, [sp, #8]
    46ba:	9201      	str	r2, [sp, #4]
    46bc:	9300      	str	r3, [sp, #0]
    46be:	4b0b      	ldr	r3, [pc, #44]	; (46ec <init_idle_thread+0x58>)
    46c0:	f44f 72a0 	mov.w	r2, #320	; 0x140
    46c4:	490a      	ldr	r1, [pc, #40]	; (46f0 <init_idle_thread+0x5c>)
    46c6:	f44f 7cb0 	mov.w	ip, #352	; 0x160
    46ca:	fb0c 1100 	mla	r1, ip, r0, r1
    46ce:	4620      	mov	r0, r4
    46d0:	f000 f94a 	bl	4968 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    46d4:	7b63      	ldrb	r3, [r4, #13]
    46d6:	f023 0304 	bic.w	r3, r3, #4
    46da:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    46dc:	b006      	add	sp, #24
    46de:	bd10      	pop	{r4, pc}
    46e0:	200004c0 	.word	0x200004c0
    46e4:	20001d20 	.word	0x20001d20
    46e8:	00008390 	.word	0x00008390
    46ec:	00004ac5 	.word	0x00004ac5
    46f0:	20002f60 	.word	0x20002f60

000046f4 <bg_thread_main>:
{
    46f4:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    46f6:	4b0a      	ldr	r3, [pc, #40]	; (4720 <bg_thread_main+0x2c>)
    46f8:	2201      	movs	r2, #1
    46fa:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    46fc:	2002      	movs	r0, #2
    46fe:	f7ff ff6f 	bl	45e0 <z_sys_init_run_level>
	boot_banner();
    4702:	f001 f88f 	bl	5824 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    4706:	2003      	movs	r0, #3
    4708:	f7ff ff6a 	bl	45e0 <z_sys_init_run_level>
	z_init_static_threads();
    470c:	f000 f990 	bl	4a30 <z_init_static_threads>
	main();
    4710:	f7fb fe64 	bl	3dc <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    4714:	4a03      	ldr	r2, [pc, #12]	; (4724 <bg_thread_main+0x30>)
    4716:	7b13      	ldrb	r3, [r2, #12]
    4718:	f023 0301 	bic.w	r3, r3, #1
    471c:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    471e:	bd08      	pop	{r3, pc}
    4720:	20001f36 	.word	0x20001f36
    4724:	20000570 	.word	0x20000570

00004728 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    4728:	b508      	push	{r3, lr}
    472a:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    472c:	4a01      	ldr	r2, [pc, #4]	; (4734 <switch_to_main_thread+0xc>)
    472e:	4802      	ldr	r0, [pc, #8]	; (4738 <switch_to_main_thread+0x10>)
    4730:	f7fd fa7a 	bl	1c28 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    4734:	000046f5 	.word	0x000046f5
    4738:	20000570 	.word	0x20000570

0000473c <z_bss_zero>:
{
    473c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    473e:	4803      	ldr	r0, [pc, #12]	; (474c <z_bss_zero+0x10>)
    4740:	4a03      	ldr	r2, [pc, #12]	; (4750 <z_bss_zero+0x14>)
    4742:	1a12      	subs	r2, r2, r0
    4744:	2100      	movs	r1, #0
    4746:	f002 fffb 	bl	7740 <z_early_memset>
}
    474a:	bd08      	pop	{r3, pc}
    474c:	200004a0 	.word	0x200004a0
    4750:	20001f38 	.word	0x20001f38

00004754 <z_init_cpu>:
{
    4754:	b510      	push	{r4, lr}
    4756:	4604      	mov	r4, r0
	init_idle_thread(id);
    4758:	f7ff ff9c 	bl	4694 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    475c:	490b      	ldr	r1, [pc, #44]	; (478c <z_init_cpu+0x38>)
    475e:	23b0      	movs	r3, #176	; 0xb0
    4760:	fb03 1104 	mla	r1, r3, r4, r1
    4764:	4a0a      	ldr	r2, [pc, #40]	; (4790 <z_init_cpu+0x3c>)
    4766:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    476a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    476e:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    4770:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    4772:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    4776:	4b07      	ldr	r3, [pc, #28]	; (4794 <z_init_cpu+0x40>)
    4778:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    477c:	f503 6302 	add.w	r3, r3, #2080	; 0x820
	_kernel.cpus[id].irq_stack =
    4780:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    4784:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    4788:	6063      	str	r3, [r4, #4]
}
    478a:	bd10      	pop	{r4, pc}
    478c:	200004c0 	.word	0x200004c0
    4790:	20001d20 	.word	0x20001d20
    4794:	200030c0 	.word	0x200030c0

00004798 <prepare_multithreading>:
{
    4798:	b570      	push	{r4, r5, r6, lr}
    479a:	b086      	sub	sp, #24
	z_sched_init();
    479c:	f000 fddc 	bl	5358 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    47a0:	4d10      	ldr	r5, [pc, #64]	; (47e4 <prepare_multithreading+0x4c>)
    47a2:	4b11      	ldr	r3, [pc, #68]	; (47e8 <prepare_multithreading+0x50>)
    47a4:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    47a6:	4b11      	ldr	r3, [pc, #68]	; (47ec <prepare_multithreading+0x54>)
    47a8:	9305      	str	r3, [sp, #20]
    47aa:	2301      	movs	r3, #1
    47ac:	9304      	str	r3, [sp, #16]
    47ae:	2400      	movs	r4, #0
    47b0:	9403      	str	r4, [sp, #12]
    47b2:	9402      	str	r4, [sp, #8]
    47b4:	9401      	str	r4, [sp, #4]
    47b6:	9400      	str	r4, [sp, #0]
    47b8:	4b0d      	ldr	r3, [pc, #52]	; (47f0 <prepare_multithreading+0x58>)
    47ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    47be:	490d      	ldr	r1, [pc, #52]	; (47f4 <prepare_multithreading+0x5c>)
    47c0:	4628      	mov	r0, r5
    47c2:	f000 f8d1 	bl	4968 <z_setup_new_thread>
    47c6:	4606      	mov	r6, r0
    47c8:	7b6b      	ldrb	r3, [r5, #13]
    47ca:	f023 0304 	bic.w	r3, r3, #4
    47ce:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    47d0:	4628      	mov	r0, r5
    47d2:	f003 f88a 	bl	78ea <z_ready_thread>
	z_init_cpu(0);
    47d6:	4620      	mov	r0, r4
    47d8:	f7ff ffbc 	bl	4754 <z_init_cpu>
}
    47dc:	4630      	mov	r0, r6
    47de:	b006      	add	sp, #24
    47e0:	bd70      	pop	{r4, r5, r6, pc}
    47e2:	bf00      	nop
    47e4:	20000570 	.word	0x20000570
    47e8:	20001d20 	.word	0x20001d20
    47ec:	00008398 	.word	0x00008398
    47f0:	000046f5 	.word	0x000046f5
    47f4:	20001f40 	.word	0x20001f40

000047f8 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    47f8:	b500      	push	{lr}
    47fa:	b0ad      	sub	sp, #180	; 0xb4
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    47fc:	4b1d      	ldr	r3, [pc, #116]	; (4874 <z_cstart+0x7c>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    47fe:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    4802:	4c1d      	ldr	r4, [pc, #116]	; (4878 <z_cstart+0x80>)
    4804:	6963      	ldr	r3, [r4, #20]
    4806:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    480a:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    480c:	23e0      	movs	r3, #224	; 0xe0
    480e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    4812:	2500      	movs	r5, #0
    4814:	77e5      	strb	r5, [r4, #31]
    4816:	7625      	strb	r5, [r4, #24]
    4818:	7665      	strb	r5, [r4, #25]
    481a:	76a5      	strb	r5, [r4, #26]
    481c:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4820:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4822:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    4826:	6263      	str	r3, [r4, #36]	; 0x24
    4828:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    482c:	f7fd fb54 	bl	1ed8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    4830:	f7fd f8d4 	bl	19dc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4834:	f04f 33ff 	mov.w	r3, #4294967295
    4838:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    483a:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    483c:	f7fd fc68 	bl	2110 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    4840:	f7fd fbf8 	bl	2034 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    4844:	2401      	movs	r4, #1
    4846:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    484a:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    484e:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    4850:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
    4852:	9529      	str	r5, [sp, #164]	; 0xa4
#endif

	_current_cpu->current = dummy_thread;
    4854:	4b09      	ldr	r3, [pc, #36]	; (487c <z_cstart+0x84>)
    4856:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    485a:	f7ff feb5 	bl	45c8 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    485e:	4628      	mov	r0, r5
    4860:	f7ff febe 	bl	45e0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4864:	4620      	mov	r0, r4
    4866:	f7ff febb 	bl	45e0 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    486a:	f7ff ff95 	bl	4798 <prepare_multithreading>
    486e:	f7ff ff5b 	bl	4728 <switch_to_main_thread>
    4872:	bf00      	nop
    4874:	200038e0 	.word	0x200038e0
    4878:	e000ed00 	.word	0xe000ed00
    487c:	20001d20 	.word	0x20001d20

00004880 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    4880:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4882:	4c06      	ldr	r4, [pc, #24]	; (489c <init_mem_slab_module+0x1c>)
	int rc = 0;
    4884:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4886:	e000      	b.n	488a <init_mem_slab_module+0xa>
    4888:	341c      	adds	r4, #28
    488a:	4b05      	ldr	r3, [pc, #20]	; (48a0 <init_mem_slab_module+0x20>)
    488c:	429c      	cmp	r4, r3
    488e:	d204      	bcs.n	489a <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    4890:	4620      	mov	r0, r4
    4892:	f002 ff5d 	bl	7750 <create_free_list>
		if (rc < 0) {
    4896:	2800      	cmp	r0, #0
    4898:	daf6      	bge.n	4888 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    489a:	bd10      	pop	{r4, pc}
    489c:	2000044c 	.word	0x2000044c
    48a0:	2000044c 	.word	0x2000044c

000048a4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    48a4:	b530      	push	{r4, r5, lr}
    48a6:	b083      	sub	sp, #12
    48a8:	460d      	mov	r5, r1
	__asm__ volatile(
    48aa:	f04f 0420 	mov.w	r4, #32
    48ae:	f3ef 8111 	mrs	r1, BASEPRI
    48b2:	f384 8812 	msr	BASEPRI_MAX, r4
    48b6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    48ba:	6944      	ldr	r4, [r0, #20]
    48bc:	b16c      	cbz	r4, 48da <k_mem_slab_alloc+0x36>
		/* take a free block */
		*mem = slab->free_list;
    48be:	602c      	str	r4, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
    48c0:	6943      	ldr	r3, [r0, #20]
    48c2:	681b      	ldr	r3, [r3, #0]
    48c4:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    48c6:	6983      	ldr	r3, [r0, #24]
    48c8:	3301      	adds	r3, #1
    48ca:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    48cc:	2000      	movs	r0, #0
	__asm__ volatile(
    48ce:	f381 8811 	msr	BASEPRI, r1
    48d2:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    48d6:	b003      	add	sp, #12
    48d8:	bd30      	pop	{r4, r5, pc}
    48da:	f100 0c08 	add.w	ip, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    48de:	ea53 0402 	orrs.w	r4, r3, r2
    48e2:	d104      	bne.n	48ee <k_mem_slab_alloc+0x4a>
		*mem = NULL;
    48e4:	2300      	movs	r3, #0
    48e6:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
    48e8:	f06f 000b 	mvn.w	r0, #11
    48ec:	e7ef      	b.n	48ce <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    48ee:	9200      	str	r2, [sp, #0]
    48f0:	9301      	str	r3, [sp, #4]
    48f2:	4602      	mov	r2, r0
    48f4:	4660      	mov	r0, ip
    48f6:	f000 fc03 	bl	5100 <z_pend_curr>
		if (result == 0) {
    48fa:	2800      	cmp	r0, #0
    48fc:	d1eb      	bne.n	48d6 <k_mem_slab_alloc+0x32>
			*mem = _current->base.swap_data;
    48fe:	4b02      	ldr	r3, [pc, #8]	; (4908 <k_mem_slab_alloc+0x64>)
    4900:	689b      	ldr	r3, [r3, #8]
    4902:	695b      	ldr	r3, [r3, #20]
    4904:	602b      	str	r3, [r5, #0]
		return result;
    4906:	e7e6      	b.n	48d6 <k_mem_slab_alloc+0x32>
    4908:	20001d20 	.word	0x20001d20

0000490c <z_thread_monitor_exit>:
	__asm__ volatile(
    490c:	f04f 0320 	mov.w	r3, #32
    4910:	f3ef 8111 	mrs	r1, BASEPRI
    4914:	f383 8812 	msr	BASEPRI_MAX, r3
    4918:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    491c:	4b0a      	ldr	r3, [pc, #40]	; (4948 <z_thread_monitor_exit+0x3c>)
    491e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4920:	4283      	cmp	r3, r0
    4922:	d104      	bne.n	492e <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    4924:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    4926:	4b08      	ldr	r3, [pc, #32]	; (4948 <z_thread_monitor_exit+0x3c>)
    4928:	629a      	str	r2, [r3, #40]	; 0x28
    492a:	e007      	b.n	493c <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    492c:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    492e:	b113      	cbz	r3, 4936 <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    4930:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    4932:	4282      	cmp	r2, r0
    4934:	d1fa      	bne.n	492c <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    4936:	b10b      	cbz	r3, 493c <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    4938:	6f02      	ldr	r2, [r0, #112]	; 0x70
    493a:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    493c:	f381 8811 	msr	BASEPRI, r1
    4940:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    4944:	4770      	bx	lr
    4946:	bf00      	nop
    4948:	20001d20 	.word	0x20001d20

0000494c <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    494c:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    494e:	ea53 0102 	orrs.w	r1, r3, r2
    4952:	d102      	bne.n	495a <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    4954:	f002 ff65 	bl	7822 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    4958:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    495a:	4902      	ldr	r1, [pc, #8]	; (4964 <schedule_new_thread+0x18>)
    495c:	3018      	adds	r0, #24
    495e:	f000 fe53 	bl	5608 <z_add_timeout>
    4962:	e7f9      	b.n	4958 <schedule_new_thread+0xc>
    4964:	00007923 	.word	0x00007923

00004968 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    4968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    496c:	b085      	sub	sp, #20
    496e:	4604      	mov	r4, r0
    4970:	460f      	mov	r7, r1
    4972:	4615      	mov	r5, r2
    4974:	461e      	mov	r6, r3
    4976:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    497a:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    497e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    4982:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    4986:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    498a:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    498c:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    498e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    4990:	2204      	movs	r2, #4
    4992:	9911      	ldr	r1, [sp, #68]	; 0x44
    4994:	f002 ff49 	bl	782a <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    4998:	462a      	mov	r2, r5
    499a:	4639      	mov	r1, r7
    499c:	4620      	mov	r0, r4
    499e:	f002 ff28 	bl	77f2 <setup_thread_stack>
    49a2:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    49a4:	f8cd 8008 	str.w	r8, [sp, #8]
    49a8:	f8cd 9004 	str.w	r9, [sp, #4]
    49ac:	f8cd a000 	str.w	sl, [sp]
    49b0:	4633      	mov	r3, r6
    49b2:	4602      	mov	r2, r0
    49b4:	4639      	mov	r1, r7
    49b6:	4620      	mov	r0, r4
    49b8:	f7fd f8ec 	bl	1b94 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    49bc:	2300      	movs	r3, #0
    49be:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    49c0:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    49c2:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    49c6:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    49ca:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    49ce:	f04f 0320 	mov.w	r3, #32
    49d2:	f3ef 8211 	mrs	r2, BASEPRI
    49d6:	f383 8812 	msr	BASEPRI_MAX, r3
    49da:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    49de:	4b13      	ldr	r3, [pc, #76]	; (4a2c <z_setup_new_thread+0xc4>)
    49e0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    49e2:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    49e4:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    49e6:	f382 8811 	msr	BASEPRI, r2
    49ea:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    49ee:	f1bb 0f00 	cmp.w	fp, #0
    49f2:	d013      	beq.n	4a1c <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
    49f4:	221f      	movs	r2, #31
    49f6:	4659      	mov	r1, fp
    49f8:	f104 0074 	add.w	r0, r4, #116	; 0x74
    49fc:	f001 fe14 	bl	6628 <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    4a00:	2300      	movs	r3, #0
    4a02:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    4a06:	4b09      	ldr	r3, [pc, #36]	; (4a2c <z_setup_new_thread+0xc4>)
    4a08:	689b      	ldr	r3, [r3, #8]
    4a0a:	b15b      	cbz	r3, 4a24 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    4a0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    4a10:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
    4a14:	4628      	mov	r0, r5
    4a16:	b005      	add	sp, #20
    4a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    4a1c:	2300      	movs	r3, #0
    4a1e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    4a22:	e7f0      	b.n	4a06 <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    4a24:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    4a28:	e7f4      	b.n	4a14 <z_setup_new_thread+0xac>
    4a2a:	bf00      	nop
    4a2c:	20001d20 	.word	0x20001d20

00004a30 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    4a30:	b530      	push	{r4, r5, lr}
    4a32:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    4a34:	4c21      	ldr	r4, [pc, #132]	; (4abc <z_init_static_threads+0x8c>)
    4a36:	e014      	b.n	4a62 <z_init_static_threads+0x32>
		z_setup_new_thread(
    4a38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4a3a:	9305      	str	r3, [sp, #20]
    4a3c:	6a23      	ldr	r3, [r4, #32]
    4a3e:	9304      	str	r3, [sp, #16]
    4a40:	69e3      	ldr	r3, [r4, #28]
    4a42:	9303      	str	r3, [sp, #12]
    4a44:	69a3      	ldr	r3, [r4, #24]
    4a46:	9302      	str	r3, [sp, #8]
    4a48:	6963      	ldr	r3, [r4, #20]
    4a4a:	9301      	str	r3, [sp, #4]
    4a4c:	6923      	ldr	r3, [r4, #16]
    4a4e:	9300      	str	r3, [sp, #0]
    4a50:	68e3      	ldr	r3, [r4, #12]
    4a52:	68a2      	ldr	r2, [r4, #8]
    4a54:	6861      	ldr	r1, [r4, #4]
    4a56:	6820      	ldr	r0, [r4, #0]
    4a58:	f7ff ff86 	bl	4968 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    4a5c:	6823      	ldr	r3, [r4, #0]
    4a5e:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    4a60:	3430      	adds	r4, #48	; 0x30
    4a62:	4b17      	ldr	r3, [pc, #92]	; (4ac0 <z_init_static_threads+0x90>)
    4a64:	429c      	cmp	r4, r3
    4a66:	d3e7      	bcc.n	4a38 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    4a68:	f000 f9de 	bl	4e28 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    4a6c:	4c13      	ldr	r4, [pc, #76]	; (4abc <z_init_static_threads+0x8c>)
    4a6e:	e000      	b.n	4a72 <z_init_static_threads+0x42>
    4a70:	3430      	adds	r4, #48	; 0x30
    4a72:	4b13      	ldr	r3, [pc, #76]	; (4ac0 <z_init_static_threads+0x90>)
    4a74:	429c      	cmp	r4, r3
    4a76:	d21c      	bcs.n	4ab2 <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    4a78:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4a7a:	f1b0 3fff 	cmp.w	r0, #4294967295
    4a7e:	d0f7      	beq.n	4a70 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
    4a80:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    4a82:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    4a86:	17c1      	asrs	r1, r0, #31
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    4a88:	03c9      	lsls	r1, r1, #15
    4a8a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    4a8e:	03c0      	lsls	r0, r0, #15
    4a90:	f240 33e7 	movw	r3, #999	; 0x3e7
    4a94:	18c0      	adds	r0, r0, r3
    4a96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4a9a:	f04f 0300 	mov.w	r3, #0
    4a9e:	f141 0100 	adc.w	r1, r1, #0
    4aa2:	f7fb fb2d 	bl	100 <__aeabi_uldivmod>
    4aa6:	4602      	mov	r2, r0
    4aa8:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    4aaa:	4628      	mov	r0, r5
    4aac:	f7ff ff4e 	bl	494c <schedule_new_thread>
    4ab0:	e7de      	b.n	4a70 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
    4ab2:	f000 fbdb 	bl	526c <k_sched_unlock>
}
    4ab6:	b007      	add	sp, #28
    4ab8:	bd30      	pop	{r4, r5, pc}
    4aba:	bf00      	nop
    4abc:	2000044c 	.word	0x2000044c
    4ac0:	2000044c 	.word	0x2000044c

00004ac4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    4ac4:	b508      	push	{r3, lr}
    4ac6:	e001      	b.n	4acc <idle+0x8>
	arch_cpu_idle();
    4ac8:	f7fc ff8e 	bl	19e8 <arch_cpu_idle>
	__asm__ volatile(
    4acc:	f04f 0220 	mov.w	r2, #32
    4ad0:	f3ef 8311 	mrs	r3, BASEPRI
    4ad4:	f382 8812 	msr	BASEPRI_MAX, r2
    4ad8:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    4adc:	f003 f809 	bl	7af2 <z_get_next_timeout_expiry>
    4ae0:	4b05      	ldr	r3, [pc, #20]	; (4af8 <idle+0x34>)
    4ae2:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
    4ae4:	4b05      	ldr	r3, [pc, #20]	; (4afc <idle+0x38>)
    4ae6:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    4ae8:	2b00      	cmp	r3, #0
    4aea:	d0ed      	beq.n	4ac8 <idle+0x4>
    4aec:	f7fc fd82 	bl	15f4 <pm_system_suspend>
    4af0:	2800      	cmp	r0, #0
    4af2:	d1eb      	bne.n	4acc <idle+0x8>
    4af4:	e7e8      	b.n	4ac8 <idle+0x4>
    4af6:	bf00      	nop
    4af8:	20001d20 	.word	0x20001d20
    4afc:	20001f36 	.word	0x20001f36

00004b00 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    4b00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4b04:	b083      	sub	sp, #12
    4b06:	4604      	mov	r4, r0
    4b08:	461d      	mov	r5, r3
    4b0a:	f04f 0320 	mov.w	r3, #32
    4b0e:	f3ef 8711 	mrs	r7, BASEPRI
    4b12:	f383 8812 	msr	BASEPRI_MAX, r3
    4b16:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    4b1a:	68c1      	ldr	r1, [r0, #12]
    4b1c:	b999      	cbnz	r1, 4b46 <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    4b1e:	2900      	cmp	r1, #0
    4b20:	d14f      	bne.n	4bc2 <z_impl_k_mutex_lock+0xc2>
    4b22:	4b3a      	ldr	r3, [pc, #232]	; (4c0c <z_impl_k_mutex_lock+0x10c>)
    4b24:	689b      	ldr	r3, [r3, #8]
    4b26:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    4b2a:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    4b2c:	3101      	adds	r1, #1
    4b2e:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    4b30:	4b36      	ldr	r3, [pc, #216]	; (4c0c <z_impl_k_mutex_lock+0x10c>)
    4b32:	689b      	ldr	r3, [r3, #8]
    4b34:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    4b36:	f387 8811 	msr	BASEPRI, r7
    4b3a:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    4b3e:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    4b40:	b003      	add	sp, #12
    4b42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4b46:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    4b48:	6882      	ldr	r2, [r0, #8]
    4b4a:	4b30      	ldr	r3, [pc, #192]	; (4c0c <z_impl_k_mutex_lock+0x10c>)
    4b4c:	689b      	ldr	r3, [r3, #8]
    4b4e:	429a      	cmp	r2, r3
    4b50:	d0e5      	beq.n	4b1e <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    4b52:	ea55 0106 	orrs.w	r1, r5, r6
    4b56:	bf0c      	ite	eq
    4b58:	f04f 0801 	moveq.w	r8, #1
    4b5c:	f04f 0800 	movne.w	r8, #0
    4b60:	d031      	beq.n	4bc6 <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
    4b62:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    4b66:	4649      	mov	r1, r9
    4b68:	f993 000e 	ldrsb.w	r0, [r3, #14]
    4b6c:	f002 fe6e 	bl	784c <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    4b70:	4581      	cmp	r9, r0
    4b72:	dc2f      	bgt.n	4bd4 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
    4b74:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    4b78:	9600      	str	r6, [sp, #0]
    4b7a:	9501      	str	r5, [sp, #4]
    4b7c:	4622      	mov	r2, r4
    4b7e:	4639      	mov	r1, r7
    4b80:	4823      	ldr	r0, [pc, #140]	; (4c10 <z_impl_k_mutex_lock+0x110>)
    4b82:	f000 fabd 	bl	5100 <z_pend_curr>
	if (got_mutex == 0) {
    4b86:	2800      	cmp	r0, #0
    4b88:	d0da      	beq.n	4b40 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
    4b8a:	f04f 0320 	mov.w	r3, #32
    4b8e:	f3ef 8511 	mrs	r5, BASEPRI
    4b92:	f383 8812 	msr	BASEPRI_MAX, r3
    4b96:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    4b9a:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4b9c:	429c      	cmp	r4, r3
    4b9e:	d01f      	beq.n	4be0 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    4ba0:	b1f3      	cbz	r3, 4be0 <z_impl_k_mutex_lock+0xe0>
    4ba2:	6921      	ldr	r1, [r4, #16]
    4ba4:	f993 000e 	ldrsb.w	r0, [r3, #14]
    4ba8:	f002 fe50 	bl	784c <new_prio_for_inheritance>
    4bac:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    4bae:	4620      	mov	r0, r4
    4bb0:	f002 fe57 	bl	7862 <adjust_owner_prio>
    4bb4:	b9b0      	cbnz	r0, 4be4 <z_impl_k_mutex_lock+0xe4>
    4bb6:	f1b9 0f00 	cmp.w	r9, #0
    4bba:	d015      	beq.n	4be8 <z_impl_k_mutex_lock+0xe8>
    4bbc:	f04f 0801 	mov.w	r8, #1
    4bc0:	e012      	b.n	4be8 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    4bc2:	6923      	ldr	r3, [r4, #16]
    4bc4:	e7b1      	b.n	4b2a <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
    4bc6:	f387 8811 	msr	BASEPRI, r7
    4bca:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    4bce:	f06f 000f 	mvn.w	r0, #15
    4bd2:	e7b5      	b.n	4b40 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
    4bd4:	4601      	mov	r1, r0
    4bd6:	4620      	mov	r0, r4
    4bd8:	f002 fe43 	bl	7862 <adjust_owner_prio>
    4bdc:	4681      	mov	r9, r0
    4bde:	e7cb      	b.n	4b78 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    4be0:	6921      	ldr	r1, [r4, #16]
    4be2:	e7e4      	b.n	4bae <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    4be4:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    4be8:	f1b8 0f00 	cmp.w	r8, #0
    4bec:	d106      	bne.n	4bfc <z_impl_k_mutex_lock+0xfc>
    4bee:	f385 8811 	msr	BASEPRI, r5
    4bf2:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    4bf6:	f06f 000a 	mvn.w	r0, #10
    4bfa:	e7a1      	b.n	4b40 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
    4bfc:	4629      	mov	r1, r5
    4bfe:	4804      	ldr	r0, [pc, #16]	; (4c10 <z_impl_k_mutex_lock+0x110>)
    4c00:	f000 f8f6 	bl	4df0 <z_reschedule>
	return -EAGAIN;
    4c04:	f06f 000a 	mvn.w	r0, #10
    4c08:	e79a      	b.n	4b40 <z_impl_k_mutex_lock+0x40>
    4c0a:	bf00      	nop
    4c0c:	20001d20 	.word	0x20001d20
    4c10:	20001d4c 	.word	0x20001d4c

00004c14 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    4c14:	6882      	ldr	r2, [r0, #8]
    4c16:	2a00      	cmp	r2, #0
    4c18:	d035      	beq.n	4c86 <z_impl_k_mutex_unlock+0x72>
{
    4c1a:	b538      	push	{r3, r4, r5, lr}
    4c1c:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    4c1e:	4b1d      	ldr	r3, [pc, #116]	; (4c94 <z_impl_k_mutex_unlock+0x80>)
    4c20:	689b      	ldr	r3, [r3, #8]
    4c22:	429a      	cmp	r2, r3
    4c24:	d132      	bne.n	4c8c <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    4c26:	7bda      	ldrb	r2, [r3, #15]
    4c28:	3a01      	subs	r2, #1
    4c2a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    4c2c:	68c3      	ldr	r3, [r0, #12]
    4c2e:	2b01      	cmp	r3, #1
    4c30:	d905      	bls.n	4c3e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    4c32:	3b01      	subs	r3, #1
    4c34:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    4c36:	f000 fb19 	bl	526c <k_sched_unlock>

	return 0;
    4c3a:	2000      	movs	r0, #0
}
    4c3c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    4c3e:	f04f 0320 	mov.w	r3, #32
    4c42:	f3ef 8511 	mrs	r5, BASEPRI
    4c46:	f383 8812 	msr	BASEPRI_MAX, r3
    4c4a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    4c4e:	6901      	ldr	r1, [r0, #16]
    4c50:	f002 fe07 	bl	7862 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    4c54:	4620      	mov	r0, r4
    4c56:	f002 fee8 	bl	7a2a <z_unpend_first_thread>
	mutex->owner = new_owner;
    4c5a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    4c5c:	b160      	cbz	r0, 4c78 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    4c5e:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4c62:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4c64:	2300      	movs	r3, #0
    4c66:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    4c6a:	f002 fe3e 	bl	78ea <z_ready_thread>
		z_reschedule(&lock, key);
    4c6e:	4629      	mov	r1, r5
    4c70:	4809      	ldr	r0, [pc, #36]	; (4c98 <z_impl_k_mutex_unlock+0x84>)
    4c72:	f000 f8bd 	bl	4df0 <z_reschedule>
    4c76:	e7de      	b.n	4c36 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    4c78:	2300      	movs	r3, #0
    4c7a:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
    4c7c:	f385 8811 	msr	BASEPRI, r5
    4c80:	f3bf 8f6f 	isb	sy
    4c84:	e7d7      	b.n	4c36 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    4c86:	f06f 0015 	mvn.w	r0, #21
}
    4c8a:	4770      	bx	lr
		return -EPERM;
    4c8c:	f04f 30ff 	mov.w	r0, #4294967295
    4c90:	e7d4      	b.n	4c3c <z_impl_k_mutex_unlock+0x28>
    4c92:	bf00      	nop
    4c94:	20001d20 	.word	0x20001d20
    4c98:	20001d4c 	.word	0x20001d4c

00004c9c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    4c9c:	b538      	push	{r3, r4, r5, lr}
    4c9e:	4604      	mov	r4, r0
	__asm__ volatile(
    4ca0:	f04f 0320 	mov.w	r3, #32
    4ca4:	f3ef 8511 	mrs	r5, BASEPRI
    4ca8:	f383 8812 	msr	BASEPRI_MAX, r3
    4cac:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    4cb0:	f002 febb 	bl	7a2a <z_unpend_first_thread>

	if (thread != NULL) {
    4cb4:	b148      	cbz	r0, 4cca <z_impl_k_sem_give+0x2e>
    4cb6:	2200      	movs	r2, #0
    4cb8:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    4cbc:	f002 fe15 	bl	78ea <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    4cc0:	4629      	mov	r1, r5
    4cc2:	4807      	ldr	r0, [pc, #28]	; (4ce0 <z_impl_k_sem_give+0x44>)
    4cc4:	f000 f894 	bl	4df0 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    4cc8:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    4cca:	68a3      	ldr	r3, [r4, #8]
    4ccc:	68e2      	ldr	r2, [r4, #12]
    4cce:	4293      	cmp	r3, r2
    4cd0:	d003      	beq.n	4cda <z_impl_k_sem_give+0x3e>
    4cd2:	2201      	movs	r2, #1
    4cd4:	4413      	add	r3, r2
    4cd6:	60a3      	str	r3, [r4, #8]
}
    4cd8:	e7f2      	b.n	4cc0 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    4cda:	2200      	movs	r2, #0
    4cdc:	e7fa      	b.n	4cd4 <z_impl_k_sem_give+0x38>
    4cde:	bf00      	nop
    4ce0:	20001d4c 	.word	0x20001d4c

00004ce4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    4ce4:	b510      	push	{r4, lr}
    4ce6:	b082      	sub	sp, #8
    4ce8:	f04f 0420 	mov.w	r4, #32
    4cec:	f3ef 8111 	mrs	r1, BASEPRI
    4cf0:	f384 8812 	msr	BASEPRI_MAX, r4
    4cf4:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    4cf8:	6884      	ldr	r4, [r0, #8]
    4cfa:	b144      	cbz	r4, 4d0e <z_impl_k_sem_take+0x2a>
		sem->count--;
    4cfc:	3c01      	subs	r4, #1
    4cfe:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    4d00:	f381 8811 	msr	BASEPRI, r1
    4d04:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    4d08:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    4d0a:	b002      	add	sp, #8
    4d0c:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    4d0e:	ea53 0402 	orrs.w	r4, r3, r2
    4d12:	d006      	beq.n	4d22 <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    4d14:	9200      	str	r2, [sp, #0]
    4d16:	9301      	str	r3, [sp, #4]
    4d18:	4602      	mov	r2, r0
    4d1a:	4805      	ldr	r0, [pc, #20]	; (4d30 <z_impl_k_sem_take+0x4c>)
    4d1c:	f000 f9f0 	bl	5100 <z_pend_curr>
	return ret;
    4d20:	e7f3      	b.n	4d0a <z_impl_k_sem_take+0x26>
    4d22:	f381 8811 	msr	BASEPRI, r1
    4d26:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    4d2a:	f06f 000f 	mvn.w	r0, #15
    4d2e:	e7ec      	b.n	4d0a <z_impl_k_sem_take+0x26>
    4d30:	20001d4c 	.word	0x20001d4c

00004d34 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4d34:	f1b3 3fff 	cmp.w	r3, #4294967295
    4d38:	bf08      	it	eq
    4d3a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    4d3e:	d100      	bne.n	4d42 <add_thread_timeout+0xe>
    4d40:	4770      	bx	lr
{
    4d42:	b508      	push	{r3, lr}
    4d44:	4902      	ldr	r1, [pc, #8]	; (4d50 <add_thread_timeout+0x1c>)
    4d46:	3018      	adds	r0, #24
    4d48:	f000 fc5e 	bl	5608 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    4d4c:	bd08      	pop	{r3, pc}
    4d4e:	bf00      	nop
    4d50:	00007923 	.word	0x00007923

00004d54 <z_reset_time_slice>:
{
    4d54:	b510      	push	{r4, lr}
	int ret = slice_ticks;
    4d56:	4b07      	ldr	r3, [pc, #28]	; (4d74 <z_reset_time_slice+0x20>)
    4d58:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
    4d5a:	b904      	cbnz	r4, 4d5e <z_reset_time_slice+0xa>
}
    4d5c:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    4d5e:	f7fe f9a1 	bl	30a4 <sys_clock_elapsed>
    4d62:	4404      	add	r4, r0
    4d64:	4b04      	ldr	r3, [pc, #16]	; (4d78 <z_reset_time_slice+0x24>)
    4d66:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    4d68:	2100      	movs	r1, #0
    4d6a:	4b02      	ldr	r3, [pc, #8]	; (4d74 <z_reset_time_slice+0x20>)
    4d6c:	6818      	ldr	r0, [r3, #0]
    4d6e:	f002 fed7 	bl	7b20 <z_set_timeout_expiry>
}
    4d72:	e7f3      	b.n	4d5c <z_reset_time_slice+0x8>
    4d74:	20001d54 	.word	0x20001d54
    4d78:	20001d20 	.word	0x20001d20

00004d7c <k_sched_time_slice_set>:
{
    4d7c:	b570      	push	{r4, r5, r6, lr}
    4d7e:	4604      	mov	r4, r0
    4d80:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
    4d82:	2300      	movs	r3, #0
	__asm__ volatile(
    4d84:	f04f 0220 	mov.w	r2, #32
    4d88:	f3ef 8611 	mrs	r6, BASEPRI
    4d8c:	f382 8812 	msr	BASEPRI_MAX, r2
    4d90:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    4d94:	e00e      	b.n	4db4 <k_sched_time_slice_set+0x38>
			slice_ticks = MAX(2, slice_ticks);
    4d96:	2802      	cmp	r0, #2
    4d98:	bfb8      	it	lt
    4d9a:	2002      	movlt	r0, #2
    4d9c:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    4d9e:	4b11      	ldr	r3, [pc, #68]	; (4de4 <k_sched_time_slice_set+0x68>)
    4da0:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    4da2:	4b11      	ldr	r3, [pc, #68]	; (4de8 <k_sched_time_slice_set+0x6c>)
    4da4:	6898      	ldr	r0, [r3, #8]
    4da6:	f7ff ffd5 	bl	4d54 <z_reset_time_slice>
	__asm__ volatile(
    4daa:	f386 8811 	msr	BASEPRI, r6
    4dae:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    4db2:	2301      	movs	r3, #1
    4db4:	b9a3      	cbnz	r3, 4de0 <k_sched_time_slice_set+0x64>
		_current_cpu->slice_ticks = 0;
    4db6:	4b0c      	ldr	r3, [pc, #48]	; (4de8 <k_sched_time_slice_set+0x6c>)
    4db8:	2200      	movs	r2, #0
    4dba:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    4dbc:	0c61      	lsrs	r1, r4, #17
    4dbe:	03e3      	lsls	r3, r4, #15
    4dc0:	f240 30e7 	movw	r0, #999	; 0x3e7
    4dc4:	1818      	adds	r0, r3, r0
    4dc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4dca:	f04f 0300 	mov.w	r3, #0
    4dce:	f141 0100 	adc.w	r1, r1, #0
    4dd2:	f7fb f995 	bl	100 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    4dd6:	4b05      	ldr	r3, [pc, #20]	; (4dec <k_sched_time_slice_set+0x70>)
    4dd8:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    4dda:	2c00      	cmp	r4, #0
    4ddc:	dcdb      	bgt.n	4d96 <k_sched_time_slice_set+0x1a>
    4dde:	e7de      	b.n	4d9e <k_sched_time_slice_set+0x22>
}
    4de0:	bd70      	pop	{r4, r5, r6, pc}
    4de2:	bf00      	nop
    4de4:	20001d50 	.word	0x20001d50
    4de8:	20001d20 	.word	0x20001d20
    4dec:	20001d54 	.word	0x20001d54

00004df0 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    4df0:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    4df2:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4df4:	b921      	cbnz	r1, 4e00 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4df6:	f3ef 8305 	mrs	r3, IPSR
    4dfa:	b913      	cbnz	r3, 4e02 <z_reschedule+0x12>
    4dfc:	2101      	movs	r1, #1
    4dfe:	e000      	b.n	4e02 <z_reschedule+0x12>
    4e00:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    4e02:	f011 0f01 	tst.w	r1, #1
    4e06:	d007      	beq.n	4e18 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
    4e08:	4b06      	ldr	r3, [pc, #24]	; (4e24 <z_reschedule+0x34>)
    4e0a:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    4e0c:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    4e0e:	429a      	cmp	r2, r3
    4e10:	d002      	beq.n	4e18 <z_reschedule+0x28>
	ret = arch_swap(key);
    4e12:	f7fc fe67 	bl	1ae4 <arch_swap>
		z_swap(lock, key);
    4e16:	e003      	b.n	4e20 <z_reschedule+0x30>
    4e18:	f380 8811 	msr	BASEPRI, r0
    4e1c:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    4e20:	bd08      	pop	{r3, pc}
    4e22:	bf00      	nop
    4e24:	20001d20 	.word	0x20001d20

00004e28 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    4e28:	2300      	movs	r3, #0
	__asm__ volatile(
    4e2a:	f04f 0220 	mov.w	r2, #32
    4e2e:	f3ef 8111 	mrs	r1, BASEPRI
    4e32:	f382 8812 	msr	BASEPRI_MAX, r2
    4e36:	f3bf 8f6f 	isb	sy
    4e3a:	e009      	b.n	4e50 <k_sched_lock+0x28>
    4e3c:	4b06      	ldr	r3, [pc, #24]	; (4e58 <k_sched_lock+0x30>)
    4e3e:	689a      	ldr	r2, [r3, #8]
    4e40:	7bd3      	ldrb	r3, [r2, #15]
    4e42:	3b01      	subs	r3, #1
    4e44:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    4e46:	f381 8811 	msr	BASEPRI, r1
    4e4a:	f3bf 8f6f 	isb	sy
    4e4e:	2301      	movs	r3, #1
    4e50:	2b00      	cmp	r3, #0
    4e52:	d0f3      	beq.n	4e3c <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    4e54:	4770      	bx	lr
    4e56:	bf00      	nop
    4e58:	20001d20 	.word	0x20001d20

00004e5c <update_cache>:
{
    4e5c:	b538      	push	{r3, r4, r5, lr}
    4e5e:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    4e60:	4810      	ldr	r0, [pc, #64]	; (4ea4 <update_cache+0x48>)
    4e62:	f002 fd3b 	bl	78dc <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    4e66:	4605      	mov	r5, r0
    4e68:	b170      	cbz	r0, 4e88 <update_cache+0x2c>
	if (preempt_ok != 0) {
    4e6a:	b984      	cbnz	r4, 4e8e <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    4e6c:	4b0e      	ldr	r3, [pc, #56]	; (4ea8 <update_cache+0x4c>)
    4e6e:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    4e70:	7b5a      	ldrb	r2, [r3, #13]
    4e72:	f012 0f1f 	tst.w	r2, #31
    4e76:	d10a      	bne.n	4e8e <update_cache+0x32>
	return node->next != NULL;
    4e78:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    4e7a:	b942      	cbnz	r2, 4e8e <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    4e7c:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    4e7e:	2a7f      	cmp	r2, #127	; 0x7f
    4e80:	d905      	bls.n	4e8e <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    4e82:	4a09      	ldr	r2, [pc, #36]	; (4ea8 <update_cache+0x4c>)
    4e84:	61d3      	str	r3, [r2, #28]
    4e86:	e00b      	b.n	4ea0 <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    4e88:	4b07      	ldr	r3, [pc, #28]	; (4ea8 <update_cache+0x4c>)
    4e8a:	68dd      	ldr	r5, [r3, #12]
    4e8c:	e7ed      	b.n	4e6a <update_cache+0xe>
		if (thread != _current) {
    4e8e:	4b06      	ldr	r3, [pc, #24]	; (4ea8 <update_cache+0x4c>)
    4e90:	689b      	ldr	r3, [r3, #8]
    4e92:	42ab      	cmp	r3, r5
    4e94:	d002      	beq.n	4e9c <update_cache+0x40>
			z_reset_time_slice(thread);
    4e96:	4628      	mov	r0, r5
    4e98:	f7ff ff5c 	bl	4d54 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    4e9c:	4b02      	ldr	r3, [pc, #8]	; (4ea8 <update_cache+0x4c>)
    4e9e:	61dd      	str	r5, [r3, #28]
}
    4ea0:	bd38      	pop	{r3, r4, r5, pc}
    4ea2:	bf00      	nop
    4ea4:	20001d40 	.word	0x20001d40
    4ea8:	20001d20 	.word	0x20001d20

00004eac <move_thread_to_end_of_prio_q>:
{
    4eac:	b538      	push	{r3, r4, r5, lr}
    4eae:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    4eb0:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    4eb2:	f990 300d 	ldrsb.w	r3, [r0, #13]
    4eb6:	2b00      	cmp	r3, #0
    4eb8:	db28      	blt.n	4f0c <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
    4eba:	7b6b      	ldrb	r3, [r5, #13]
    4ebc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4ec0:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    4ec2:	4b1a      	ldr	r3, [pc, #104]	; (4f2c <move_thread_to_end_of_prio_q+0x80>)
    4ec4:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4ec8:	429c      	cmp	r4, r3
    4eca:	d02d      	beq.n	4f28 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4ecc:	b16c      	cbz	r4, 4eea <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4ece:	4621      	mov	r1, r4
    4ed0:	4628      	mov	r0, r5
    4ed2:	f002 fcdc 	bl	788e <z_sched_prio_cmp>
    4ed6:	2800      	cmp	r0, #0
    4ed8:	dc20      	bgt.n	4f1c <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4eda:	b134      	cbz	r4, 4eea <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    4edc:	4b13      	ldr	r3, [pc, #76]	; (4f2c <move_thread_to_end_of_prio_q+0x80>)
    4ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4ee0:	429c      	cmp	r4, r3
    4ee2:	d002      	beq.n	4eea <move_thread_to_end_of_prio_q+0x3e>
    4ee4:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4ee6:	2c00      	cmp	r4, #0
    4ee8:	d1f0      	bne.n	4ecc <move_thread_to_end_of_prio_q+0x20>
 * @param node the element to append
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
    4eea:	4b10      	ldr	r3, [pc, #64]	; (4f2c <move_thread_to_end_of_prio_q+0x80>)
    4eec:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
    4eee:	f103 0120 	add.w	r1, r3, #32
    4ef2:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    4ef4:	606a      	str	r2, [r5, #4]

	tail->next = node;
    4ef6:	6015      	str	r5, [r2, #0]
	list->tail = node;
    4ef8:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    4efa:	4b0c      	ldr	r3, [pc, #48]	; (4f2c <move_thread_to_end_of_prio_q+0x80>)
    4efc:	6898      	ldr	r0, [r3, #8]
    4efe:	42a8      	cmp	r0, r5
    4f00:	bf14      	ite	ne
    4f02:	2000      	movne	r0, #0
    4f04:	2001      	moveq	r0, #1
    4f06:	f7ff ffa9 	bl	4e5c <update_cache>
}
    4f0a:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4f0c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    4f10:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4f12:	4601      	mov	r1, r0
    4f14:	4806      	ldr	r0, [pc, #24]	; (4f30 <move_thread_to_end_of_prio_q+0x84>)
    4f16:	f002 fcd9 	bl	78cc <z_priq_dumb_remove>
}
    4f1a:	e7ce      	b.n	4eba <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    4f1c:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    4f1e:	606b      	str	r3, [r5, #4]
	node->next = successor;
    4f20:	602c      	str	r4, [r5, #0]
	prev->next = node;
    4f22:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    4f24:	6065      	str	r5, [r4, #4]
}
    4f26:	e7e8      	b.n	4efa <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4f28:	2400      	movs	r4, #0
    4f2a:	e7cf      	b.n	4ecc <move_thread_to_end_of_prio_q+0x20>
    4f2c:	20001d20 	.word	0x20001d20
    4f30:	20001d40 	.word	0x20001d40

00004f34 <slice_expired_locked>:
{
    4f34:	b538      	push	{r3, r4, r5, lr}
    4f36:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
    4f38:	4b07      	ldr	r3, [pc, #28]	; (4f58 <slice_expired_locked+0x24>)
    4f3a:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
    4f3c:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
    4f3e:	f013 0f1f 	tst.w	r3, #31
    4f42:	d004      	beq.n	4f4e <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
    4f44:	4628      	mov	r0, r5
    4f46:	f7ff ff05 	bl	4d54 <z_reset_time_slice>
}
    4f4a:	4620      	mov	r0, r4
    4f4c:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
    4f4e:	4628      	mov	r0, r5
    4f50:	f7ff ffac 	bl	4eac <move_thread_to_end_of_prio_q>
    4f54:	e7f6      	b.n	4f44 <slice_expired_locked+0x10>
    4f56:	bf00      	nop
    4f58:	20001d20 	.word	0x20001d20

00004f5c <z_time_slice>:
{
    4f5c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4f5e:	f04f 0320 	mov.w	r3, #32
    4f62:	f3ef 8411 	mrs	r4, BASEPRI
    4f66:	f383 8812 	msr	BASEPRI_MAX, r3
    4f6a:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    4f6e:	4b22      	ldr	r3, [pc, #136]	; (4ff8 <z_time_slice+0x9c>)
    4f70:	689b      	ldr	r3, [r3, #8]
    4f72:	4a22      	ldr	r2, [pc, #136]	; (4ffc <z_time_slice+0xa0>)
    4f74:	6812      	ldr	r2, [r2, #0]
    4f76:	4293      	cmp	r3, r2
    4f78:	d018      	beq.n	4fac <z_time_slice+0x50>
    4f7a:	4621      	mov	r1, r4
	pending_current = NULL;
    4f7c:	4a1f      	ldr	r2, [pc, #124]	; (4ffc <z_time_slice+0xa0>)
    4f7e:	2500      	movs	r5, #0
    4f80:	6015      	str	r5, [r2, #0]
	int ret = slice_ticks;
    4f82:	4a1f      	ldr	r2, [pc, #124]	; (5000 <z_time_slice+0xa4>)
    4f84:	6812      	ldr	r2, [r2, #0]
	if (slice_time(_current) && sliceable(_current)) {
    4f86:	b372      	cbz	r2, 4fe6 <z_time_slice+0x8a>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    4f88:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
    4f8a:	2a7f      	cmp	r2, #127	; 0x7f
    4f8c:	d816      	bhi.n	4fbc <z_time_slice+0x60>
    4f8e:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
    4f90:	f012 0f1f 	tst.w	r2, #31
    4f94:	d11c      	bne.n	4fd0 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    4f96:	f993 500e 	ldrsb.w	r5, [r3, #14]
    4f9a:	4a1a      	ldr	r2, [pc, #104]	; (5004 <z_time_slice+0xa8>)
    4f9c:	6812      	ldr	r2, [r2, #0]
    4f9e:	4295      	cmp	r5, r2
    4fa0:	db18      	blt.n	4fd4 <z_time_slice+0x78>
		&& !z_is_idle_thread_object(thread);
    4fa2:	4a19      	ldr	r2, [pc, #100]	; (5008 <z_time_slice+0xac>)
    4fa4:	4293      	cmp	r3, r2
    4fa6:	d017      	beq.n	4fd8 <z_time_slice+0x7c>
    4fa8:	2301      	movs	r3, #1
    4faa:	e008      	b.n	4fbe <z_time_slice+0x62>
		z_reset_time_slice(_current);
    4fac:	4618      	mov	r0, r3
    4fae:	f7ff fed1 	bl	4d54 <z_reset_time_slice>
	__asm__ volatile(
    4fb2:	f384 8811 	msr	BASEPRI, r4
    4fb6:	f3bf 8f6f 	isb	sy
		return;
    4fba:	e01b      	b.n	4ff4 <z_time_slice+0x98>
		&& !z_is_idle_thread_object(thread);
    4fbc:	2300      	movs	r3, #0
	if (slice_time(_current) && sliceable(_current)) {
    4fbe:	b193      	cbz	r3, 4fe6 <z_time_slice+0x8a>
		if (ticks >= _current_cpu->slice_ticks) {
    4fc0:	4b0d      	ldr	r3, [pc, #52]	; (4ff8 <z_time_slice+0x9c>)
    4fc2:	691b      	ldr	r3, [r3, #16]
    4fc4:	4283      	cmp	r3, r0
    4fc6:	dd09      	ble.n	4fdc <z_time_slice+0x80>
			_current_cpu->slice_ticks -= ticks;
    4fc8:	1a18      	subs	r0, r3, r0
    4fca:	4b0b      	ldr	r3, [pc, #44]	; (4ff8 <z_time_slice+0x9c>)
    4fcc:	6118      	str	r0, [r3, #16]
    4fce:	e00d      	b.n	4fec <z_time_slice+0x90>
		&& !z_is_idle_thread_object(thread);
    4fd0:	2300      	movs	r3, #0
    4fd2:	e7f4      	b.n	4fbe <z_time_slice+0x62>
    4fd4:	2300      	movs	r3, #0
    4fd6:	e7f2      	b.n	4fbe <z_time_slice+0x62>
    4fd8:	2300      	movs	r3, #0
    4fda:	e7f0      	b.n	4fbe <z_time_slice+0x62>
			key = slice_expired_locked(key);
    4fdc:	4620      	mov	r0, r4
    4fde:	f7ff ffa9 	bl	4f34 <slice_expired_locked>
    4fe2:	4601      	mov	r1, r0
    4fe4:	e002      	b.n	4fec <z_time_slice+0x90>
		_current_cpu->slice_ticks = 0;
    4fe6:	4b04      	ldr	r3, [pc, #16]	; (4ff8 <z_time_slice+0x9c>)
    4fe8:	2200      	movs	r2, #0
    4fea:	611a      	str	r2, [r3, #16]
    4fec:	f381 8811 	msr	BASEPRI, r1
    4ff0:	f3bf 8f6f 	isb	sy
}
    4ff4:	bd38      	pop	{r3, r4, r5, pc}
    4ff6:	bf00      	nop
    4ff8:	20001d20 	.word	0x20001d20
    4ffc:	20001d4c 	.word	0x20001d4c
    5000:	20001d54 	.word	0x20001d54
    5004:	20001d50 	.word	0x20001d50
    5008:	200004c0 	.word	0x200004c0

0000500c <ready_thread>:
{
    500c:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    500e:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    5010:	f990 200d 	ldrsb.w	r2, [r0, #13]
    5014:	2a00      	cmp	r2, #0
    5016:	db2d      	blt.n	5074 <ready_thread+0x68>
    5018:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    501a:	f013 0f1f 	tst.w	r3, #31
    501e:	d105      	bne.n	502c <ready_thread+0x20>
	return node->next != NULL;
    5020:	6982      	ldr	r2, [r0, #24]
    5022:	b10a      	cbz	r2, 5028 <ready_thread+0x1c>
    5024:	2200      	movs	r2, #0
    5026:	e002      	b.n	502e <ready_thread+0x22>
    5028:	2201      	movs	r2, #1
    502a:	e000      	b.n	502e <ready_thread+0x22>
    502c:	2200      	movs	r2, #0
    502e:	b30a      	cbz	r2, 5074 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
    5030:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5034:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    5036:	4b14      	ldr	r3, [pc, #80]	; (5088 <ready_thread+0x7c>)
    5038:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    503c:	429d      	cmp	r5, r3
    503e:	d020      	beq.n	5082 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5040:	b16d      	cbz	r5, 505e <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5042:	4629      	mov	r1, r5
    5044:	4620      	mov	r0, r4
    5046:	f002 fc22 	bl	788e <z_sched_prio_cmp>
    504a:	2800      	cmp	r0, #0
    504c:	dc13      	bgt.n	5076 <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    504e:	b135      	cbz	r5, 505e <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
    5050:	4b0d      	ldr	r3, [pc, #52]	; (5088 <ready_thread+0x7c>)
    5052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5054:	429d      	cmp	r5, r3
    5056:	d002      	beq.n	505e <ready_thread+0x52>
    5058:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    505a:	2d00      	cmp	r5, #0
    505c:	d1f0      	bne.n	5040 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
    505e:	4b0a      	ldr	r3, [pc, #40]	; (5088 <ready_thread+0x7c>)
    5060:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    5062:	f103 0120 	add.w	r1, r3, #32
    5066:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    5068:	6062      	str	r2, [r4, #4]
	tail->next = node;
    506a:	6014      	str	r4, [r2, #0]
	list->tail = node;
    506c:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    506e:	2000      	movs	r0, #0
    5070:	f7ff fef4 	bl	4e5c <update_cache>
}
    5074:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
    5076:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    5078:	6063      	str	r3, [r4, #4]
	node->next = successor;
    507a:	6025      	str	r5, [r4, #0]
	prev->next = node;
    507c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    507e:	606c      	str	r4, [r5, #4]
}
    5080:	e7f5      	b.n	506e <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5082:	2500      	movs	r5, #0
    5084:	e7dc      	b.n	5040 <ready_thread+0x34>
    5086:	bf00      	nop
    5088:	20001d20 	.word	0x20001d20

0000508c <z_sched_start>:
{
    508c:	b510      	push	{r4, lr}
	__asm__ volatile(
    508e:	f04f 0320 	mov.w	r3, #32
    5092:	f3ef 8411 	mrs	r4, BASEPRI
    5096:	f383 8812 	msr	BASEPRI_MAX, r3
    509a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    509e:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    50a0:	f013 0f04 	tst.w	r3, #4
    50a4:	d104      	bne.n	50b0 <z_sched_start+0x24>
	__asm__ volatile(
    50a6:	f384 8811 	msr	BASEPRI, r4
    50aa:	f3bf 8f6f 	isb	sy
}
    50ae:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    50b0:	f023 0304 	bic.w	r3, r3, #4
    50b4:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    50b6:	f7ff ffa9 	bl	500c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    50ba:	4621      	mov	r1, r4
    50bc:	4801      	ldr	r0, [pc, #4]	; (50c4 <z_sched_start+0x38>)
    50be:	f7ff fe97 	bl	4df0 <z_reschedule>
    50c2:	e7f4      	b.n	50ae <z_sched_start+0x22>
    50c4:	20001d50 	.word	0x20001d50

000050c8 <unready_thread>:
{
    50c8:	b510      	push	{r4, lr}
    50ca:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    50cc:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    50ce:	f990 300d 	ldrsb.w	r3, [r0, #13]
    50d2:	2b00      	cmp	r3, #0
    50d4:	db08      	blt.n	50e8 <unready_thread+0x20>
	update_cache(thread == _current);
    50d6:	4b08      	ldr	r3, [pc, #32]	; (50f8 <unready_thread+0x30>)
    50d8:	6898      	ldr	r0, [r3, #8]
    50da:	42a0      	cmp	r0, r4
    50dc:	bf14      	ite	ne
    50de:	2000      	movne	r0, #0
    50e0:	2001      	moveq	r0, #1
    50e2:	f7ff febb 	bl	4e5c <update_cache>
}
    50e6:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    50e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    50ec:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    50ee:	4601      	mov	r1, r0
    50f0:	4802      	ldr	r0, [pc, #8]	; (50fc <unready_thread+0x34>)
    50f2:	f002 fbeb 	bl	78cc <z_priq_dumb_remove>
}
    50f6:	e7ee      	b.n	50d6 <unready_thread+0xe>
    50f8:	20001d20 	.word	0x20001d20
    50fc:	20001d40 	.word	0x20001d40

00005100 <z_pend_curr>:
{
    5100:	b510      	push	{r4, lr}
    5102:	460c      	mov	r4, r1
    5104:	4611      	mov	r1, r2
	pending_current = _current;
    5106:	4b06      	ldr	r3, [pc, #24]	; (5120 <z_pend_curr+0x20>)
    5108:	6898      	ldr	r0, [r3, #8]
    510a:	4b06      	ldr	r3, [pc, #24]	; (5124 <z_pend_curr+0x24>)
    510c:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    510e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    5112:	f002 fc68 	bl	79e6 <pend>
    5116:	4620      	mov	r0, r4
    5118:	f7fc fce4 	bl	1ae4 <arch_swap>
}
    511c:	bd10      	pop	{r4, pc}
    511e:	bf00      	nop
    5120:	20001d20 	.word	0x20001d20
    5124:	20001d4c 	.word	0x20001d4c

00005128 <z_set_prio>:
{
    5128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    512c:	4604      	mov	r4, r0
    512e:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    5130:	2300      	movs	r3, #0
	__asm__ volatile(
    5132:	f04f 0220 	mov.w	r2, #32
    5136:	f3ef 8811 	mrs	r8, BASEPRI
    513a:	f382 8812 	msr	BASEPRI_MAX, r2
    513e:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    5142:	461f      	mov	r7, r3
    5144:	e008      	b.n	5158 <z_set_prio+0x30>
		if (need_sched) {
    5146:	f012 0701 	ands.w	r7, r2, #1
    514a:	d111      	bne.n	5170 <z_set_prio+0x48>
			thread->base.prio = prio;
    514c:	73a6      	strb	r6, [r4, #14]
	__asm__ volatile(
    514e:	f388 8811 	msr	BASEPRI, r8
    5152:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    5156:	2301      	movs	r3, #1
    5158:	461a      	mov	r2, r3
    515a:	2b00      	cmp	r3, #0
    515c:	d13d      	bne.n	51da <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
    515e:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5160:	f013 0f1f 	tst.w	r3, #31
    5164:	d1ef      	bne.n	5146 <z_set_prio+0x1e>
	return node->next != NULL;
    5166:	69a1      	ldr	r1, [r4, #24]
    5168:	2900      	cmp	r1, #0
    516a:	d1ec      	bne.n	5146 <z_set_prio+0x1e>
    516c:	2201      	movs	r2, #1
    516e:	e7ea      	b.n	5146 <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5170:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5174:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5176:	f8df 9068 	ldr.w	r9, [pc, #104]	; 51e0 <z_set_prio+0xb8>
    517a:	4621      	mov	r1, r4
    517c:	4648      	mov	r0, r9
    517e:	f002 fba5 	bl	78cc <z_priq_dumb_remove>
				thread->base.prio = prio;
    5182:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    5184:	7b63      	ldrb	r3, [r4, #13]
    5186:	f063 037f 	orn	r3, r3, #127	; 0x7f
    518a:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    518c:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5190:	454d      	cmp	r5, r9
    5192:	d020      	beq.n	51d6 <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5194:	b16d      	cbz	r5, 51b2 <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5196:	4629      	mov	r1, r5
    5198:	4620      	mov	r0, r4
    519a:	f002 fb78 	bl	788e <z_sched_prio_cmp>
    519e:	2800      	cmp	r0, #0
    51a0:	dc13      	bgt.n	51ca <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    51a2:	b135      	cbz	r5, 51b2 <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
    51a4:	4b0f      	ldr	r3, [pc, #60]	; (51e4 <z_set_prio+0xbc>)
    51a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    51a8:	429d      	cmp	r5, r3
    51aa:	d002      	beq.n	51b2 <z_set_prio+0x8a>
    51ac:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    51ae:	2d00      	cmp	r5, #0
    51b0:	d1f0      	bne.n	5194 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
    51b2:	4b0c      	ldr	r3, [pc, #48]	; (51e4 <z_set_prio+0xbc>)
    51b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    51b6:	f103 0120 	add.w	r1, r3, #32
    51ba:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    51bc:	6062      	str	r2, [r4, #4]
	tail->next = node;
    51be:	6014      	str	r4, [r2, #0]
	list->tail = node;
    51c0:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    51c2:	2001      	movs	r0, #1
    51c4:	f7ff fe4a 	bl	4e5c <update_cache>
    51c8:	e7c1      	b.n	514e <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
    51ca:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    51cc:	6063      	str	r3, [r4, #4]
	node->next = successor;
    51ce:	6025      	str	r5, [r4, #0]
	prev->next = node;
    51d0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    51d2:	606c      	str	r4, [r5, #4]
}
    51d4:	e7f5      	b.n	51c2 <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    51d6:	2500      	movs	r5, #0
    51d8:	e7dc      	b.n	5194 <z_set_prio+0x6c>
}
    51da:	4638      	mov	r0, r7
    51dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    51e0:	20001d40 	.word	0x20001d40
    51e4:	20001d20 	.word	0x20001d20

000051e8 <z_impl_k_thread_suspend>:
{
    51e8:	b538      	push	{r3, r4, r5, lr}
    51ea:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    51ec:	3018      	adds	r0, #24
    51ee:	f002 fc62 	bl	7ab6 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    51f2:	2300      	movs	r3, #0
	__asm__ volatile(
    51f4:	f04f 0220 	mov.w	r2, #32
    51f8:	f3ef 8511 	mrs	r5, BASEPRI
    51fc:	f382 8812 	msr	BASEPRI_MAX, r2
    5200:	f3bf 8f6f 	isb	sy
    5204:	e010      	b.n	5228 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    5206:	7b63      	ldrb	r3, [r4, #13]
    5208:	f043 0310 	orr.w	r3, r3, #16
    520c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    520e:	4b15      	ldr	r3, [pc, #84]	; (5264 <z_impl_k_thread_suspend+0x7c>)
    5210:	6898      	ldr	r0, [r3, #8]
    5212:	42a0      	cmp	r0, r4
    5214:	bf14      	ite	ne
    5216:	2000      	movne	r0, #0
    5218:	2001      	moveq	r0, #1
    521a:	f7ff fe1f 	bl	4e5c <update_cache>
	__asm__ volatile(
    521e:	f385 8811 	msr	BASEPRI, r5
    5222:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    5226:	2301      	movs	r3, #1
    5228:	b963      	cbnz	r3, 5244 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    522a:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    522c:	f994 300d 	ldrsb.w	r3, [r4, #13]
    5230:	2b00      	cmp	r3, #0
    5232:	dae8      	bge.n	5206 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5234:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    5238:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    523a:	4621      	mov	r1, r4
    523c:	480a      	ldr	r0, [pc, #40]	; (5268 <z_impl_k_thread_suspend+0x80>)
    523e:	f002 fb45 	bl	78cc <z_priq_dumb_remove>
}
    5242:	e7e0      	b.n	5206 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    5244:	4b07      	ldr	r3, [pc, #28]	; (5264 <z_impl_k_thread_suspend+0x7c>)
    5246:	689b      	ldr	r3, [r3, #8]
    5248:	42a3      	cmp	r3, r4
    524a:	d000      	beq.n	524e <z_impl_k_thread_suspend+0x66>
}
    524c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    524e:	f04f 0320 	mov.w	r3, #32
    5252:	f3ef 8011 	mrs	r0, BASEPRI
    5256:	f383 8812 	msr	BASEPRI_MAX, r3
    525a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    525e:	f002 fb20 	bl	78a2 <z_reschedule_irqlock>
    5262:	e7f3      	b.n	524c <z_impl_k_thread_suspend+0x64>
    5264:	20001d20 	.word	0x20001d20
    5268:	20001d40 	.word	0x20001d40

0000526c <k_sched_unlock>:

void k_sched_unlock(void)
{
    526c:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    526e:	2300      	movs	r3, #0
    5270:	f04f 0220 	mov.w	r2, #32
    5274:	f3ef 8411 	mrs	r4, BASEPRI
    5278:	f382 8812 	msr	BASEPRI_MAX, r2
    527c:	f3bf 8f6f 	isb	sy
    5280:	e00c      	b.n	529c <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    5282:	4b0d      	ldr	r3, [pc, #52]	; (52b8 <k_sched_unlock+0x4c>)
    5284:	689a      	ldr	r2, [r3, #8]
    5286:	7bd3      	ldrb	r3, [r2, #15]
    5288:	3301      	adds	r3, #1
    528a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    528c:	2000      	movs	r0, #0
    528e:	f7ff fde5 	bl	4e5c <update_cache>
	__asm__ volatile(
    5292:	f384 8811 	msr	BASEPRI, r4
    5296:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    529a:	2301      	movs	r3, #1
    529c:	2b00      	cmp	r3, #0
    529e:	d0f0      	beq.n	5282 <k_sched_unlock+0x16>
	__asm__ volatile(
    52a0:	f04f 0320 	mov.w	r3, #32
    52a4:	f3ef 8011 	mrs	r0, BASEPRI
    52a8:	f383 8812 	msr	BASEPRI_MAX, r3
    52ac:	f3bf 8f6f 	isb	sy
    52b0:	f002 faf7 	bl	78a2 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    52b4:	bd10      	pop	{r4, pc}
    52b6:	bf00      	nop
    52b8:	20001d20 	.word	0x20001d20

000052bc <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    52bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    52be:	7b43      	ldrb	r3, [r0, #13]
    52c0:	f013 0f08 	tst.w	r3, #8
    52c4:	d145      	bne.n	5352 <end_thread+0x96>
    52c6:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    52c8:	f043 0308 	orr.w	r3, r3, #8
    52cc:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    52ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    52d2:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    52d4:	f013 0f80 	tst.w	r3, #128	; 0x80
    52d8:	d12d      	bne.n	5336 <end_thread+0x7a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    52da:	68ab      	ldr	r3, [r5, #8]
    52dc:	b15b      	cbz	r3, 52f6 <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    52de:	4628      	mov	r0, r5
    52e0:	f002 fad3 	bl	788a <pended_on_thread>
    52e4:	4629      	mov	r1, r5
    52e6:	f002 faf1 	bl	78cc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    52ea:	7b6b      	ldrb	r3, [r5, #13]
    52ec:	f023 0302 	bic.w	r3, r3, #2
    52f0:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    52f2:	2300      	movs	r3, #0
    52f4:	60ab      	str	r3, [r5, #8]
    52f6:	f105 0018 	add.w	r0, r5, #24
    52fa:	f002 fbdc 	bl	7ab6 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    52fe:	f105 0758 	add.w	r7, r5, #88	; 0x58
	return list->head == list;
    5302:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5304:	42bc      	cmp	r4, r7
    5306:	d01e      	beq.n	5346 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    5308:	b1ec      	cbz	r4, 5346 <end_thread+0x8a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    530a:	4620      	mov	r0, r4
    530c:	f002 fabd 	bl	788a <pended_on_thread>
    5310:	4621      	mov	r1, r4
    5312:	f002 fadb 	bl	78cc <z_priq_dumb_remove>
    5316:	7b63      	ldrb	r3, [r4, #13]
    5318:	f023 0302 	bic.w	r3, r3, #2
    531c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    531e:	2600      	movs	r6, #0
    5320:	60a6      	str	r6, [r4, #8]
    5322:	f104 0018 	add.w	r0, r4, #24
    5326:	f002 fbc6 	bl	7ab6 <z_abort_timeout>
    532a:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    532e:	4620      	mov	r0, r4
    5330:	f7ff fe6c 	bl	500c <ready_thread>
    5334:	e7e5      	b.n	5302 <end_thread+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    533a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    533c:	4601      	mov	r1, r0
    533e:	4805      	ldr	r0, [pc, #20]	; (5354 <end_thread+0x98>)
    5340:	f002 fac4 	bl	78cc <z_priq_dumb_remove>
}
    5344:	e7c9      	b.n	52da <end_thread+0x1e>
		update_cache(1);
    5346:	2001      	movs	r0, #1
    5348:	f7ff fd88 	bl	4e5c <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    534c:	4628      	mov	r0, r5
    534e:	f7ff fadd 	bl	490c <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    5352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5354:	20001d40 	.word	0x20001d40

00005358 <z_sched_init>:
{
    5358:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    535a:	4804      	ldr	r0, [pc, #16]	; (536c <z_sched_init+0x14>)
    535c:	f002 fb90 	bl	7a80 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    5360:	2100      	movs	r1, #0
    5362:	4608      	mov	r0, r1
    5364:	f7ff fd0a 	bl	4d7c <k_sched_time_slice_set>
}
    5368:	bd08      	pop	{r3, pc}
    536a:	bf00      	nop
    536c:	20001d3c 	.word	0x20001d3c

00005370 <z_impl_k_yield>:
{
    5370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5372:	f04f 0320 	mov.w	r3, #32
    5376:	f3ef 8611 	mrs	r6, BASEPRI
    537a:	f383 8812 	msr	BASEPRI_MAX, r3
    537e:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
    5382:	4c1c      	ldr	r4, [pc, #112]	; (53f4 <z_impl_k_yield+0x84>)
    5384:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5386:	7b4b      	ldrb	r3, [r1, #13]
    5388:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    538c:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    538e:	f104 0720 	add.w	r7, r4, #32
    5392:	4638      	mov	r0, r7
    5394:	f002 fa9a 	bl	78cc <z_priq_dumb_remove>
	queue_thread(_current);
    5398:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    539a:	7b6b      	ldrb	r3, [r5, #13]
    539c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    53a0:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    53a2:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    53a4:	42bc      	cmp	r4, r7
    53a6:	d023      	beq.n	53f0 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    53a8:	b16c      	cbz	r4, 53c6 <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
    53aa:	4621      	mov	r1, r4
    53ac:	4628      	mov	r0, r5
    53ae:	f002 fa6e 	bl	788e <z_sched_prio_cmp>
    53b2:	2800      	cmp	r0, #0
    53b4:	dc16      	bgt.n	53e4 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    53b6:	b134      	cbz	r4, 53c6 <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
    53b8:	4b0e      	ldr	r3, [pc, #56]	; (53f4 <z_impl_k_yield+0x84>)
    53ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    53bc:	429c      	cmp	r4, r3
    53be:	d002      	beq.n	53c6 <z_impl_k_yield+0x56>
    53c0:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    53c2:	2c00      	cmp	r4, #0
    53c4:	d1f0      	bne.n	53a8 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
    53c6:	4b0b      	ldr	r3, [pc, #44]	; (53f4 <z_impl_k_yield+0x84>)
    53c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    53ca:	f103 0120 	add.w	r1, r3, #32
    53ce:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    53d0:	606a      	str	r2, [r5, #4]
	tail->next = node;
    53d2:	6015      	str	r5, [r2, #0]
	list->tail = node;
    53d4:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    53d6:	2001      	movs	r0, #1
    53d8:	f7ff fd40 	bl	4e5c <update_cache>
    53dc:	4630      	mov	r0, r6
    53de:	f7fc fb81 	bl	1ae4 <arch_swap>
}
    53e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
    53e4:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    53e6:	606b      	str	r3, [r5, #4]
	node->next = successor;
    53e8:	602c      	str	r4, [r5, #0]
	prev->next = node;
    53ea:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    53ec:	6065      	str	r5, [r4, #4]
}
    53ee:	e7f2      	b.n	53d6 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    53f0:	2400      	movs	r4, #0
    53f2:	e7d9      	b.n	53a8 <z_impl_k_yield+0x38>
    53f4:	20001d20 	.word	0x20001d20

000053f8 <z_tick_sleep>:
{
    53f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
    53fc:	ea50 0301 	orrs.w	r3, r0, r1
    5400:	d038      	beq.n	5474 <z_tick_sleep+0x7c>
    5402:	4604      	mov	r4, r0
    5404:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
    5406:	f06f 0301 	mvn.w	r3, #1
    540a:	1a1b      	subs	r3, r3, r0
    540c:	f04f 32ff 	mov.w	r2, #4294967295
    5410:	eb62 0201 	sbc.w	r2, r2, r1
    5414:	2b01      	cmp	r3, #1
    5416:	f172 0300 	sbcs.w	r3, r2, #0
    541a:	db2f      	blt.n	547c <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    541c:	f06f 0501 	mvn.w	r5, #1
    5420:	1a2d      	subs	r5, r5, r0
    5422:	f04f 0320 	mov.w	r3, #32
    5426:	f3ef 8811 	mrs	r8, BASEPRI
    542a:	f383 8812 	msr	BASEPRI_MAX, r3
    542e:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    5432:	4f14      	ldr	r7, [pc, #80]	; (5484 <z_tick_sleep+0x8c>)
    5434:	68b8      	ldr	r0, [r7, #8]
    5436:	4b14      	ldr	r3, [pc, #80]	; (5488 <z_tick_sleep+0x90>)
    5438:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    543a:	f7ff fe45 	bl	50c8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    543e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5440:	4622      	mov	r2, r4
    5442:	4633      	mov	r3, r6
    5444:	4911      	ldr	r1, [pc, #68]	; (548c <z_tick_sleep+0x94>)
    5446:	3018      	adds	r0, #24
    5448:	f000 f8de 	bl	5608 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    544c:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    544e:	7b53      	ldrb	r3, [r2, #13]
    5450:	f043 0310 	orr.w	r3, r3, #16
    5454:	7353      	strb	r3, [r2, #13]
    5456:	4640      	mov	r0, r8
    5458:	f7fc fb44 	bl	1ae4 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    545c:	f002 fb8b 	bl	7b76 <sys_clock_tick_get_32>
    5460:	1a28      	subs	r0, r5, r0
    5462:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    5466:	2801      	cmp	r0, #1
    5468:	f173 0300 	sbcs.w	r3, r3, #0
    546c:	da00      	bge.n	5470 <z_tick_sleep+0x78>
	return 0;
    546e:	2000      	movs	r0, #0
}
    5470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    5474:	f7ff ff7c 	bl	5370 <z_impl_k_yield>
		return 0;
    5478:	2000      	movs	r0, #0
    547a:	e7f9      	b.n	5470 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    547c:	f002 fb7b 	bl	7b76 <sys_clock_tick_get_32>
    5480:	1905      	adds	r5, r0, r4
    5482:	e7ce      	b.n	5422 <z_tick_sleep+0x2a>
    5484:	20001d20 	.word	0x20001d20
    5488:	20001d4c 	.word	0x20001d4c
    548c:	00007923 	.word	0x00007923

00005490 <z_impl_k_sleep>:
{
    5490:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5492:	f1b1 3fff 	cmp.w	r1, #4294967295
    5496:	bf08      	it	eq
    5498:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    549c:	d01a      	beq.n	54d4 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
    549e:	f7ff ffab 	bl	53f8 <z_tick_sleep>
    54a2:	4684      	mov	ip, r0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    54a4:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
    54a6:	0151      	lsls	r1, r2, #5
    54a8:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    54ac:	0143      	lsls	r3, r0, #5
    54ae:	1a1b      	subs	r3, r3, r0
    54b0:	eb61 0102 	sbc.w	r1, r1, r2
    54b4:	0088      	lsls	r0, r1, #2
    54b6:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    54ba:	009b      	lsls	r3, r3, #2
    54bc:	eb13 030c 	adds.w	r3, r3, ip
    54c0:	eb42 0000 	adc.w	r0, r2, r0
    54c4:	00c0      	lsls	r0, r0, #3
    54c6:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
    54ca:	f3c3 3310 	ubfx	r3, r3, #12, #17
    54ce:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
}
    54d2:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
    54d4:	4b03      	ldr	r3, [pc, #12]	; (54e4 <z_impl_k_sleep+0x54>)
    54d6:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    54d8:	f7ff fe86 	bl	51e8 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    54dc:	f04f 30ff 	mov.w	r0, #4294967295
    54e0:	e7f7      	b.n	54d2 <z_impl_k_sleep+0x42>
    54e2:	bf00      	nop
    54e4:	20001d20 	.word	0x20001d20

000054e8 <z_impl_z_current_get>:
}
    54e8:	4b01      	ldr	r3, [pc, #4]	; (54f0 <z_impl_z_current_get+0x8>)
    54ea:	6898      	ldr	r0, [r3, #8]
    54ec:	4770      	bx	lr
    54ee:	bf00      	nop
    54f0:	20001d20 	.word	0x20001d20

000054f4 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    54f4:	b538      	push	{r3, r4, r5, lr}
    54f6:	f04f 0320 	mov.w	r3, #32
    54fa:	f3ef 8511 	mrs	r5, BASEPRI
    54fe:	f383 8812 	msr	BASEPRI_MAX, r3
    5502:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    5506:	7b43      	ldrb	r3, [r0, #13]
    5508:	f013 0f08 	tst.w	r3, #8
    550c:	d004      	beq.n	5518 <z_thread_abort+0x24>
	__asm__ volatile(
    550e:	f385 8811 	msr	BASEPRI, r5
    5512:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    5516:	bd38      	pop	{r3, r4, r5, pc}
    5518:	4604      	mov	r4, r0
	end_thread(thread);
    551a:	f7ff fecf 	bl	52bc <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    551e:	4b08      	ldr	r3, [pc, #32]	; (5540 <z_thread_abort+0x4c>)
    5520:	689b      	ldr	r3, [r3, #8]
    5522:	42a3      	cmp	r3, r4
    5524:	d004      	beq.n	5530 <z_thread_abort+0x3c>
    5526:	f385 8811 	msr	BASEPRI, r5
    552a:	f3bf 8f6f 	isb	sy
    552e:	e7f2      	b.n	5516 <z_thread_abort+0x22>
    5530:	f3ef 8305 	mrs	r3, IPSR
    5534:	2b00      	cmp	r3, #0
    5536:	d1f6      	bne.n	5526 <z_thread_abort+0x32>
    5538:	4628      	mov	r0, r5
    553a:	f7fc fad3 	bl	1ae4 <arch_swap>
	return ret;
    553e:	e7f2      	b.n	5526 <z_thread_abort+0x32>
    5540:	20001d20 	.word	0x20001d20

00005544 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    5544:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    5546:	4806      	ldr	r0, [pc, #24]	; (5560 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    5548:	4a06      	ldr	r2, [pc, #24]	; (5564 <z_data_copy+0x20>)
    554a:	1a12      	subs	r2, r2, r0
    554c:	4906      	ldr	r1, [pc, #24]	; (5568 <z_data_copy+0x24>)
    554e:	f002 f8fb 	bl	7748 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    5552:	4a06      	ldr	r2, [pc, #24]	; (556c <z_data_copy+0x28>)
    5554:	4906      	ldr	r1, [pc, #24]	; (5570 <z_data_copy+0x2c>)
    5556:	4807      	ldr	r0, [pc, #28]	; (5574 <z_data_copy+0x30>)
    5558:	f002 f8f6 	bl	7748 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    555c:	bd08      	pop	{r3, pc}
    555e:	bf00      	nop
    5560:	20000000 	.word	0x20000000
    5564:	2000049c 	.word	0x2000049c
    5568:	00008460 	.word	0x00008460
    556c:	00000000 	.word	0x00000000
    5570:	00008460 	.word	0x00008460
    5574:	20000000 	.word	0x20000000

00005578 <first>:
	return list->head == list;
    5578:	4b03      	ldr	r3, [pc, #12]	; (5588 <first+0x10>)
    557a:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    557c:	4298      	cmp	r0, r3
    557e:	d000      	beq.n	5582 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    5580:	4770      	bx	lr
    5582:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    5584:	e7fc      	b.n	5580 <first+0x8>
    5586:	bf00      	nop
    5588:	200003cc 	.word	0x200003cc

0000558c <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    558c:	b130      	cbz	r0, 559c <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    558e:	4a04      	ldr	r2, [pc, #16]	; (55a0 <next+0x14>)
    5590:	6852      	ldr	r2, [r2, #4]
    5592:	4290      	cmp	r0, r2
    5594:	d001      	beq.n	559a <next+0xe>
    5596:	6800      	ldr	r0, [r0, #0]
    5598:	4770      	bx	lr
    559a:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    559c:	4770      	bx	lr
    559e:	bf00      	nop
    55a0:	200003cc 	.word	0x200003cc

000055a4 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    55a4:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    55a6:	4b04      	ldr	r3, [pc, #16]	; (55b8 <elapsed+0x14>)
    55a8:	681b      	ldr	r3, [r3, #0]
    55aa:	b10b      	cbz	r3, 55b0 <elapsed+0xc>
    55ac:	2000      	movs	r0, #0
}
    55ae:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    55b0:	f7fd fd78 	bl	30a4 <sys_clock_elapsed>
    55b4:	e7fb      	b.n	55ae <elapsed+0xa>
    55b6:	bf00      	nop
    55b8:	20001d58 	.word	0x20001d58

000055bc <next_timeout>:

static int32_t next_timeout(void)
{
    55bc:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    55be:	f7ff ffdb 	bl	5578 <first>
    55c2:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    55c4:	f7ff ffee 	bl	55a4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    55c8:	b17c      	cbz	r4, 55ea <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    55ca:	6923      	ldr	r3, [r4, #16]
    55cc:	6962      	ldr	r2, [r4, #20]
    55ce:	1a1b      	subs	r3, r3, r0
    55d0:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    55d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    55d8:	f170 0200 	sbcs.w	r2, r0, #0
    55dc:	da08      	bge.n	55f0 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    55de:	2800      	cmp	r0, #0
    55e0:	db01      	blt.n	55e6 <next_timeout+0x2a>
    55e2:	4618      	mov	r0, r3
    55e4:	e006      	b.n	55f4 <next_timeout+0x38>
    55e6:	2300      	movs	r3, #0
    55e8:	e7fb      	b.n	55e2 <next_timeout+0x26>
		ret = MAX_WAIT;
    55ea:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    55ee:	e001      	b.n	55f4 <next_timeout+0x38>
    55f0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    55f4:	4b03      	ldr	r3, [pc, #12]	; (5604 <next_timeout+0x48>)
    55f6:	691b      	ldr	r3, [r3, #16]
    55f8:	b113      	cbz	r3, 5600 <next_timeout+0x44>
    55fa:	4283      	cmp	r3, r0
    55fc:	da00      	bge.n	5600 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
    55fe:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    5600:	bd10      	pop	{r4, pc}
    5602:	bf00      	nop
    5604:	20001d20 	.word	0x20001d20

00005608 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5608:	f1b3 3fff 	cmp.w	r3, #4294967295
    560c:	bf08      	it	eq
    560e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    5612:	d07d      	beq.n	5710 <z_add_timeout+0x108>
{
    5614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5618:	4604      	mov	r4, r0
    561a:	4692      	mov	sl, r2
    561c:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    561e:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    5620:	2300      	movs	r3, #0
	__asm__ volatile(
    5622:	f04f 0220 	mov.w	r2, #32
    5626:	f3ef 8711 	mrs	r7, BASEPRI
    562a:	f382 8812 	msr	BASEPRI_MAX, r2
    562e:	f3bf 8f6f 	isb	sy
    5632:	e021      	b.n	5678 <z_add_timeout+0x70>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    5634:	f11a 0801 	adds.w	r8, sl, #1
    5638:	f145 0900 	adc.w	r9, r5, #0
    563c:	f7ff ffb2 	bl	55a4 <elapsed>
    5640:	eb18 0300 	adds.w	r3, r8, r0
    5644:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    5648:	6123      	str	r3, [r4, #16]
    564a:	6160      	str	r0, [r4, #20]
    564c:	e036      	b.n	56bc <z_add_timeout+0xb4>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    564e:	1a51      	subs	r1, r2, r1
    5650:	eb66 0303 	sbc.w	r3, r6, r3
    5654:	6101      	str	r1, [r0, #16]
    5656:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    5658:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    565a:	6063      	str	r3, [r4, #4]
	node->next = successor;
    565c:	6020      	str	r0, [r4, #0]
	prev->next = node;
    565e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    5660:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    5662:	2800      	cmp	r0, #0
    5664:	d03e      	beq.n	56e4 <z_add_timeout+0xdc>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    5666:	f7ff ff87 	bl	5578 <first>
    566a:	4284      	cmp	r4, r0
    566c:	d041      	beq.n	56f2 <z_add_timeout+0xea>
	__asm__ volatile(
    566e:	f387 8811 	msr	BASEPRI, r7
    5672:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    5676:	2301      	movs	r3, #1
    5678:	2b00      	cmp	r3, #0
    567a:	d147      	bne.n	570c <z_add_timeout+0x104>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    567c:	4653      	mov	r3, sl
    567e:	f06f 0101 	mvn.w	r1, #1
    5682:	ebb1 010a 	subs.w	r1, r1, sl
    5686:	f04f 30ff 	mov.w	r0, #4294967295
    568a:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    568e:	2a00      	cmp	r2, #0
    5690:	dbd0      	blt.n	5634 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    5692:	4a20      	ldr	r2, [pc, #128]	; (5714 <z_add_timeout+0x10c>)
    5694:	6811      	ldr	r1, [r2, #0]
    5696:	6852      	ldr	r2, [r2, #4]
    5698:	185b      	adds	r3, r3, r1
    569a:	eb42 0205 	adc.w	r2, r2, r5
    569e:	f06f 0101 	mvn.w	r1, #1
    56a2:	1acb      	subs	r3, r1, r3
    56a4:	eb60 0202 	sbc.w	r2, r0, r2
			to->dticks = MAX(1, ticks);
    56a8:	4618      	mov	r0, r3
    56aa:	4611      	mov	r1, r2
    56ac:	2b01      	cmp	r3, #1
    56ae:	f172 0300 	sbcs.w	r3, r2, #0
    56b2:	da01      	bge.n	56b8 <z_add_timeout+0xb0>
    56b4:	2001      	movs	r0, #1
    56b6:	2100      	movs	r1, #0
    56b8:	6120      	str	r0, [r4, #16]
    56ba:	6161      	str	r1, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    56bc:	f7ff ff5c 	bl	5578 <first>
    56c0:	2800      	cmp	r0, #0
    56c2:	d0ce      	beq.n	5662 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
    56c4:	6902      	ldr	r2, [r0, #16]
    56c6:	6946      	ldr	r6, [r0, #20]
    56c8:	6921      	ldr	r1, [r4, #16]
    56ca:	6963      	ldr	r3, [r4, #20]
    56cc:	4291      	cmp	r1, r2
    56ce:	eb73 0c06 	sbcs.w	ip, r3, r6
    56d2:	dbbc      	blt.n	564e <z_add_timeout+0x46>
			to->dticks -= t->dticks;
    56d4:	1a89      	subs	r1, r1, r2
    56d6:	eb63 0306 	sbc.w	r3, r3, r6
    56da:	6121      	str	r1, [r4, #16]
    56dc:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    56de:	f7ff ff55 	bl	558c <next>
    56e2:	e7ed      	b.n	56c0 <z_add_timeout+0xb8>
	sys_dnode_t *const tail = list->tail;
    56e4:	4b0c      	ldr	r3, [pc, #48]	; (5718 <z_add_timeout+0x110>)
    56e6:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    56e8:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    56ea:	6062      	str	r2, [r4, #4]
	tail->next = node;
    56ec:	6014      	str	r4, [r2, #0]
	list->tail = node;
    56ee:	605c      	str	r4, [r3, #4]
}
    56f0:	e7b9      	b.n	5666 <z_add_timeout+0x5e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    56f2:	f7ff ff63 	bl	55bc <next_timeout>

			if (next_time == 0 ||
    56f6:	4603      	mov	r3, r0
    56f8:	b118      	cbz	r0, 5702 <z_add_timeout+0xfa>
			    _current_cpu->slice_ticks != next_time) {
    56fa:	4a08      	ldr	r2, [pc, #32]	; (571c <z_add_timeout+0x114>)
    56fc:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    56fe:	4282      	cmp	r2, r0
    5700:	d0b5      	beq.n	566e <z_add_timeout+0x66>
				sys_clock_set_timeout(next_time, false);
    5702:	2100      	movs	r1, #0
    5704:	4618      	mov	r0, r3
    5706:	f7fd fc9b 	bl	3040 <sys_clock_set_timeout>
    570a:	e7b0      	b.n	566e <z_add_timeout+0x66>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    570c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5710:	4770      	bx	lr
    5712:	bf00      	nop
    5714:	20000620 	.word	0x20000620
    5718:	200003cc 	.word	0x200003cc
    571c:	20001d20 	.word	0x20001d20

00005720 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    5720:	b570      	push	{r4, r5, r6, lr}
    5722:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    5724:	f7ff fc1a 	bl	4f5c <z_time_slice>
	__asm__ volatile(
    5728:	f04f 0320 	mov.w	r3, #32
    572c:	f3ef 8511 	mrs	r5, BASEPRI
    5730:	f383 8812 	msr	BASEPRI_MAX, r3
    5734:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    5738:	4b28      	ldr	r3, [pc, #160]	; (57dc <sys_clock_announce+0xbc>)
    573a:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    573c:	e020      	b.n	5780 <sys_clock_announce+0x60>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    573e:	4828      	ldr	r0, [pc, #160]	; (57e0 <sys_clock_announce+0xc0>)
    5740:	6801      	ldr	r1, [r0, #0]
    5742:	6846      	ldr	r6, [r0, #4]
    5744:	1889      	adds	r1, r1, r2
    5746:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
    574a:	6001      	str	r1, [r0, #0]
    574c:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
    574e:	1a9b      	subs	r3, r3, r2
    5750:	4a22      	ldr	r2, [pc, #136]	; (57dc <sys_clock_announce+0xbc>)
    5752:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    5754:	2200      	movs	r2, #0
    5756:	2300      	movs	r3, #0
    5758:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    575c:	4620      	mov	r0, r4
    575e:	f002 f993 	bl	7a88 <remove_timeout>
	__asm__ volatile(
    5762:	f385 8811 	msr	BASEPRI, r5
    5766:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    576a:	68a3      	ldr	r3, [r4, #8]
    576c:	4620      	mov	r0, r4
    576e:	4798      	blx	r3
	__asm__ volatile(
    5770:	f04f 0320 	mov.w	r3, #32
    5774:	f3ef 8511 	mrs	r5, BASEPRI
    5778:	f383 8812 	msr	BASEPRI_MAX, r3
    577c:	f3bf 8f6f 	isb	sy
	while (first() != NULL && first()->dticks <= announce_remaining) {
    5780:	f7ff fefa 	bl	5578 <first>
    5784:	4604      	mov	r4, r0
    5786:	b140      	cbz	r0, 579a <sys_clock_announce+0x7a>
    5788:	6902      	ldr	r2, [r0, #16]
    578a:	6941      	ldr	r1, [r0, #20]
    578c:	4b13      	ldr	r3, [pc, #76]	; (57dc <sys_clock_announce+0xbc>)
    578e:	681b      	ldr	r3, [r3, #0]
    5790:	17d8      	asrs	r0, r3, #31
    5792:	4293      	cmp	r3, r2
    5794:	eb70 0101 	sbcs.w	r1, r0, r1
    5798:	dad1      	bge.n	573e <sys_clock_announce+0x1e>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    579a:	b144      	cbz	r4, 57ae <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
    579c:	4b0f      	ldr	r3, [pc, #60]	; (57dc <sys_clock_announce+0xbc>)
    579e:	6819      	ldr	r1, [r3, #0]
    57a0:	6923      	ldr	r3, [r4, #16]
    57a2:	6962      	ldr	r2, [r4, #20]
    57a4:	1a5b      	subs	r3, r3, r1
    57a6:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    57aa:	6123      	str	r3, [r4, #16]
    57ac:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    57ae:	4a0c      	ldr	r2, [pc, #48]	; (57e0 <sys_clock_announce+0xc0>)
    57b0:	4e0a      	ldr	r6, [pc, #40]	; (57dc <sys_clock_announce+0xbc>)
    57b2:	6830      	ldr	r0, [r6, #0]
    57b4:	6813      	ldr	r3, [r2, #0]
    57b6:	6851      	ldr	r1, [r2, #4]
    57b8:	181b      	adds	r3, r3, r0
    57ba:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    57be:	6013      	str	r3, [r2, #0]
    57c0:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    57c2:	2400      	movs	r4, #0
    57c4:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    57c6:	f7ff fef9 	bl	55bc <next_timeout>
    57ca:	4621      	mov	r1, r4
    57cc:	f7fd fc38 	bl	3040 <sys_clock_set_timeout>
	__asm__ volatile(
    57d0:	f385 8811 	msr	BASEPRI, r5
    57d4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    57d8:	bd70      	pop	{r4, r5, r6, pc}
    57da:	bf00      	nop
    57dc:	20001d58 	.word	0x20001d58
    57e0:	20000620 	.word	0x20000620

000057e4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    57e4:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    57e6:	2300      	movs	r3, #0
	__asm__ volatile(
    57e8:	f04f 0220 	mov.w	r2, #32
    57ec:	f3ef 8411 	mrs	r4, BASEPRI
    57f0:	f382 8812 	msr	BASEPRI_MAX, r2
    57f4:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    57f8:	4618      	mov	r0, r3
    57fa:	4619      	mov	r1, r3
    57fc:	e00c      	b.n	5818 <sys_clock_tick_get+0x34>
		t = curr_tick + sys_clock_elapsed();
    57fe:	f7fd fc51 	bl	30a4 <sys_clock_elapsed>
    5802:	4a07      	ldr	r2, [pc, #28]	; (5820 <sys_clock_tick_get+0x3c>)
    5804:	6813      	ldr	r3, [r2, #0]
    5806:	6851      	ldr	r1, [r2, #4]
    5808:	18c0      	adds	r0, r0, r3
    580a:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    580e:	f384 8811 	msr	BASEPRI, r4
    5812:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    5816:	2301      	movs	r3, #1
    5818:	2b00      	cmp	r3, #0
    581a:	d0f0      	beq.n	57fe <sys_clock_tick_get+0x1a>
	}
	return t;
}
    581c:	bd10      	pop	{r4, pc}
    581e:	bf00      	nop
    5820:	20000620 	.word	0x20000620

00005824 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    5824:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    5826:	4a03      	ldr	r2, [pc, #12]	; (5834 <boot_banner+0x10>)
    5828:	4903      	ldr	r1, [pc, #12]	; (5838 <boot_banner+0x14>)
    582a:	4804      	ldr	r0, [pc, #16]	; (583c <boot_banner+0x18>)
    582c:	f000 fc41 	bl	60b2 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    5830:	bd08      	pop	{r3, pc}
    5832:	bf00      	nop
    5834:	00008018 	.word	0x00008018
    5838:	000083a0 	.word	0x000083a0
    583c:	000083b0 	.word	0x000083b0

00005840 <nrf_cc3xx_platform_init_no_rng>:
    5840:	b510      	push	{r4, lr}
    5842:	4c0a      	ldr	r4, [pc, #40]	; (586c <nrf_cc3xx_platform_init_no_rng+0x2c>)
    5844:	6823      	ldr	r3, [r4, #0]
    5846:	b11b      	cbz	r3, 5850 <nrf_cc3xx_platform_init_no_rng+0x10>
    5848:	2301      	movs	r3, #1
    584a:	6023      	str	r3, [r4, #0]
    584c:	2000      	movs	r0, #0
    584e:	bd10      	pop	{r4, pc}
    5850:	f000 f8ce 	bl	59f0 <CC_LibInitNoRng>
    5854:	2800      	cmp	r0, #0
    5856:	d0f7      	beq.n	5848 <nrf_cc3xx_platform_init_no_rng+0x8>
    5858:	3801      	subs	r0, #1
    585a:	2806      	cmp	r0, #6
    585c:	d803      	bhi.n	5866 <nrf_cc3xx_platform_init_no_rng+0x26>
    585e:	4b04      	ldr	r3, [pc, #16]	; (5870 <nrf_cc3xx_platform_init_no_rng+0x30>)
    5860:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    5864:	bd10      	pop	{r4, pc}
    5866:	4803      	ldr	r0, [pc, #12]	; (5874 <nrf_cc3xx_platform_init_no_rng+0x34>)
    5868:	bd10      	pop	{r4, pc}
    586a:	bf00      	nop
    586c:	20001d5c 	.word	0x20001d5c
    5870:	000083d8 	.word	0x000083d8
    5874:	ffff8ffe 	.word	0xffff8ffe

00005878 <nrf_cc3xx_platform_abort>:
    5878:	f3bf 8f4f 	dsb	sy
    587c:	4905      	ldr	r1, [pc, #20]	; (5894 <nrf_cc3xx_platform_abort+0x1c>)
    587e:	4b06      	ldr	r3, [pc, #24]	; (5898 <nrf_cc3xx_platform_abort+0x20>)
    5880:	68ca      	ldr	r2, [r1, #12]
    5882:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5886:	4313      	orrs	r3, r2
    5888:	60cb      	str	r3, [r1, #12]
    588a:	f3bf 8f4f 	dsb	sy
    588e:	bf00      	nop
    5890:	e7fd      	b.n	588e <nrf_cc3xx_platform_abort+0x16>
    5892:	bf00      	nop
    5894:	e000ed00 	.word	0xe000ed00
    5898:	05fa0004 	.word	0x05fa0004

0000589c <CC_PalAbort>:
    589c:	b410      	push	{r4}
    589e:	4b09      	ldr	r3, [pc, #36]	; (58c4 <CC_PalAbort+0x28>)
    58a0:	4909      	ldr	r1, [pc, #36]	; (58c8 <CC_PalAbort+0x2c>)
    58a2:	4c0a      	ldr	r4, [pc, #40]	; (58cc <CC_PalAbort+0x30>)
    58a4:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    58a8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    58ac:	6849      	ldr	r1, [r1, #4]
    58ae:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    58b2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    58b6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    58ba:	2300      	movs	r3, #0
    58bc:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    58c0:	bc10      	pop	{r4}
    58c2:	4708      	bx	r1
    58c4:	5002b000 	.word	0x5002b000
    58c8:	200003d4 	.word	0x200003d4
    58cc:	5002a000 	.word	0x5002a000

000058d0 <nrf_cc3xx_platform_set_abort>:
    58d0:	e9d0 1200 	ldrd	r1, r2, [r0]
    58d4:	4b01      	ldr	r3, [pc, #4]	; (58dc <nrf_cc3xx_platform_set_abort+0xc>)
    58d6:	e9c3 1200 	strd	r1, r2, [r3]
    58da:	4770      	bx	lr
    58dc:	200003d4 	.word	0x200003d4

000058e0 <mutex_free>:
    58e0:	b510      	push	{r4, lr}
    58e2:	4604      	mov	r4, r0
    58e4:	b130      	cbz	r0, 58f4 <mutex_free+0x14>
    58e6:	6863      	ldr	r3, [r4, #4]
    58e8:	06db      	lsls	r3, r3, #27
    58ea:	d502      	bpl.n	58f2 <mutex_free+0x12>
    58ec:	2300      	movs	r3, #0
    58ee:	6023      	str	r3, [r4, #0]
    58f0:	6063      	str	r3, [r4, #4]
    58f2:	bd10      	pop	{r4, pc}
    58f4:	4b02      	ldr	r3, [pc, #8]	; (5900 <mutex_free+0x20>)
    58f6:	4803      	ldr	r0, [pc, #12]	; (5904 <mutex_free+0x24>)
    58f8:	685b      	ldr	r3, [r3, #4]
    58fa:	4798      	blx	r3
    58fc:	e7f3      	b.n	58e6 <mutex_free+0x6>
    58fe:	bf00      	nop
    5900:	200003d4 	.word	0x200003d4
    5904:	000083f4 	.word	0x000083f4

00005908 <mutex_lock>:
    5908:	b1b0      	cbz	r0, 5938 <mutex_lock+0x30>
    590a:	6843      	ldr	r3, [r0, #4]
    590c:	b193      	cbz	r3, 5934 <mutex_lock+0x2c>
    590e:	06db      	lsls	r3, r3, #27
    5910:	d50e      	bpl.n	5930 <mutex_lock+0x28>
    5912:	2301      	movs	r3, #1
    5914:	e850 2f00 	ldrex	r2, [r0]
    5918:	4619      	mov	r1, r3
    591a:	e840 1c00 	strex	ip, r1, [r0]
    591e:	f09c 0f00 	teq	ip, #0
    5922:	d1f7      	bne.n	5914 <mutex_lock+0xc>
    5924:	2a01      	cmp	r2, #1
    5926:	d0f5      	beq.n	5914 <mutex_lock+0xc>
    5928:	f3bf 8f5f 	dmb	sy
    592c:	2000      	movs	r0, #0
    592e:	4770      	bx	lr
    5930:	4803      	ldr	r0, [pc, #12]	; (5940 <mutex_lock+0x38>)
    5932:	4770      	bx	lr
    5934:	4803      	ldr	r0, [pc, #12]	; (5944 <mutex_lock+0x3c>)
    5936:	4770      	bx	lr
    5938:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    593c:	4770      	bx	lr
    593e:	bf00      	nop
    5940:	ffff8fe9 	.word	0xffff8fe9
    5944:	ffff8fea 	.word	0xffff8fea

00005948 <mutex_unlock>:
    5948:	b168      	cbz	r0, 5966 <mutex_unlock+0x1e>
    594a:	6843      	ldr	r3, [r0, #4]
    594c:	b13b      	cbz	r3, 595e <mutex_unlock+0x16>
    594e:	06db      	lsls	r3, r3, #27
    5950:	d507      	bpl.n	5962 <mutex_unlock+0x1a>
    5952:	f3bf 8f5f 	dmb	sy
    5956:	2300      	movs	r3, #0
    5958:	6003      	str	r3, [r0, #0]
    595a:	4618      	mov	r0, r3
    595c:	4770      	bx	lr
    595e:	4803      	ldr	r0, [pc, #12]	; (596c <mutex_unlock+0x24>)
    5960:	4770      	bx	lr
    5962:	4803      	ldr	r0, [pc, #12]	; (5970 <mutex_unlock+0x28>)
    5964:	4770      	bx	lr
    5966:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    596a:	4770      	bx	lr
    596c:	ffff8fea 	.word	0xffff8fea
    5970:	ffff8fe9 	.word	0xffff8fe9

00005974 <mutex_init>:
    5974:	b510      	push	{r4, lr}
    5976:	4604      	mov	r4, r0
    5978:	b120      	cbz	r0, 5984 <mutex_init+0x10>
    597a:	2200      	movs	r2, #0
    597c:	2311      	movs	r3, #17
    597e:	6022      	str	r2, [r4, #0]
    5980:	6063      	str	r3, [r4, #4]
    5982:	bd10      	pop	{r4, pc}
    5984:	4801      	ldr	r0, [pc, #4]	; (598c <mutex_init+0x18>)
    5986:	f7ff ff89 	bl	589c <CC_PalAbort>
    598a:	e7f6      	b.n	597a <mutex_init+0x6>
    598c:	0000841c 	.word	0x0000841c

00005990 <nrf_cc3xx_platform_set_mutexes>:
    5990:	b570      	push	{r4, r5, r6, lr}
    5992:	e9d0 2300 	ldrd	r2, r3, [r0]
    5996:	4c13      	ldr	r4, [pc, #76]	; (59e4 <nrf_cc3xx_platform_set_mutexes+0x54>)
    5998:	4d13      	ldr	r5, [pc, #76]	; (59e8 <nrf_cc3xx_platform_set_mutexes+0x58>)
    599a:	6063      	str	r3, [r4, #4]
    599c:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    59a0:	e9c4 3002 	strd	r3, r0, [r4, #8]
    59a4:	6022      	str	r2, [r4, #0]
    59a6:	4b11      	ldr	r3, [pc, #68]	; (59ec <nrf_cc3xx_platform_set_mutexes+0x5c>)
    59a8:	6808      	ldr	r0, [r1, #0]
    59aa:	6018      	str	r0, [r3, #0]
    59ac:	6848      	ldr	r0, [r1, #4]
    59ae:	6058      	str	r0, [r3, #4]
    59b0:	6888      	ldr	r0, [r1, #8]
    59b2:	6098      	str	r0, [r3, #8]
    59b4:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    59b8:	60d8      	str	r0, [r3, #12]
    59ba:	6119      	str	r1, [r3, #16]
    59bc:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    59c0:	06db      	lsls	r3, r3, #27
    59c2:	d50d      	bpl.n	59e0 <nrf_cc3xx_platform_set_mutexes+0x50>
    59c4:	2300      	movs	r3, #0
    59c6:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    59ca:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    59ce:	f505 708a 	add.w	r0, r5, #276	; 0x114
    59d2:	4790      	blx	r2
    59d4:	6823      	ldr	r3, [r4, #0]
    59d6:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    59da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    59de:	4718      	bx	r3
    59e0:	bd70      	pop	{r4, r5, r6, pc}
    59e2:	bf00      	nop
    59e4:	200003e4 	.word	0x200003e4
    59e8:	20001d74 	.word	0x20001d74
    59ec:	200003f4 	.word	0x200003f4

000059f0 <CC_LibInitNoRng>:
    59f0:	b538      	push	{r3, r4, r5, lr}
    59f2:	f000 f82f 	bl	5a54 <CC_HalInit>
    59f6:	b120      	cbz	r0, 5a02 <CC_LibInitNoRng+0x12>
    59f8:	2403      	movs	r4, #3
    59fa:	f000 f863 	bl	5ac4 <CC_PalTerminate>
    59fe:	4620      	mov	r0, r4
    5a00:	bd38      	pop	{r3, r4, r5, pc}
    5a02:	f000 f831 	bl	5a68 <CC_PalInit>
    5a06:	b998      	cbnz	r0, 5a30 <CC_LibInitNoRng+0x40>
    5a08:	f000 f8ac 	bl	5b64 <CC_PalPowerSaveModeSelect>
    5a0c:	b998      	cbnz	r0, 5a36 <CC_LibInitNoRng+0x46>
    5a0e:	4d0f      	ldr	r5, [pc, #60]	; (5a4c <CC_LibInitNoRng+0x5c>)
    5a10:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    5a14:	0e1b      	lsrs	r3, r3, #24
    5a16:	2bf0      	cmp	r3, #240	; 0xf0
    5a18:	d108      	bne.n	5a2c <CC_LibInitNoRng+0x3c>
    5a1a:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    5a1e:	4b0c      	ldr	r3, [pc, #48]	; (5a50 <CC_LibInitNoRng+0x60>)
    5a20:	429a      	cmp	r2, r3
    5a22:	d00a      	beq.n	5a3a <CC_LibInitNoRng+0x4a>
    5a24:	2407      	movs	r4, #7
    5a26:	f000 f817 	bl	5a58 <CC_HalTerminate>
    5a2a:	e7e6      	b.n	59fa <CC_LibInitNoRng+0xa>
    5a2c:	2406      	movs	r4, #6
    5a2e:	e7fa      	b.n	5a26 <CC_LibInitNoRng+0x36>
    5a30:	2404      	movs	r4, #4
    5a32:	4620      	mov	r0, r4
    5a34:	bd38      	pop	{r3, r4, r5, pc}
    5a36:	2400      	movs	r4, #0
    5a38:	e7f5      	b.n	5a26 <CC_LibInitNoRng+0x36>
    5a3a:	2001      	movs	r0, #1
    5a3c:	f000 f892 	bl	5b64 <CC_PalPowerSaveModeSelect>
    5a40:	4604      	mov	r4, r0
    5a42:	2800      	cmp	r0, #0
    5a44:	d1f7      	bne.n	5a36 <CC_LibInitNoRng+0x46>
    5a46:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    5a4a:	e7d8      	b.n	59fe <CC_LibInitNoRng+0xe>
    5a4c:	5002b000 	.word	0x5002b000
    5a50:	20e00000 	.word	0x20e00000

00005a54 <CC_HalInit>:
    5a54:	2000      	movs	r0, #0
    5a56:	4770      	bx	lr

00005a58 <CC_HalTerminate>:
    5a58:	2000      	movs	r0, #0
    5a5a:	4770      	bx	lr

00005a5c <CC_HalMaskInterrupt>:
    5a5c:	4b01      	ldr	r3, [pc, #4]	; (5a64 <CC_HalMaskInterrupt+0x8>)
    5a5e:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    5a62:	4770      	bx	lr
    5a64:	5002b000 	.word	0x5002b000

00005a68 <CC_PalInit>:
    5a68:	b510      	push	{r4, lr}
    5a6a:	4811      	ldr	r0, [pc, #68]	; (5ab0 <CC_PalInit+0x48>)
    5a6c:	f000 f848 	bl	5b00 <CC_PalMutexCreate>
    5a70:	b100      	cbz	r0, 5a74 <CC_PalInit+0xc>
    5a72:	bd10      	pop	{r4, pc}
    5a74:	480f      	ldr	r0, [pc, #60]	; (5ab4 <CC_PalInit+0x4c>)
    5a76:	f000 f843 	bl	5b00 <CC_PalMutexCreate>
    5a7a:	2800      	cmp	r0, #0
    5a7c:	d1f9      	bne.n	5a72 <CC_PalInit+0xa>
    5a7e:	4c0e      	ldr	r4, [pc, #56]	; (5ab8 <CC_PalInit+0x50>)
    5a80:	4620      	mov	r0, r4
    5a82:	f000 f83d 	bl	5b00 <CC_PalMutexCreate>
    5a86:	2800      	cmp	r0, #0
    5a88:	d1f3      	bne.n	5a72 <CC_PalInit+0xa>
    5a8a:	4b0c      	ldr	r3, [pc, #48]	; (5abc <CC_PalInit+0x54>)
    5a8c:	480c      	ldr	r0, [pc, #48]	; (5ac0 <CC_PalInit+0x58>)
    5a8e:	601c      	str	r4, [r3, #0]
    5a90:	f000 f836 	bl	5b00 <CC_PalMutexCreate>
    5a94:	4601      	mov	r1, r0
    5a96:	2800      	cmp	r0, #0
    5a98:	d1eb      	bne.n	5a72 <CC_PalInit+0xa>
    5a9a:	f000 f82d 	bl	5af8 <CC_PalDmaInit>
    5a9e:	4604      	mov	r4, r0
    5aa0:	b108      	cbz	r0, 5aa6 <CC_PalInit+0x3e>
    5aa2:	4620      	mov	r0, r4
    5aa4:	bd10      	pop	{r4, pc}
    5aa6:	f000 f83f 	bl	5b28 <CC_PalPowerSaveModeInit>
    5aaa:	4620      	mov	r0, r4
    5aac:	e7fa      	b.n	5aa4 <CC_PalInit+0x3c>
    5aae:	bf00      	nop
    5ab0:	2000042c 	.word	0x2000042c
    5ab4:	20000420 	.word	0x20000420
    5ab8:	20000428 	.word	0x20000428
    5abc:	20000430 	.word	0x20000430
    5ac0:	20000424 	.word	0x20000424

00005ac4 <CC_PalTerminate>:
    5ac4:	b508      	push	{r3, lr}
    5ac6:	4808      	ldr	r0, [pc, #32]	; (5ae8 <CC_PalTerminate+0x24>)
    5ac8:	f000 f824 	bl	5b14 <CC_PalMutexDestroy>
    5acc:	4807      	ldr	r0, [pc, #28]	; (5aec <CC_PalTerminate+0x28>)
    5ace:	f000 f821 	bl	5b14 <CC_PalMutexDestroy>
    5ad2:	4807      	ldr	r0, [pc, #28]	; (5af0 <CC_PalTerminate+0x2c>)
    5ad4:	f000 f81e 	bl	5b14 <CC_PalMutexDestroy>
    5ad8:	4806      	ldr	r0, [pc, #24]	; (5af4 <CC_PalTerminate+0x30>)
    5ada:	f000 f81b 	bl	5b14 <CC_PalMutexDestroy>
    5ade:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5ae2:	f000 b80b 	b.w	5afc <CC_PalDmaTerminate>
    5ae6:	bf00      	nop
    5ae8:	2000042c 	.word	0x2000042c
    5aec:	20000420 	.word	0x20000420
    5af0:	20000428 	.word	0x20000428
    5af4:	20000424 	.word	0x20000424

00005af8 <CC_PalDmaInit>:
    5af8:	2000      	movs	r0, #0
    5afa:	4770      	bx	lr

00005afc <CC_PalDmaTerminate>:
    5afc:	4770      	bx	lr
    5afe:	bf00      	nop

00005b00 <CC_PalMutexCreate>:
    5b00:	b508      	push	{r3, lr}
    5b02:	4b03      	ldr	r3, [pc, #12]	; (5b10 <CC_PalMutexCreate+0x10>)
    5b04:	6802      	ldr	r2, [r0, #0]
    5b06:	681b      	ldr	r3, [r3, #0]
    5b08:	6810      	ldr	r0, [r2, #0]
    5b0a:	4798      	blx	r3
    5b0c:	2000      	movs	r0, #0
    5b0e:	bd08      	pop	{r3, pc}
    5b10:	200003e4 	.word	0x200003e4

00005b14 <CC_PalMutexDestroy>:
    5b14:	b508      	push	{r3, lr}
    5b16:	4b03      	ldr	r3, [pc, #12]	; (5b24 <CC_PalMutexDestroy+0x10>)
    5b18:	6802      	ldr	r2, [r0, #0]
    5b1a:	685b      	ldr	r3, [r3, #4]
    5b1c:	6810      	ldr	r0, [r2, #0]
    5b1e:	4798      	blx	r3
    5b20:	2000      	movs	r0, #0
    5b22:	bd08      	pop	{r3, pc}
    5b24:	200003e4 	.word	0x200003e4

00005b28 <CC_PalPowerSaveModeInit>:
    5b28:	b570      	push	{r4, r5, r6, lr}
    5b2a:	4c09      	ldr	r4, [pc, #36]	; (5b50 <CC_PalPowerSaveModeInit+0x28>)
    5b2c:	4d09      	ldr	r5, [pc, #36]	; (5b54 <CC_PalPowerSaveModeInit+0x2c>)
    5b2e:	6920      	ldr	r0, [r4, #16]
    5b30:	68ab      	ldr	r3, [r5, #8]
    5b32:	4798      	blx	r3
    5b34:	b118      	cbz	r0, 5b3e <CC_PalPowerSaveModeInit+0x16>
    5b36:	4b08      	ldr	r3, [pc, #32]	; (5b58 <CC_PalPowerSaveModeInit+0x30>)
    5b38:	4808      	ldr	r0, [pc, #32]	; (5b5c <CC_PalPowerSaveModeInit+0x34>)
    5b3a:	685b      	ldr	r3, [r3, #4]
    5b3c:	4798      	blx	r3
    5b3e:	4a08      	ldr	r2, [pc, #32]	; (5b60 <CC_PalPowerSaveModeInit+0x38>)
    5b40:	68eb      	ldr	r3, [r5, #12]
    5b42:	6920      	ldr	r0, [r4, #16]
    5b44:	2100      	movs	r1, #0
    5b46:	6011      	str	r1, [r2, #0]
    5b48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5b4c:	4718      	bx	r3
    5b4e:	bf00      	nop
    5b50:	200003f4 	.word	0x200003f4
    5b54:	200003e4 	.word	0x200003e4
    5b58:	200003d4 	.word	0x200003d4
    5b5c:	00008440 	.word	0x00008440
    5b60:	20001d70 	.word	0x20001d70

00005b64 <CC_PalPowerSaveModeSelect>:
    5b64:	b570      	push	{r4, r5, r6, lr}
    5b66:	4d1b      	ldr	r5, [pc, #108]	; (5bd4 <CC_PalPowerSaveModeSelect+0x70>)
    5b68:	4e1b      	ldr	r6, [pc, #108]	; (5bd8 <CC_PalPowerSaveModeSelect+0x74>)
    5b6a:	4604      	mov	r4, r0
    5b6c:	68b2      	ldr	r2, [r6, #8]
    5b6e:	6928      	ldr	r0, [r5, #16]
    5b70:	4790      	blx	r2
    5b72:	b9f8      	cbnz	r0, 5bb4 <CC_PalPowerSaveModeSelect+0x50>
    5b74:	b15c      	cbz	r4, 5b8e <CC_PalPowerSaveModeSelect+0x2a>
    5b76:	4c19      	ldr	r4, [pc, #100]	; (5bdc <CC_PalPowerSaveModeSelect+0x78>)
    5b78:	6823      	ldr	r3, [r4, #0]
    5b7a:	b1b3      	cbz	r3, 5baa <CC_PalPowerSaveModeSelect+0x46>
    5b7c:	2b01      	cmp	r3, #1
    5b7e:	d01b      	beq.n	5bb8 <CC_PalPowerSaveModeSelect+0x54>
    5b80:	3b01      	subs	r3, #1
    5b82:	6023      	str	r3, [r4, #0]
    5b84:	6928      	ldr	r0, [r5, #16]
    5b86:	68f3      	ldr	r3, [r6, #12]
    5b88:	4798      	blx	r3
    5b8a:	2000      	movs	r0, #0
    5b8c:	bd70      	pop	{r4, r5, r6, pc}
    5b8e:	4c13      	ldr	r4, [pc, #76]	; (5bdc <CC_PalPowerSaveModeSelect+0x78>)
    5b90:	6821      	ldr	r1, [r4, #0]
    5b92:	b941      	cbnz	r1, 5ba6 <CC_PalPowerSaveModeSelect+0x42>
    5b94:	4b12      	ldr	r3, [pc, #72]	; (5be0 <CC_PalPowerSaveModeSelect+0x7c>)
    5b96:	2201      	movs	r2, #1
    5b98:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    5b9c:	4a11      	ldr	r2, [pc, #68]	; (5be4 <CC_PalPowerSaveModeSelect+0x80>)
    5b9e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    5ba2:	2b00      	cmp	r3, #0
    5ba4:	d1fb      	bne.n	5b9e <CC_PalPowerSaveModeSelect+0x3a>
    5ba6:	3101      	adds	r1, #1
    5ba8:	6021      	str	r1, [r4, #0]
    5baa:	68f3      	ldr	r3, [r6, #12]
    5bac:	6928      	ldr	r0, [r5, #16]
    5bae:	4798      	blx	r3
    5bb0:	2000      	movs	r0, #0
    5bb2:	bd70      	pop	{r4, r5, r6, pc}
    5bb4:	480c      	ldr	r0, [pc, #48]	; (5be8 <CC_PalPowerSaveModeSelect+0x84>)
    5bb6:	bd70      	pop	{r4, r5, r6, pc}
    5bb8:	4a0a      	ldr	r2, [pc, #40]	; (5be4 <CC_PalPowerSaveModeSelect+0x80>)
    5bba:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    5bbe:	2b00      	cmp	r3, #0
    5bc0:	d1fb      	bne.n	5bba <CC_PalPowerSaveModeSelect+0x56>
    5bc2:	4a07      	ldr	r2, [pc, #28]	; (5be0 <CC_PalPowerSaveModeSelect+0x7c>)
    5bc4:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    5bc8:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    5bcc:	f7ff ff46 	bl	5a5c <CC_HalMaskInterrupt>
    5bd0:	6823      	ldr	r3, [r4, #0]
    5bd2:	e7d5      	b.n	5b80 <CC_PalPowerSaveModeSelect+0x1c>
    5bd4:	200003f4 	.word	0x200003f4
    5bd8:	200003e4 	.word	0x200003e4
    5bdc:	20001d70 	.word	0x20001d70
    5be0:	5002a000 	.word	0x5002a000
    5be4:	5002b000 	.word	0x5002b000
    5be8:	ffff8fe9 	.word	0xffff8fe9

00005bec <gpio_pin_configure_dt>:
{
    5bec:	b510      	push	{r4, lr}
    5bee:	4602      	mov	r2, r0
	return gpio_pin_configure(spec->port,
    5bf0:	6800      	ldr	r0, [r0, #0]
    5bf2:	f892 c004 	ldrb.w	ip, [r2, #4]
				  spec->dt_flags | extra_flags);
    5bf6:	88d3      	ldrh	r3, [r2, #6]
	return gpio_pin_configure(spec->port,
    5bf8:	430b      	orrs	r3, r1
	const struct gpio_driver_api *api =
    5bfa:	6884      	ldr	r4, [r0, #8]
	struct gpio_driver_data *data =
    5bfc:	6901      	ldr	r1, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    5bfe:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    5c02:	d007      	beq.n	5c14 <gpio_pin_configure_dt+0x28>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    5c04:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
    5c08:	d004      	beq.n	5c14 <gpio_pin_configure_dt+0x28>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    5c0a:	f013 0f01 	tst.w	r3, #1
    5c0e:	d001      	beq.n	5c14 <gpio_pin_configure_dt+0x28>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    5c10:	f483 2340 	eor.w	r3, r3, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    5c14:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    5c18:	f013 0f01 	tst.w	r3, #1
    5c1c:	d00a      	beq.n	5c34 <gpio_pin_configure_dt+0x48>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    5c1e:	2301      	movs	r3, #1
    5c20:	fa03 fe0c 	lsl.w	lr, r3, ip
    5c24:	680b      	ldr	r3, [r1, #0]
    5c26:	ea43 030e 	orr.w	r3, r3, lr
    5c2a:	600b      	str	r3, [r1, #0]
	return api->pin_configure(port, pin, flags);
    5c2c:	6823      	ldr	r3, [r4, #0]
    5c2e:	4661      	mov	r1, ip
    5c30:	4798      	blx	r3
}
    5c32:	bd10      	pop	{r4, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    5c34:	2301      	movs	r3, #1
    5c36:	fa03 fe0c 	lsl.w	lr, r3, ip
    5c3a:	680b      	ldr	r3, [r1, #0]
    5c3c:	ea23 030e 	bic.w	r3, r3, lr
    5c40:	600b      	str	r3, [r1, #0]
    5c42:	e7f3      	b.n	5c2c <gpio_pin_configure_dt+0x40>

00005c44 <AD717X_GetReg>:
{
    5c44:	b084      	sub	sp, #16
    5c46:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    5c4a:	f89d c0d0 	ldrb.w	ip, [sp, #208]	; 0xd0
	for (i = 0; i < device.num_regs; i++) {
    5c4e:	2300      	movs	r3, #0
    5c50:	e001      	b.n	5c56 <AD717X_GetReg+0x12>
    5c52:	3301      	adds	r3, #1
    5c54:	b2db      	uxtb	r3, r3
    5c56:	f89d 201c 	ldrb.w	r2, [sp, #28]
    5c5a:	429a      	cmp	r2, r3
    5c5c:	d908      	bls.n	5c70 <AD717X_GetReg+0x2c>
		if (device.regs[i].addr == reg_address) {
    5c5e:	9906      	ldr	r1, [sp, #24]
    5c60:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    5c64:	0082      	lsls	r2, r0, #2
    5c66:	1888      	adds	r0, r1, r2
    5c68:	588a      	ldr	r2, [r1, r2]
    5c6a:	4562      	cmp	r2, ip
    5c6c:	d1f1      	bne.n	5c52 <AD717X_GetReg+0xe>
    5c6e:	e000      	b.n	5c72 <AD717X_GetReg+0x2e>
	ad717x_st_reg* reg = 0;
    5c70:	2000      	movs	r0, #0
}
    5c72:	b004      	add	sp, #16
    5c74:	4770      	bx	lr

00005c76 <AD717X_ComputeDataregSize>:
{
    5c76:	b084      	sub	sp, #16
    5c78:	b530      	push	{r4, r5, lr}
    5c7a:	b0b3      	sub	sp, #204	; 0xcc
    5c7c:	ac36      	add	r4, sp, #216	; 0xd8
    5c7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	reg_ptr = AD717X_GetReg(device, AD717X_IFMODE_REG);
    5c82:	2302      	movs	r3, #2
    5c84:	9330      	str	r3, [sp, #192]	; 0xc0
    5c86:	24c0      	movs	r4, #192	; 0xc0
    5c88:	4622      	mov	r2, r4
    5c8a:	a93a      	add	r1, sp, #232	; 0xe8
    5c8c:	4668      	mov	r0, sp
    5c8e:	f000 fd03 	bl	6698 <memcpy>
    5c92:	ab36      	add	r3, sp, #216	; 0xd8
    5c94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    5c96:	f7ff ffd5 	bl	5c44 <AD717X_GetReg>
    5c9a:	4605      	mov	r5, r0
	datareg_ptr = AD717X_GetReg(device, AD717X_DATA_REG);
    5c9c:	2304      	movs	r3, #4
    5c9e:	9330      	str	r3, [sp, #192]	; 0xc0
    5ca0:	4622      	mov	r2, r4
    5ca2:	a93a      	add	r1, sp, #232	; 0xe8
    5ca4:	4668      	mov	r0, sp
    5ca6:	f000 fcf7 	bl	6698 <memcpy>
    5caa:	ab36      	add	r3, sp, #216	; 0xd8
    5cac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    5cae:	f7ff ffc9 	bl	5c44 <AD717X_GetReg>
    5cb2:	4604      	mov	r4, r0
	case_var = reg_ptr->value & (AD717X_IFMODE_REG_DATA_STAT |
    5cb4:	88ab      	ldrh	r3, [r5, #4]
	datareg_ptr->size = 3;
    5cb6:	2203      	movs	r2, #3
    5cb8:	6082      	str	r2, [r0, #8]
	if ((case_var & AD717X_IFMODE_REG_DATA_WL16) == AD717X_IFMODE_REG_DATA_WL16)
    5cba:	f013 0f01 	tst.w	r3, #1
    5cbe:	d001      	beq.n	5cc4 <AD717X_ComputeDataregSize+0x4e>
		datareg_ptr->size--;
    5cc0:	2202      	movs	r2, #2
    5cc2:	6082      	str	r2, [r0, #8]
	if ((case_var & AD717X_IFMODE_REG_DATA_STAT) == AD717X_IFMODE_REG_DATA_STAT)
    5cc4:	f013 0f40 	tst.w	r3, #64	; 0x40
    5cc8:	d002      	beq.n	5cd0 <AD717X_ComputeDataregSize+0x5a>
		datareg_ptr->size++;
    5cca:	68a3      	ldr	r3, [r4, #8]
    5ccc:	3301      	adds	r3, #1
    5cce:	60a3      	str	r3, [r4, #8]
	reg_ptr = AD717X_GetReg(device, AD717X_ID_REG);
    5cd0:	2307      	movs	r3, #7
    5cd2:	9330      	str	r3, [sp, #192]	; 0xc0
    5cd4:	22c0      	movs	r2, #192	; 0xc0
    5cd6:	a93a      	add	r1, sp, #232	; 0xe8
    5cd8:	4668      	mov	r0, sp
    5cda:	f000 fcdd 	bl	6698 <memcpy>
    5cde:	ab36      	add	r3, sp, #216	; 0xd8
    5ce0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    5ce2:	f7ff ffaf 	bl	5c44 <AD717X_GetReg>
	if ((reg_ptr->value & AD717X_ID_REG_MASK) == AD7177_2_ID_REG_VALUE)
    5ce6:	6843      	ldr	r3, [r0, #4]
    5ce8:	f023 030f 	bic.w	r3, r3, #15
    5cec:	041b      	lsls	r3, r3, #16
    5cee:	0c1b      	lsrs	r3, r3, #16
    5cf0:	f644 72d0 	movw	r2, #20432	; 0x4fd0
    5cf4:	4293      	cmp	r3, r2
    5cf6:	d005      	beq.n	5d04 <AD717X_ComputeDataregSize+0x8e>
}
    5cf8:	2000      	movs	r0, #0
    5cfa:	b033      	add	sp, #204	; 0xcc
    5cfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    5d00:	b004      	add	sp, #16
    5d02:	4770      	bx	lr
		datareg_ptr->size++;
    5d04:	68a3      	ldr	r3, [r4, #8]
    5d06:	3301      	adds	r3, #1
    5d08:	60a3      	str	r3, [r4, #8]
    5d0a:	e7f5      	b.n	5cf8 <AD717X_ComputeDataregSize+0x82>

00005d0c <AD717X_ComputeCRC8>:
{
    5d0c:	4684      	mov	ip, r0
	uint8_t crc = 0;
    5d0e:	2000      	movs	r0, #0
	while (bufSize) {
    5d10:	e015      	b.n	5d3e <AD717X_ComputeCRC8+0x32>
				crc <<= 1;
    5d12:	0040      	lsls	r0, r0, #1
    5d14:	b2c0      	uxtb	r0, r0
		for (i = 0x80; i != 0; i >>= 1) {
    5d16:	085b      	lsrs	r3, r3, #1
    5d18:	b16b      	cbz	r3, 5d36 <AD717X_ComputeCRC8+0x2a>
			if (((crc & 0x80) != 0) != ((*pBuf & i) !=
    5d1a:	f89c 2000 	ldrb.w	r2, [ip]
    5d1e:	421a      	tst	r2, r3
    5d20:	bf14      	ite	ne
    5d22:	2201      	movne	r2, #1
    5d24:	2200      	moveq	r2, #0
    5d26:	ebb2 1fd0 	cmp.w	r2, r0, lsr #7
    5d2a:	d0f2      	beq.n	5d12 <AD717X_ComputeCRC8+0x6>
				crc <<= 1;
    5d2c:	0040      	lsls	r0, r0, #1
    5d2e:	b2c0      	uxtb	r0, r0
				crc ^= AD717X_CRC8_POLYNOMIAL_REPRESENTATION;
    5d30:	f080 0007 	eor.w	r0, r0, #7
    5d34:	e7ef      	b.n	5d16 <AD717X_ComputeCRC8+0xa>
		pBuf++;
    5d36:	f10c 0c01 	add.w	ip, ip, #1
		bufSize--;
    5d3a:	3901      	subs	r1, #1
    5d3c:	b2c9      	uxtb	r1, r1
	while (bufSize) {
    5d3e:	b109      	cbz	r1, 5d44 <AD717X_ComputeCRC8+0x38>
		for (i = 0x80; i != 0; i >>= 1) {
    5d40:	2380      	movs	r3, #128	; 0x80
    5d42:	e7e9      	b.n	5d18 <AD717X_ComputeCRC8+0xc>
}
    5d44:	4770      	bx	lr

00005d46 <ad717x_set_polarity>:
{
    5d46:	b084      	sub	sp, #16
    5d48:	b570      	push	{r4, r5, r6, lr}
    5d4a:	b0b2      	sub	sp, #200	; 0xc8
    5d4c:	ac36      	add	r4, sp, #216	; 0xd8
    5d4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    5d52:	f89d 61a8 	ldrb.w	r6, [sp, #424]	; 0x1a8
    5d56:	f89d 41ac 	ldrb.w	r4, [sp, #428]	; 0x1ac
	setup_reg = AD717X_GetReg(device, AD717X_SETUPCON0_REG + setup_id);
    5d5a:	f104 0520 	add.w	r5, r4, #32
    5d5e:	b2ed      	uxtb	r5, r5
    5d60:	9530      	str	r5, [sp, #192]	; 0xc0
    5d62:	22c0      	movs	r2, #192	; 0xc0
    5d64:	a93a      	add	r1, sp, #232	; 0xe8
    5d66:	4668      	mov	r0, sp
    5d68:	f000 fc96 	bl	6698 <memcpy>
    5d6c:	ab36      	add	r3, sp, #216	; 0xd8
    5d6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    5d70:	f7ff ff68 	bl	5c44 <AD717X_GetReg>
	if (!setup_reg)
    5d74:	b300      	cbz	r0, 5db8 <ad717x_set_polarity+0x72>
	if (bipolar)
    5d76:	b1d6      	cbz	r6, 5dae <ad717x_set_polarity+0x68>
		setup_reg->value |= AD717X_SETUP_CONF_REG_BI_UNIPOLAR;
    5d78:	6842      	ldr	r2, [r0, #4]
    5d7a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    5d7e:	6042      	str	r2, [r0, #4]
	if (AD717X_WriteRegister(device,
    5d80:	9530      	str	r5, [sp, #192]	; 0xc0
    5d82:	22c0      	movs	r2, #192	; 0xc0
    5d84:	a93a      	add	r1, sp, #232	; 0xe8
    5d86:	4668      	mov	r0, sp
    5d88:	f000 fc86 	bl	6698 <memcpy>
    5d8c:	ab36      	add	r3, sp, #216	; 0xd8
    5d8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    5d90:	f7fa fbb8 	bl	504 <AD717X_WriteRegister>
    5d94:	2800      	cmp	r0, #0
    5d96:	db12      	blt.n	5dbe <ad717x_set_polarity+0x78>
	device.setups[setup_id].bi_unipolar = bipolar;
    5d98:	3418      	adds	r4, #24
    5d9a:	ab36      	add	r3, sp, #216	; 0xd8
    5d9c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    5da0:	70a6      	strb	r6, [r4, #2]
	return 0;
    5da2:	2000      	movs	r0, #0
}
    5da4:	b032      	add	sp, #200	; 0xc8
    5da6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5daa:	b004      	add	sp, #16
    5dac:	4770      	bx	lr
		setup_reg->value &= ~(AD717X_SETUP_CONF_REG_BI_UNIPOLAR);
    5dae:	6842      	ldr	r2, [r0, #4]
    5db0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    5db4:	6042      	str	r2, [r0, #4]
    5db6:	e7e3      	b.n	5d80 <ad717x_set_polarity+0x3a>
		return -EINVAL;
    5db8:	f06f 0015 	mvn.w	r0, #21
    5dbc:	e7f2      	b.n	5da4 <ad717x_set_polarity+0x5e>
		return -EINVAL;
    5dbe:	f06f 0015 	mvn.w	r0, #21
    5dc2:	e7ef      	b.n	5da4 <ad717x_set_polarity+0x5e>

00005dc4 <ad717x_set_reference_source>:
{
    5dc4:	b084      	sub	sp, #16
    5dc6:	b570      	push	{r4, r5, r6, lr}
    5dc8:	b0b2      	sub	sp, #200	; 0xc8
    5dca:	ac36      	add	r4, sp, #216	; 0xd8
    5dcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    5dd0:	f89d 61a8 	ldrb.w	r6, [sp, #424]	; 0x1a8
    5dd4:	f89d 41ac 	ldrb.w	r4, [sp, #428]	; 0x1ac
	setup_reg = AD717X_GetReg(device, AD717X_SETUPCON0_REG + setup_id);
    5dd8:	f104 0520 	add.w	r5, r4, #32
    5ddc:	b2ed      	uxtb	r5, r5
    5dde:	9530      	str	r5, [sp, #192]	; 0xc0
    5de0:	22c0      	movs	r2, #192	; 0xc0
    5de2:	a93a      	add	r1, sp, #232	; 0xe8
    5de4:	4668      	mov	r0, sp
    5de6:	f000 fc57 	bl	6698 <memcpy>
    5dea:	ab36      	add	r3, sp, #216	; 0xd8
    5dec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    5dee:	f7ff ff29 	bl	5c44 <AD717X_GetReg>
	if (!setup_reg)
    5df2:	2800      	cmp	r0, #0
    5df4:	d043      	beq.n	5e7e <ad717x_set_reference_source+0xba>
	setup_reg->value &= ~AD717X_SETUP_CONF_REG_REF_SEL_MSK;
    5df6:	6843      	ldr	r3, [r0, #4]
    5df8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    5dfc:	6043      	str	r3, [r0, #4]
	setup_reg->value |= (AD717X_SETUP_CONF_REG_REF_SEL(ref_source));
    5dfe:	0131      	lsls	r1, r6, #4
    5e00:	f001 0130 	and.w	r1, r1, #48	; 0x30
    5e04:	430b      	orrs	r3, r1
    5e06:	6043      	str	r3, [r0, #4]
	if (AD717X_WriteRegister(device,
    5e08:	9530      	str	r5, [sp, #192]	; 0xc0
    5e0a:	22c0      	movs	r2, #192	; 0xc0
    5e0c:	a93a      	add	r1, sp, #232	; 0xe8
    5e0e:	4668      	mov	r0, sp
    5e10:	f000 fc42 	bl	6698 <memcpy>
    5e14:	ab36      	add	r3, sp, #216	; 0xd8
    5e16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    5e18:	f7fa fb74 	bl	504 <AD717X_WriteRegister>
    5e1c:	2800      	cmp	r0, #0
    5e1e:	db31      	blt.n	5e84 <ad717x_set_reference_source+0xc0>
	device.setups[setup_id].ref_source = ref_source;
    5e20:	3418      	adds	r4, #24
    5e22:	ab36      	add	r3, sp, #216	; 0xd8
    5e24:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    5e28:	7166      	strb	r6, [r4, #5]
	if (ref_source == INTERNAL_REF) {
    5e2a:	2e02      	cmp	r6, #2
    5e2c:	d005      	beq.n	5e3a <ad717x_set_reference_source+0x76>
	return 0;
    5e2e:	2000      	movs	r0, #0
}
    5e30:	b032      	add	sp, #200	; 0xc8
    5e32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5e36:	b004      	add	sp, #16
    5e38:	4770      	bx	lr
		adc_mode_reg = AD717X_GetReg(device, AD717X_ADCMODE_REG);
    5e3a:	2301      	movs	r3, #1
    5e3c:	9330      	str	r3, [sp, #192]	; 0xc0
    5e3e:	22c0      	movs	r2, #192	; 0xc0
    5e40:	a93a      	add	r1, sp, #232	; 0xe8
    5e42:	4668      	mov	r0, sp
    5e44:	f000 fc28 	bl	6698 <memcpy>
    5e48:	ab36      	add	r3, sp, #216	; 0xd8
    5e4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    5e4c:	f7ff fefa 	bl	5c44 <AD717X_GetReg>
		if (!adc_mode_reg)
    5e50:	b1d8      	cbz	r0, 5e8a <ad717x_set_reference_source+0xc6>
		adc_mode_reg->value |= AD717X_ADCMODE_REG_REF_EN;
    5e52:	6843      	ldr	r3, [r0, #4]
    5e54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    5e58:	6043      	str	r3, [r0, #4]
		if (AD717X_WriteRegister(device, AD717X_ADCMODE_REG) < 0)
    5e5a:	2301      	movs	r3, #1
    5e5c:	9330      	str	r3, [sp, #192]	; 0xc0
    5e5e:	22c0      	movs	r2, #192	; 0xc0
    5e60:	a93a      	add	r1, sp, #232	; 0xe8
    5e62:	4668      	mov	r0, sp
    5e64:	f000 fc18 	bl	6698 <memcpy>
    5e68:	ab36      	add	r3, sp, #216	; 0xd8
    5e6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    5e6c:	f7fa fb4a 	bl	504 <AD717X_WriteRegister>
    5e70:	2800      	cmp	r0, #0
    5e72:	db0d      	blt.n	5e90 <ad717x_set_reference_source+0xcc>
		device.ref_en = true;
    5e74:	2301      	movs	r3, #1
    5e76:	f88d 30f7 	strb.w	r3, [sp, #247]	; 0xf7
	return 0;
    5e7a:	2000      	movs	r0, #0
    5e7c:	e7d8      	b.n	5e30 <ad717x_set_reference_source+0x6c>
		return -EINVAL;
    5e7e:	f06f 0015 	mvn.w	r0, #21
    5e82:	e7d5      	b.n	5e30 <ad717x_set_reference_source+0x6c>
		return -EINVAL;
    5e84:	f06f 0015 	mvn.w	r0, #21
    5e88:	e7d2      	b.n	5e30 <ad717x_set_reference_source+0x6c>
			return -EINVAL;
    5e8a:	f06f 0015 	mvn.w	r0, #21
    5e8e:	e7cf      	b.n	5e30 <ad717x_set_reference_source+0x6c>
			return -EINVAL;
    5e90:	f06f 0015 	mvn.w	r0, #21
    5e94:	e7cc      	b.n	5e30 <ad717x_set_reference_source+0x6c>

00005e96 <ad717x_enable_buffers>:
{
    5e96:	b084      	sub	sp, #16
    5e98:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e9a:	b0b3      	sub	sp, #204	; 0xcc
    5e9c:	ac38      	add	r4, sp, #224	; 0xe0
    5e9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    5ea2:	f89d 71b0 	ldrb.w	r7, [sp, #432]	; 0x1b0
    5ea6:	f89d 61b4 	ldrb.w	r6, [sp, #436]	; 0x1b4
    5eaa:	f89d 41b8 	ldrb.w	r4, [sp, #440]	; 0x1b8
	setup_reg = AD717X_GetReg(device, AD717X_SETUPCON0_REG + setup_id);
    5eae:	f104 0520 	add.w	r5, r4, #32
    5eb2:	b2ed      	uxtb	r5, r5
    5eb4:	9530      	str	r5, [sp, #192]	; 0xc0
    5eb6:	22c0      	movs	r2, #192	; 0xc0
    5eb8:	a93c      	add	r1, sp, #240	; 0xf0
    5eba:	4668      	mov	r0, sp
    5ebc:	f000 fbec 	bl	6698 <memcpy>
    5ec0:	ab38      	add	r3, sp, #224	; 0xe0
    5ec2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    5ec4:	f7ff febe 	bl	5c44 <AD717X_GetReg>
	if (!setup_reg)
    5ec8:	b360      	cbz	r0, 5f24 <ad717x_enable_buffers+0x8e>
    5eca:	4603      	mov	r3, r0
	if (inbuf_en)
    5ecc:	b307      	cbz	r7, 5f10 <ad717x_enable_buffers+0x7a>
		setup_reg->value |= (AD717X_SETUP_CONF_REG_AINBUF_P |
    5ece:	6842      	ldr	r2, [r0, #4]
    5ed0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
    5ed4:	6042      	str	r2, [r0, #4]
	if (refbuf_en)
    5ed6:	b306      	cbz	r6, 5f1a <ad717x_enable_buffers+0x84>
		setup_reg->value |= (AD717X_SETUP_CONF_REG_REFBUF_P |
    5ed8:	685a      	ldr	r2, [r3, #4]
    5eda:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
    5ede:	605a      	str	r2, [r3, #4]
	if (AD717X_WriteRegister(device,
    5ee0:	9530      	str	r5, [sp, #192]	; 0xc0
    5ee2:	22c0      	movs	r2, #192	; 0xc0
    5ee4:	a93c      	add	r1, sp, #240	; 0xf0
    5ee6:	4668      	mov	r0, sp
    5ee8:	f000 fbd6 	bl	6698 <memcpy>
    5eec:	ab38      	add	r3, sp, #224	; 0xe0
    5eee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    5ef0:	f7fa fb08 	bl	504 <AD717X_WriteRegister>
    5ef4:	2800      	cmp	r0, #0
    5ef6:	db18      	blt.n	5f2a <ad717x_enable_buffers+0x94>
	device.setups[setup_id].input_buff = inbuf_en;
    5ef8:	3418      	adds	r4, #24
    5efa:	ab38      	add	r3, sp, #224	; 0xe0
    5efc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    5f00:	7127      	strb	r7, [r4, #4]
	device.setups[setup_id].ref_buff = refbuf_en;
    5f02:	70e6      	strb	r6, [r4, #3]
	return 0;
    5f04:	2000      	movs	r0, #0
}
    5f06:	b033      	add	sp, #204	; 0xcc
    5f08:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5f0c:	b004      	add	sp, #16
    5f0e:	4770      	bx	lr
		setup_reg->value &= (~(AD717X_SETUP_CONF_REG_AINBUF_P |
    5f10:	6842      	ldr	r2, [r0, #4]
    5f12:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    5f16:	6042      	str	r2, [r0, #4]
    5f18:	e7dd      	b.n	5ed6 <ad717x_enable_buffers+0x40>
		setup_reg->value &= (~(AD717X_SETUP_CONF_REG_REFBUF_P |
    5f1a:	685a      	ldr	r2, [r3, #4]
    5f1c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    5f20:	605a      	str	r2, [r3, #4]
    5f22:	e7dd      	b.n	5ee0 <ad717x_enable_buffers+0x4a>
		return -EINVAL;
    5f24:	f06f 0015 	mvn.w	r0, #21
    5f28:	e7ed      	b.n	5f06 <ad717x_enable_buffers+0x70>
		return -EINVAL;
    5f2a:	f06f 0015 	mvn.w	r0, #21
    5f2e:	e7ea      	b.n	5f06 <ad717x_enable_buffers+0x70>

00005f30 <AD717X_ComputeXOR8>:
{
    5f30:	4603      	mov	r3, r0
	uint8_t sxor = 0;
    5f32:	2000      	movs	r0, #0
	while (bufSize) {
    5f34:	e004      	b.n	5f40 <AD717X_ComputeXOR8+0x10>
		sxor ^= *pBuf;
    5f36:	f813 2b01 	ldrb.w	r2, [r3], #1
    5f3a:	4050      	eors	r0, r2
		bufSize--;
    5f3c:	3901      	subs	r1, #1
    5f3e:	b2c9      	uxtb	r1, r1
	while (bufSize) {
    5f40:	2900      	cmp	r1, #0
    5f42:	d1f8      	bne.n	5f36 <AD717X_ComputeXOR8+0x6>
}
    5f44:	4770      	bx	lr

00005f46 <AD717X_WaitForReady>:
{
    5f46:	b084      	sub	sp, #16
    5f48:	b530      	push	{r4, r5, lr}
    5f4a:	b0b3      	sub	sp, #204	; 0xcc
    5f4c:	ad36      	add	r5, sp, #216	; 0xd8
    5f4e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    5f52:	9d6a      	ldr	r5, [sp, #424]	; 0x1a8
	statusReg = AD717X_GetReg(device, AD717X_STATUS_REG);
    5f54:	2300      	movs	r3, #0
    5f56:	9330      	str	r3, [sp, #192]	; 0xc0
    5f58:	22c0      	movs	r2, #192	; 0xc0
    5f5a:	a93a      	add	r1, sp, #232	; 0xe8
    5f5c:	4668      	mov	r0, sp
    5f5e:	f000 fb9b 	bl	6698 <memcpy>
    5f62:	ab36      	add	r3, sp, #216	; 0xd8
    5f64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    5f66:	f7ff fe6d 	bl	5c44 <AD717X_GetReg>
	if (!statusReg)
    5f6a:	b1e0      	cbz	r0, 5fa6 <AD717X_WaitForReady+0x60>
	int8_t ready = 0;
    5f6c:	2300      	movs	r3, #0
    5f6e:	e001      	b.n	5f74 <AD717X_WaitForReady+0x2e>
		ready = ((ret & AD717X_STATUS_REG_RDY) >> 7 ) == 1;
    5f70:	f3c4 13c0 	ubfx	r3, r4, #7, #1
	while (!ready && --timeout) {
    5f74:	b983      	cbnz	r3, 5f98 <AD717X_WaitForReady+0x52>
    5f76:	3d01      	subs	r5, #1
    5f78:	d00e      	beq.n	5f98 <AD717X_WaitForReady+0x52>
		ret = AD717X_ReadRegister(device, AD717X_STATUS_REG);
    5f7a:	2300      	movs	r3, #0
    5f7c:	9330      	str	r3, [sp, #192]	; 0xc0
    5f7e:	22c0      	movs	r2, #192	; 0xc0
    5f80:	a93a      	add	r1, sp, #232	; 0xe8
    5f82:	4668      	mov	r0, sp
    5f84:	f000 fb88 	bl	6698 <memcpy>
    5f88:	ab36      	add	r3, sp, #216	; 0xd8
    5f8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    5f8c:	f7fa fb14 	bl	5b8 <AD717X_ReadRegister>
		if (ret < 0)
    5f90:	1e04      	subs	r4, r0, #0
    5f92:	daed      	bge.n	5f70 <AD717X_WaitForReady+0x2a>
			return ret;
    5f94:	4620      	mov	r0, r4
    5f96:	e001      	b.n	5f9c <AD717X_WaitForReady+0x56>
	ret = (ret & 0xF); //Extract channel number
    5f98:	f004 000f 	and.w	r0, r4, #15
}
    5f9c:	b033      	add	sp, #204	; 0xcc
    5f9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    5fa2:	b004      	add	sp, #16
    5fa4:	4770      	bx	lr
		return INVALID_VAL;
    5fa6:	f04f 30ff 	mov.w	r0, #4294967295
    5faa:	e7f7      	b.n	5f9c <AD717X_WaitForReady+0x56>

00005fac <AD717X_ReadData>:
{
    5fac:	b084      	sub	sp, #16
    5fae:	b510      	push	{r4, lr}
    5fb0:	b0b2      	sub	sp, #200	; 0xc8
    5fb2:	ac34      	add	r4, sp, #208	; 0xd0
    5fb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	dataReg = AD717X_GetReg(device, AD717X_DATA_REG);
    5fb8:	2304      	movs	r3, #4
    5fba:	9330      	str	r3, [sp, #192]	; 0xc0
    5fbc:	22c0      	movs	r2, #192	; 0xc0
    5fbe:	a938      	add	r1, sp, #224	; 0xe0
    5fc0:	4668      	mov	r0, sp
    5fc2:	f000 fb69 	bl	6698 <memcpy>
    5fc6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    5fca:	f7ff fe3b 	bl	5c44 <AD717X_GetReg>
	if (!dataReg)
    5fce:	b1b0      	cbz	r0, 5ffe <AD717X_ReadData+0x52>
	AD717X_ComputeDataregSize(device);
    5fd0:	24c0      	movs	r4, #192	; 0xc0
    5fd2:	4622      	mov	r2, r4
    5fd4:	a938      	add	r1, sp, #224	; 0xe0
    5fd6:	4668      	mov	r0, sp
    5fd8:	f000 fb5e 	bl	6698 <memcpy>
    5fdc:	ab34      	add	r3, sp, #208	; 0xd0
    5fde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    5fe0:	f7ff fe49 	bl	5c76 <AD717X_ComputeDataregSize>
	value = AD717X_ReadRegister(device, AD717X_DATA_REG);
    5fe4:	2304      	movs	r3, #4
    5fe6:	9330      	str	r3, [sp, #192]	; 0xc0
    5fe8:	4622      	mov	r2, r4
    5fea:	a938      	add	r1, sp, #224	; 0xe0
    5fec:	4668      	mov	r0, sp
    5fee:	f000 fb53 	bl	6698 <memcpy>
    5ff2:	ab34      	add	r3, sp, #208	; 0xd0
    5ff4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    5ff6:	f7fa fadf 	bl	5b8 <AD717X_ReadRegister>
	*pData = value;
    5ffa:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
    5ffc:	6018      	str	r0, [r3, #0]
}
    5ffe:	b032      	add	sp, #200	; 0xc8
    6000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6004:	b004      	add	sp, #16
    6006:	4770      	bx	lr

00006008 <AD717X_UpdateCRCSetting>:
{
    6008:	b084      	sub	sp, #16
    600a:	b500      	push	{lr}
    600c:	b0b3      	sub	sp, #204	; 0xcc
    600e:	f10d 0cd0 	add.w	ip, sp, #208	; 0xd0
    6012:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	interfaceReg = AD717X_GetReg(device, AD717X_IFMODE_REG);
    6016:	2302      	movs	r3, #2
    6018:	9330      	str	r3, [sp, #192]	; 0xc0
    601a:	22c0      	movs	r2, #192	; 0xc0
    601c:	a938      	add	r1, sp, #224	; 0xe0
    601e:	4668      	mov	r0, sp
    6020:	f000 fb3a 	bl	6698 <memcpy>
    6024:	ab34      	add	r3, sp, #208	; 0xd0
    6026:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6028:	f7ff fe0c 	bl	5c44 <AD717X_GetReg>
	if (!interfaceReg)
    602c:	b1c0      	cbz	r0, 6060 <AD717X_UpdateCRCSetting+0x58>
	if (AD717X_IFMODE_REG_CRC_STAT(interfaceReg->value)) {
    602e:	6840      	ldr	r0, [r0, #4]
    6030:	f010 0308 	ands.w	r3, r0, #8
    6034:	d008      	beq.n	6048 <AD717X_UpdateCRCSetting+0x40>
		device.useCRC = AD717X_USE_CRC;
    6036:	2301      	movs	r3, #1
    6038:	f88d 30ed 	strb.w	r3, [sp, #237]	; 0xed
	return 0;
    603c:	2000      	movs	r0, #0
}
    603e:	b033      	add	sp, #204	; 0xcc
    6040:	f85d eb04 	ldr.w	lr, [sp], #4
    6044:	b004      	add	sp, #16
    6046:	4770      	bx	lr
	else if (AD717X_IFMODE_REG_XOR_STAT(interfaceReg->value)) {
    6048:	f010 0004 	ands.w	r0, r0, #4
    604c:	d004      	beq.n	6058 <AD717X_UpdateCRCSetting+0x50>
		device.useCRC = AD717X_USE_XOR;
    604e:	2202      	movs	r2, #2
    6050:	f88d 20ed 	strb.w	r2, [sp, #237]	; 0xed
	return 0;
    6054:	4618      	mov	r0, r3
    6056:	e7f2      	b.n	603e <AD717X_UpdateCRCSetting+0x36>
		device.useCRC = AD717X_DISABLE;
    6058:	2300      	movs	r3, #0
    605a:	f88d 30ed 	strb.w	r3, [sp, #237]	; 0xed
    605e:	e7ee      	b.n	603e <AD717X_UpdateCRCSetting+0x36>
		return INVALID_VAL;
    6060:	f04f 30ff 	mov.w	r0, #4294967295
    6064:	e7eb      	b.n	603e <AD717X_UpdateCRCSetting+0x36>

00006066 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    6066:	4602      	mov	r2, r0
    6068:	b158      	cbz	r0, 6082 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    606a:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    606c:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    6070:	2b01      	cmp	r3, #1
    6072:	d003      	beq.n	607c <sys_notify_validate+0x16>
    6074:	2b03      	cmp	r3, #3
    6076:	d107      	bne.n	6088 <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    6078:	6803      	ldr	r3, [r0, #0]
    607a:	b143      	cbz	r3, 608e <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    607c:	2000      	movs	r0, #0
    607e:	6090      	str	r0, [r2, #8]
    6080:	4770      	bx	lr
		return -EINVAL;
    6082:	f06f 0015 	mvn.w	r0, #21
    6086:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    6088:	f06f 0015 	mvn.w	r0, #21
    608c:	4770      	bx	lr
			rv = -EINVAL;
    608e:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    6092:	4770      	bx	lr

00006094 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    6094:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    6096:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    6098:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    609c:	6081      	str	r1, [r0, #8]
	switch (method) {
    609e:	2a03      	cmp	r2, #3
    60a0:	d103      	bne.n	60aa <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    60a2:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    60a4:	2200      	movs	r2, #0
    60a6:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    60a8:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    60aa:	2000      	movs	r0, #0
    60ac:	e7fa      	b.n	60a4 <sys_notify_finalize+0x10>

000060ae <arch_printk_char_out>:
}
    60ae:	2000      	movs	r0, #0
    60b0:	4770      	bx	lr

000060b2 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    60b2:	b40f      	push	{r0, r1, r2, r3}
    60b4:	b500      	push	{lr}
    60b6:	b083      	sub	sp, #12
    60b8:	a904      	add	r1, sp, #16
    60ba:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    60be:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    60c0:	f7fa fcf6 	bl	ab0 <vprintk>

	va_end(ap);
}
    60c4:	b003      	add	sp, #12
    60c6:	f85d eb04 	ldr.w	lr, [sp], #4
    60ca:	b004      	add	sp, #16
    60cc:	4770      	bx	lr

000060ce <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    60ce:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    60d2:	8b01      	ldrh	r1, [r0, #24]
    60d4:	f021 0107 	bic.w	r1, r1, #7
    60d8:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    60da:	8301      	strh	r1, [r0, #24]
}
    60dc:	4770      	bx	lr

000060de <notify_monitors>:
{
    60de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    60e2:	4606      	mov	r6, r0
    60e4:	460f      	mov	r7, r1
    60e6:	4690      	mov	r8, r2
	return list->head;
    60e8:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    60ea:	b119      	cbz	r1, 60f4 <notify_monitors+0x16>
    60ec:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    60ee:	b131      	cbz	r1, 60fe <notify_monitors+0x20>
	return node->next;
    60f0:	680c      	ldr	r4, [r1, #0]
    60f2:	e004      	b.n	60fe <notify_monitors+0x20>
    60f4:	460c      	mov	r4, r1
    60f6:	e002      	b.n	60fe <notify_monitors+0x20>
    60f8:	4623      	mov	r3, r4
    60fa:	4621      	mov	r1, r4
    60fc:	461c      	mov	r4, r3
    60fe:	b159      	cbz	r1, 6118 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    6100:	684d      	ldr	r5, [r1, #4]
    6102:	4643      	mov	r3, r8
    6104:	463a      	mov	r2, r7
    6106:	4630      	mov	r0, r6
    6108:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    610a:	2c00      	cmp	r4, #0
    610c:	d0f4      	beq.n	60f8 <notify_monitors+0x1a>
    610e:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    6110:	2c00      	cmp	r4, #0
    6112:	d0f2      	beq.n	60fa <notify_monitors+0x1c>
	return node->next;
    6114:	6823      	ldr	r3, [r4, #0]
    6116:	e7f0      	b.n	60fa <notify_monitors+0x1c>
}
    6118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000611c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    611c:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    611e:	f013 0307 	ands.w	r3, r3, #7
    6122:	d103      	bne.n	612c <process_recheck+0x10>
	return list->head;
    6124:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    6126:	b10a      	cbz	r2, 612c <process_recheck+0x10>
		evt = EVT_START;
    6128:	2003      	movs	r0, #3
    612a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    612c:	2b02      	cmp	r3, #2
    612e:	d003      	beq.n	6138 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    6130:	2b01      	cmp	r3, #1
    6132:	d006      	beq.n	6142 <process_recheck+0x26>
	int evt = EVT_NOP;
    6134:	2000      	movs	r0, #0
    6136:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    6138:	8b42      	ldrh	r2, [r0, #26]
    613a:	2a00      	cmp	r2, #0
    613c:	d1f8      	bne.n	6130 <process_recheck+0x14>
		evt = EVT_STOP;
    613e:	2004      	movs	r0, #4
    6140:	4770      	bx	lr
    6142:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    6144:	b10b      	cbz	r3, 614a <process_recheck+0x2e>
		evt = EVT_RESET;
    6146:	2005      	movs	r0, #5
}
    6148:	4770      	bx	lr
	int evt = EVT_NOP;
    614a:	2000      	movs	r0, #0
    614c:	4770      	bx	lr

0000614e <process_complete>:
{
    614e:	b510      	push	{r4, lr}
    6150:	4604      	mov	r4, r0
    6152:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6154:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    6156:	2a00      	cmp	r2, #0
    6158:	db07      	blt.n	616a <process_complete+0x1c>
    615a:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    615e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    6160:	2a01      	cmp	r2, #1
    6162:	d90e      	bls.n	6182 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    6164:	2b04      	cmp	r3, #4
    6166:	d033      	beq.n	61d0 <process_complete+0x82>
}
    6168:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
    616a:	e9d0 0100 	ldrd	r0, r1, [r0]
    616e:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    6172:	2300      	movs	r3, #0
    6174:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    6176:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    6178:	2101      	movs	r1, #1
    617a:	4620      	mov	r0, r4
    617c:	f7ff ffa7 	bl	60ce <set_state>
    6180:	e7f2      	b.n	6168 <process_complete+0x1a>
		*clients = mgr->clients;
    6182:	e9d0 0100 	ldrd	r0, r1, [r0]
    6186:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    618a:	2200      	movs	r2, #0
    618c:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    618e:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    6190:	2b06      	cmp	r3, #6
    6192:	d118      	bne.n	61c6 <process_complete+0x78>
	return list->head;
    6194:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    6198:	b13b      	cbz	r3, 61aa <process_complete+0x5c>
				mgr->refs += 1U;
    619a:	8b62      	ldrh	r2, [r4, #26]
    619c:	3201      	adds	r2, #1
    619e:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
    61a0:	2b00      	cmp	r3, #0
    61a2:	d0f9      	beq.n	6198 <process_complete+0x4a>
	return node->next;
    61a4:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    61a6:	2b00      	cmp	r3, #0
    61a8:	d1f6      	bne.n	6198 <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
    61aa:	2102      	movs	r1, #2
    61ac:	4620      	mov	r0, r4
    61ae:	f7ff ff8e 	bl	60ce <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    61b2:	4620      	mov	r0, r4
    61b4:	f7ff ffb2 	bl	611c <process_recheck>
    61b8:	2800      	cmp	r0, #0
    61ba:	d0d5      	beq.n	6168 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    61bc:	8b23      	ldrh	r3, [r4, #24]
    61be:	f043 0320 	orr.w	r3, r3, #32
    61c2:	8323      	strh	r3, [r4, #24]
    61c4:	e7d0      	b.n	6168 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    61c6:	2100      	movs	r1, #0
    61c8:	4620      	mov	r0, r4
    61ca:	f7ff ff80 	bl	60ce <set_state>
    61ce:	e7f0      	b.n	61b2 <process_complete+0x64>
		set_state(mgr, ONOFF_STATE_OFF);
    61d0:	2100      	movs	r1, #0
    61d2:	f7ff ff7c 	bl	60ce <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    61d6:	4620      	mov	r0, r4
    61d8:	f7ff ffa0 	bl	611c <process_recheck>
    61dc:	2800      	cmp	r0, #0
    61de:	d0c3      	beq.n	6168 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    61e0:	8b23      	ldrh	r3, [r4, #24]
    61e2:	f043 0320 	orr.w	r3, r3, #32
    61e6:	8323      	strh	r3, [r4, #24]
}
    61e8:	e7be      	b.n	6168 <process_complete+0x1a>

000061ea <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    61ea:	b158      	cbz	r0, 6204 <validate_args+0x1a>
{
    61ec:	b510      	push	{r4, lr}
    61ee:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    61f0:	b159      	cbz	r1, 620a <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    61f2:	1d08      	adds	r0, r1, #4
    61f4:	f7ff ff37 	bl	6066 <sys_notify_validate>
	if ((rv == 0)
    61f8:	b918      	cbnz	r0, 6202 <validate_args+0x18>
	    && ((cli->notify.flags
    61fa:	68a3      	ldr	r3, [r4, #8]
    61fc:	f033 0303 	bics.w	r3, r3, #3
    6200:	d106      	bne.n	6210 <validate_args+0x26>
}
    6202:	bd10      	pop	{r4, pc}
		return -EINVAL;
    6204:	f06f 0015 	mvn.w	r0, #21
}
    6208:	4770      	bx	lr
		return -EINVAL;
    620a:	f06f 0015 	mvn.w	r0, #21
    620e:	e7f8      	b.n	6202 <validate_args+0x18>
		rv = -EINVAL;
    6210:	f06f 0015 	mvn.w	r0, #21
    6214:	e7f5      	b.n	6202 <validate_args+0x18>

00006216 <notify_one>:
{
    6216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    621a:	4607      	mov	r7, r0
    621c:	460c      	mov	r4, r1
    621e:	4616      	mov	r6, r2
    6220:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    6222:	4619      	mov	r1, r3
    6224:	1d20      	adds	r0, r4, #4
    6226:	f7ff ff35 	bl	6094 <sys_notify_finalize>
	if (cb) {
    622a:	b128      	cbz	r0, 6238 <notify_one+0x22>
    622c:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    622e:	462b      	mov	r3, r5
    6230:	4632      	mov	r2, r6
    6232:	4621      	mov	r1, r4
    6234:	4638      	mov	r0, r7
    6236:	47c0      	blx	r8
}
    6238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000623c <notify_all>:
{
    623c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6240:	4680      	mov	r8, r0
    6242:	460c      	mov	r4, r1
    6244:	4617      	mov	r7, r2
    6246:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    6248:	e004      	b.n	6254 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    624a:	4633      	mov	r3, r6
    624c:	463a      	mov	r2, r7
    624e:	4640      	mov	r0, r8
    6250:	f7ff ffe1 	bl	6216 <notify_one>
	return list->head;
    6254:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    6256:	b131      	cbz	r1, 6266 <notify_all+0x2a>
	return node->next;
    6258:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    625a:	6025      	str	r5, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    625c:	6863      	ldr	r3, [r4, #4]
    625e:	428b      	cmp	r3, r1
    6260:	d1f3      	bne.n	624a <notify_all+0xe>
	list->tail = node;
    6262:	6065      	str	r5, [r4, #4]
}
    6264:	e7f1      	b.n	624a <notify_all+0xe>
}
    6266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000626a <transition_complete>:
{
    626a:	b508      	push	{r3, lr}
	__asm__ volatile(
    626c:	f04f 0c20 	mov.w	ip, #32
    6270:	f3ef 8211 	mrs	r2, BASEPRI
    6274:	f38c 8812 	msr	BASEPRI_MAX, ip
    6278:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    627c:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    627e:	2101      	movs	r1, #1
    6280:	f7fa fc26 	bl	ad0 <process_event>
}
    6284:	bd08      	pop	{r3, pc}

00006286 <onoff_manager_init>:
	if ((mgr == NULL)
    6286:	4603      	mov	r3, r0
    6288:	b170      	cbz	r0, 62a8 <onoff_manager_init+0x22>
	    || (transitions == NULL)
    628a:	b181      	cbz	r1, 62ae <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
    628c:	680a      	ldr	r2, [r1, #0]
    628e:	b18a      	cbz	r2, 62b4 <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
    6290:	684a      	ldr	r2, [r1, #4]
    6292:	b192      	cbz	r2, 62ba <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    6294:	2000      	movs	r0, #0
    6296:	6018      	str	r0, [r3, #0]
    6298:	6058      	str	r0, [r3, #4]
    629a:	6098      	str	r0, [r3, #8]
    629c:	60d8      	str	r0, [r3, #12]
    629e:	6118      	str	r0, [r3, #16]
    62a0:	6158      	str	r0, [r3, #20]
    62a2:	6198      	str	r0, [r3, #24]
    62a4:	6119      	str	r1, [r3, #16]
	return 0;
    62a6:	4770      	bx	lr
		return -EINVAL;
    62a8:	f06f 0015 	mvn.w	r0, #21
    62ac:	4770      	bx	lr
    62ae:	f06f 0015 	mvn.w	r0, #21
    62b2:	4770      	bx	lr
    62b4:	f06f 0015 	mvn.w	r0, #21
    62b8:	4770      	bx	lr
    62ba:	f06f 0015 	mvn.w	r0, #21
}
    62be:	4770      	bx	lr

000062c0 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    62c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    62c2:	4604      	mov	r4, r0
    62c4:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    62c6:	f7ff ff90 	bl	61ea <validate_args>

	if (rv < 0) {
    62ca:	1e06      	subs	r6, r0, #0
    62cc:	db37      	blt.n	633e <onoff_request+0x7e>
    62ce:	f04f 0320 	mov.w	r3, #32
    62d2:	f3ef 8211 	mrs	r2, BASEPRI
    62d6:	f383 8812 	msr	BASEPRI_MAX, r3
    62da:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    62de:	8b25      	ldrh	r5, [r4, #24]
    62e0:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    62e4:	8b63      	ldrh	r3, [r4, #26]
    62e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    62ea:	428b      	cmp	r3, r1
    62ec:	d02f      	beq.n	634e <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    62ee:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    62f0:	2d02      	cmp	r5, #2
    62f2:	d00c      	beq.n	630e <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    62f4:	b18d      	cbz	r5, 631a <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
    62f6:	2d04      	cmp	r5, #4
    62f8:	d00f      	beq.n	631a <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
    62fa:	2d06      	cmp	r5, #6
    62fc:	d00d      	beq.n	631a <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    62fe:	2d05      	cmp	r5, #5
    6300:	d01f      	beq.n	6342 <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
    6302:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    6306:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    6308:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    630a:	4608      	mov	r0, r1
    630c:	e00a      	b.n	6324 <onoff_request+0x64>
		mgr->refs += 1U;
    630e:	3301      	adds	r3, #1
    6310:	8363      	strh	r3, [r4, #26]
		notify = true;
    6312:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
    6314:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    6316:	4618      	mov	r0, r3
    6318:	e004      	b.n	6324 <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
    631a:	fab5 f385 	clz	r3, r5
    631e:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    6320:	2100      	movs	r1, #0
		add_client = true;
    6322:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
    6324:	b128      	cbz	r0, 6332 <onoff_request+0x72>
	parent->next = child;
    6326:	2000      	movs	r0, #0
    6328:	6038      	str	r0, [r7, #0]
	return list->tail;
    632a:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    632c:	b1a8      	cbz	r0, 635a <onoff_request+0x9a>
	parent->next = child;
    632e:	6007      	str	r7, [r0, #0]
	list->tail = node;
    6330:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    6332:	b9ab      	cbnz	r3, 6360 <onoff_request+0xa0>
	__asm__ volatile(
    6334:	f382 8811 	msr	BASEPRI, r2
    6338:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    633c:	b9a9      	cbnz	r1, 636a <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    633e:	4630      	mov	r0, r6
    6340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
    6342:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    6346:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    6348:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    634a:	4608      	mov	r0, r1
    634c:	e7ea      	b.n	6324 <onoff_request+0x64>
		rv = -EAGAIN;
    634e:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    6352:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    6354:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    6356:	4608      	mov	r0, r1
    6358:	e7e4      	b.n	6324 <onoff_request+0x64>
    635a:	6067      	str	r7, [r4, #4]
	list->head = node;
    635c:	6027      	str	r7, [r4, #0]
}
    635e:	e7e8      	b.n	6332 <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
    6360:	2102      	movs	r1, #2
    6362:	4620      	mov	r0, r4
    6364:	f7fa fbb4 	bl	ad0 <process_event>
    6368:	e7e9      	b.n	633e <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
    636a:	2300      	movs	r3, #0
    636c:	462a      	mov	r2, r5
    636e:	4639      	mov	r1, r7
    6370:	4620      	mov	r0, r4
    6372:	f7ff ff50 	bl	6216 <notify_one>
    6376:	e7e2      	b.n	633e <onoff_request+0x7e>

00006378 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    6378:	b508      	push	{r3, lr}
    637a:	4604      	mov	r4, r0
    637c:	4608      	mov	r0, r1
    637e:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    6380:	461a      	mov	r2, r3
    6382:	47a0      	blx	r4
	return z_impl_z_current_get();
    6384:	f7ff f8b0 	bl	54e8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    6388:	f7fb fe3a 	bl	2000 <z_impl_k_thread_abort>

0000638c <extract_decimal>:
{
    638c:	4684      	mov	ip, r0
	const char *sp = *str;
    638e:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    6390:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    6392:	e005      	b.n	63a0 <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
    6394:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    6398:	3201      	adds	r2, #1
    639a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    639e:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    63a0:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    63a2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    63a6:	2909      	cmp	r1, #9
    63a8:	d9f4      	bls.n	6394 <extract_decimal+0x8>
	*str = sp;
    63aa:	f8cc 2000 	str.w	r2, [ip]
}
    63ae:	4770      	bx	lr

000063b0 <encode_uint>:
{
    63b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    63b4:	b083      	sub	sp, #12
    63b6:	4604      	mov	r4, r0
    63b8:	460d      	mov	r5, r1
    63ba:	9201      	str	r2, [sp, #4]
    63bc:	469a      	mov	sl, r3
    63be:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    63c0:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    63c2:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    63c6:	2b6f      	cmp	r3, #111	; 0x6f
    63c8:	d00f      	beq.n	63ea <encode_uint+0x3a>
    63ca:	d906      	bls.n	63da <encode_uint+0x2a>
    63cc:	2b70      	cmp	r3, #112	; 0x70
    63ce:	d00f      	beq.n	63f0 <encode_uint+0x40>
    63d0:	2b78      	cmp	r3, #120	; 0x78
    63d2:	d110      	bne.n	63f6 <encode_uint+0x46>
		return 16;
    63d4:	f04f 0910 	mov.w	r9, #16
    63d8:	e026      	b.n	6428 <encode_uint+0x78>
	switch (specifier) {
    63da:	2b58      	cmp	r3, #88	; 0x58
    63dc:	d002      	beq.n	63e4 <encode_uint+0x34>
    63de:	f04f 090a 	mov.w	r9, #10
    63e2:	e021      	b.n	6428 <encode_uint+0x78>
		return 16;
    63e4:	f04f 0910 	mov.w	r9, #16
    63e8:	e01e      	b.n	6428 <encode_uint+0x78>
		return 8;
    63ea:	f04f 0908 	mov.w	r9, #8
    63ee:	e01b      	b.n	6428 <encode_uint+0x78>
		return 16;
    63f0:	f04f 0910 	mov.w	r9, #16
    63f4:	e018      	b.n	6428 <encode_uint+0x78>
	switch (specifier) {
    63f6:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
    63fa:	e015      	b.n	6428 <encode_uint+0x78>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    63fc:	f1bb 0f19 	cmp.w	fp, #25
    6400:	d821      	bhi.n	6446 <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    6402:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6404:	3237      	adds	r2, #55	; 0x37
    6406:	b2d2      	uxtb	r2, r2
    6408:	f806 2d01 	strb.w	r2, [r6, #-1]!
		value /= radix;
    640c:	463a      	mov	r2, r7
    640e:	4643      	mov	r3, r8
    6410:	4620      	mov	r0, r4
    6412:	4629      	mov	r1, r5
    6414:	f7f9 fe74 	bl	100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    6418:	42bc      	cmp	r4, r7
    641a:	f175 0300 	sbcs.w	r3, r5, #0
    641e:	d316      	bcc.n	644e <encode_uint+0x9e>
    6420:	4556      	cmp	r6, sl
    6422:	d914      	bls.n	644e <encode_uint+0x9e>
		value /= radix;
    6424:	4604      	mov	r4, r0
    6426:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    6428:	f04f 0800 	mov.w	r8, #0
    642c:	464f      	mov	r7, r9
    642e:	464a      	mov	r2, r9
    6430:	4643      	mov	r3, r8
    6432:	4620      	mov	r0, r4
    6434:	4629      	mov	r1, r5
    6436:	f7f9 fe63 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    643a:	2a09      	cmp	r2, #9
    643c:	d8de      	bhi.n	63fc <encode_uint+0x4c>
    643e:	b2d2      	uxtb	r2, r2
    6440:	3230      	adds	r2, #48	; 0x30
    6442:	b2d2      	uxtb	r2, r2
    6444:	e7e0      	b.n	6408 <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    6446:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6448:	3257      	adds	r2, #87	; 0x57
    644a:	b2d2      	uxtb	r2, r2
    644c:	e7dc      	b.n	6408 <encode_uint+0x58>
	if (conv->flag_hash) {
    644e:	9b01      	ldr	r3, [sp, #4]
    6450:	781b      	ldrb	r3, [r3, #0]
    6452:	f013 0f20 	tst.w	r3, #32
    6456:	d005      	beq.n	6464 <encode_uint+0xb4>
		if (radix == 8) {
    6458:	f1b9 0f08 	cmp.w	r9, #8
    645c:	d006      	beq.n	646c <encode_uint+0xbc>
		} else if (radix == 16) {
    645e:	f1b9 0f10 	cmp.w	r9, #16
    6462:	d009      	beq.n	6478 <encode_uint+0xc8>
}
    6464:	4630      	mov	r0, r6
    6466:	b003      	add	sp, #12
    6468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    646c:	9a01      	ldr	r2, [sp, #4]
    646e:	7893      	ldrb	r3, [r2, #2]
    6470:	f043 0308 	orr.w	r3, r3, #8
    6474:	7093      	strb	r3, [r2, #2]
    6476:	e7f5      	b.n	6464 <encode_uint+0xb4>
			conv->altform_0c = true;
    6478:	9a01      	ldr	r2, [sp, #4]
    647a:	7893      	ldrb	r3, [r2, #2]
    647c:	f043 0310 	orr.w	r3, r3, #16
    6480:	7093      	strb	r3, [r2, #2]
    6482:	e7ef      	b.n	6464 <encode_uint+0xb4>

00006484 <outs>:
{
    6484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6488:	4607      	mov	r7, r0
    648a:	460e      	mov	r6, r1
    648c:	4614      	mov	r4, r2
    648e:	4698      	mov	r8, r3
	size_t count = 0;
    6490:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    6492:	e006      	b.n	64a2 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    6494:	4631      	mov	r1, r6
    6496:	f814 0b01 	ldrb.w	r0, [r4], #1
    649a:	47b8      	blx	r7
		if (rc < 0) {
    649c:	2800      	cmp	r0, #0
    649e:	db09      	blt.n	64b4 <outs+0x30>
		++count;
    64a0:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    64a2:	4544      	cmp	r4, r8
    64a4:	d3f6      	bcc.n	6494 <outs+0x10>
    64a6:	f1b8 0f00 	cmp.w	r8, #0
    64aa:	d102      	bne.n	64b2 <outs+0x2e>
    64ac:	7823      	ldrb	r3, [r4, #0]
    64ae:	2b00      	cmp	r3, #0
    64b0:	d1f0      	bne.n	6494 <outs+0x10>
	return (int)count;
    64b2:	4628      	mov	r0, r5
}
    64b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000064b8 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    64b8:	4770      	bx	lr

000064ba <abort_function>:
{
    64ba:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    64bc:	2000      	movs	r0, #0
    64be:	f7fb f825 	bl	150c <sys_reboot>

000064c2 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    64c2:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    64c4:	f001 f922 	bl	770c <z_fatal_error>
}
    64c8:	bd08      	pop	{r3, pc}

000064ca <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    64ca:	b508      	push	{r3, lr}
    64cc:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    64ce:	6800      	ldr	r0, [r0, #0]
    64d0:	f7ff fff7 	bl	64c2 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    64d4:	bd08      	pop	{r3, pc}

000064d6 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    64d6:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    64d8:	2100      	movs	r1, #0
    64da:	2001      	movs	r0, #1
    64dc:	f7ff fff1 	bl	64c2 <z_arm_fatal_error>
}
    64e0:	bd08      	pop	{r3, pc}

000064e2 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    64e2:	b508      	push	{r3, lr}
	handler();
    64e4:	f7fb fade 	bl	1aa4 <z_SysNmiOnReset>
	z_arm_int_exit();
    64e8:	f7fb fbd4 	bl	1c94 <z_arm_exc_exit>
}
    64ec:	bd08      	pop	{r3, pc}

000064ee <memory_fault_recoverable>:
}
    64ee:	2000      	movs	r0, #0
    64f0:	4770      	bx	lr

000064f2 <debug_monitor>:
	*recoverable = false;
    64f2:	2300      	movs	r3, #0
    64f4:	700b      	strb	r3, [r1, #0]
}
    64f6:	4770      	bx	lr

000064f8 <fault_handle>:
{
    64f8:	b508      	push	{r3, lr}
	*recoverable = false;
    64fa:	2300      	movs	r3, #0
    64fc:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    64fe:	1ecb      	subs	r3, r1, #3
    6500:	2b09      	cmp	r3, #9
    6502:	d81a      	bhi.n	653a <fault_handle+0x42>
    6504:	e8df f003 	tbb	[pc, r3]
    6508:	110d0905 	.word	0x110d0905
    650c:	19191919 	.word	0x19191919
    6510:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
    6512:	4611      	mov	r1, r2
    6514:	f7fb fc58 	bl	1dc8 <hard_fault>
		break;
    6518:	e010      	b.n	653c <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
    651a:	2100      	movs	r1, #0
    651c:	f7fb fc04 	bl	1d28 <mem_manage_fault>
		break;
    6520:	e00c      	b.n	653c <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
    6522:	2100      	movs	r1, #0
    6524:	f7fb fbc4 	bl	1cb0 <bus_fault>
		break;
    6528:	e008      	b.n	653c <fault_handle+0x44>
		reason = usage_fault(esf);
    652a:	f7fb fbeb 	bl	1d04 <usage_fault>
		break;
    652e:	e005      	b.n	653c <fault_handle+0x44>
		debug_monitor(esf, recoverable);
    6530:	4611      	mov	r1, r2
    6532:	f7ff ffde 	bl	64f2 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    6536:	2000      	movs	r0, #0
		break;
    6538:	e000      	b.n	653c <fault_handle+0x44>
	switch (fault) {
    653a:	2000      	movs	r0, #0
}
    653c:	bd08      	pop	{r3, pc}

0000653e <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    653e:	6843      	ldr	r3, [r0, #4]
    6540:	1e5a      	subs	r2, r3, #1
		&&
    6542:	4213      	tst	r3, r2
    6544:	d106      	bne.n	6554 <mpu_partition_is_valid+0x16>
		&&
    6546:	2b1f      	cmp	r3, #31
    6548:	d906      	bls.n	6558 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    654a:	6803      	ldr	r3, [r0, #0]
		&&
    654c:	421a      	tst	r2, r3
    654e:	d005      	beq.n	655c <mpu_partition_is_valid+0x1e>
    6550:	2000      	movs	r0, #0
    6552:	4770      	bx	lr
    6554:	2000      	movs	r0, #0
    6556:	4770      	bx	lr
    6558:	2000      	movs	r0, #0
    655a:	4770      	bx	lr
    655c:	2001      	movs	r0, #1
}
    655e:	4770      	bx	lr

00006560 <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
    6560:	2807      	cmp	r0, #7
    6562:	d805      	bhi.n	6570 <region_allocate_and_init+0x10>
{
    6564:	b510      	push	{r4, lr}
    6566:	4604      	mov	r4, r0
	region_init(index, region_conf);
    6568:	f7fb fd84 	bl	2074 <region_init>
	return index;
    656c:	4620      	mov	r0, r4
}
    656e:	bd10      	pop	{r4, pc}
		return -EINVAL;
    6570:	f06f 0015 	mvn.w	r0, #21
}
    6574:	4770      	bx	lr

00006576 <mpu_configure_region>:
{
    6576:	b500      	push	{lr}
    6578:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    657a:	680b      	ldr	r3, [r1, #0]
    657c:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    657e:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    6580:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    6582:	2b20      	cmp	r3, #32
    6584:	d912      	bls.n	65ac <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    6586:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    658a:	d811      	bhi.n	65b0 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    658c:	3b01      	subs	r3, #1
    658e:	fab3 f383 	clz	r3, r3
    6592:	f1c3 031f 	rsb	r3, r3, #31
    6596:	005b      	lsls	r3, r3, #1
    6598:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    659c:	4313      	orrs	r3, r2
    659e:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    65a0:	a901      	add	r1, sp, #4
    65a2:	f7ff ffdd 	bl	6560 <region_allocate_and_init>
}
    65a6:	b005      	add	sp, #20
    65a8:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    65ac:	2308      	movs	r3, #8
    65ae:	e7f5      	b.n	659c <mpu_configure_region+0x26>
		return REGION_4G;
    65b0:	233e      	movs	r3, #62	; 0x3e
    65b2:	e7f3      	b.n	659c <mpu_configure_region+0x26>

000065b4 <mpu_configure_regions>:
{
    65b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    65b8:	4680      	mov	r8, r0
    65ba:	460f      	mov	r7, r1
    65bc:	4699      	mov	r9, r3
	int reg_index = start_reg_index;
    65be:	4616      	mov	r6, r2
	for (i = 0; i < regions_num; i++) {
    65c0:	2500      	movs	r5, #0
    65c2:	e009      	b.n	65d8 <mpu_configure_regions+0x24>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    65c4:	4621      	mov	r1, r4
    65c6:	b2f0      	uxtb	r0, r6
    65c8:	f7ff ffd5 	bl	6576 <mpu_configure_region>
    65cc:	4606      	mov	r6, r0
		if (reg_index == -EINVAL) {
    65ce:	f110 0f16 	cmn.w	r0, #22
    65d2:	d014      	beq.n	65fe <mpu_configure_regions+0x4a>
		reg_index++;
    65d4:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    65d6:	3501      	adds	r5, #1
    65d8:	42bd      	cmp	r5, r7
    65da:	da10      	bge.n	65fe <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
    65dc:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    65e0:	eb08 0484 	add.w	r4, r8, r4, lsl #2
    65e4:	6862      	ldr	r2, [r4, #4]
    65e6:	2a00      	cmp	r2, #0
    65e8:	d0f5      	beq.n	65d6 <mpu_configure_regions+0x22>
		if (do_sanity_check &&
    65ea:	f1b9 0f00 	cmp.w	r9, #0
    65ee:	d0e9      	beq.n	65c4 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
    65f0:	4620      	mov	r0, r4
    65f2:	f7ff ffa4 	bl	653e <mpu_partition_is_valid>
		if (do_sanity_check &&
    65f6:	2800      	cmp	r0, #0
    65f8:	d1e4      	bne.n	65c4 <mpu_configure_regions+0x10>
			return -EINVAL;
    65fa:	f06f 0615 	mvn.w	r6, #21
}
    65fe:	4630      	mov	r0, r6
    6600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00006604 <arm_core_mpu_configure_static_mpu_regions>:
{
    6604:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    6606:	f7fb fd49 	bl	209c <mpu_configure_static_mpu_regions>
}
    660a:	bd08      	pop	{r3, pc}

0000660c <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    660c:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    660e:	f7fb fd4f 	bl	20b0 <mpu_configure_dynamic_mpu_regions>
}
    6612:	bd08      	pop	{r3, pc}

00006614 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    6614:	4602      	mov	r2, r0
    6616:	e002      	b.n	661e <strcpy+0xa>
		*d = *s;
    6618:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
    661c:	3101      	adds	r1, #1
	while (*s != '\0') {
    661e:	780b      	ldrb	r3, [r1, #0]
    6620:	2b00      	cmp	r3, #0
    6622:	d1f9      	bne.n	6618 <strcpy+0x4>
	}

	*d = '\0';
    6624:	7013      	strb	r3, [r2, #0]

	return dest;
}
    6626:	4770      	bx	lr

00006628 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    6628:	4603      	mov	r3, r0
    662a:	b1a2      	cbz	r2, 6656 <strncpy+0x2e>
{
    662c:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    662e:	780c      	ldrb	r4, [r1, #0]
    6630:	b12c      	cbz	r4, 663e <strncpy+0x16>
		*d = *s;
    6632:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    6636:	3101      	adds	r1, #1
		d++;
		n--;
    6638:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    663a:	2a00      	cmp	r2, #0
    663c:	d1f7      	bne.n	662e <strncpy+0x6>
	}

	while (n > 0) {
    663e:	b122      	cbz	r2, 664a <strncpy+0x22>
		*d = '\0';
    6640:	2100      	movs	r1, #0
    6642:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    6646:	3a01      	subs	r2, #1
    6648:	e7f9      	b.n	663e <strncpy+0x16>
	}

	return dest;
}
    664a:	bc10      	pop	{r4}
    664c:	4770      	bx	lr
		*d = '\0';
    664e:	2100      	movs	r1, #0
    6650:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    6654:	3a01      	subs	r2, #1
	while (n > 0) {
    6656:	2a00      	cmp	r2, #0
    6658:	d1f9      	bne.n	664e <strncpy+0x26>
    665a:	4770      	bx	lr

0000665c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    665c:	4603      	mov	r3, r0
	size_t n = 0;
    665e:	2000      	movs	r0, #0

	while (*s != '\0') {
    6660:	e001      	b.n	6666 <strlen+0xa>
		s++;
    6662:	3301      	adds	r3, #1
		n++;
    6664:	3001      	adds	r0, #1
	while (*s != '\0') {
    6666:	781a      	ldrb	r2, [r3, #0]
    6668:	2a00      	cmp	r2, #0
    666a:	d1fa      	bne.n	6662 <strlen+0x6>
	}

	return n;
}
    666c:	4770      	bx	lr

0000666e <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    666e:	4603      	mov	r3, r0
	size_t n = 0;
    6670:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    6672:	e001      	b.n	6678 <strnlen+0xa>
		s++;
    6674:	3301      	adds	r3, #1
		n++;
    6676:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
    6678:	781a      	ldrb	r2, [r3, #0]
    667a:	b10a      	cbz	r2, 6680 <strnlen+0x12>
    667c:	4288      	cmp	r0, r1
    667e:	d3f9      	bcc.n	6674 <strnlen+0x6>
	}

	return n;
}
    6680:	4770      	bx	lr

00006682 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    6682:	e001      	b.n	6688 <strcmp+0x6>
		s1++;
    6684:	3001      	adds	r0, #1
		s2++;
    6686:	3101      	adds	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    6688:	7803      	ldrb	r3, [r0, #0]
    668a:	780a      	ldrb	r2, [r1, #0]
    668c:	4293      	cmp	r3, r2
    668e:	d101      	bne.n	6694 <strcmp+0x12>
    6690:	2b00      	cmp	r3, #0
    6692:	d1f7      	bne.n	6684 <strcmp+0x2>
	}

	return *s1 - *s2;
}
    6694:	1a98      	subs	r0, r3, r2
    6696:	4770      	bx	lr

00006698 <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    6698:	ea80 0301 	eor.w	r3, r0, r1
    669c:	f013 0f03 	tst.w	r3, #3
    66a0:	d001      	beq.n	66a6 <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
    66a2:	4603      	mov	r3, r0
    66a4:	e023      	b.n	66ee <memcpy+0x56>
    66a6:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    66a8:	f013 0f03 	tst.w	r3, #3
    66ac:	d00f      	beq.n	66ce <memcpy+0x36>
			if (n == 0) {
    66ae:	b30a      	cbz	r2, 66f4 <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    66b0:	f811 cb01 	ldrb.w	ip, [r1], #1
    66b4:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
    66b8:	3a01      	subs	r2, #1
    66ba:	e7f5      	b.n	66a8 <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    66bc:	f811 cb01 	ldrb.w	ip, [r1], #1
    66c0:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    66c4:	3a01      	subs	r2, #1
	while (n > 0) {
    66c6:	2a00      	cmp	r2, #0
    66c8:	d1f8      	bne.n	66bc <memcpy+0x24>
	}

	return d;
}
    66ca:	bc10      	pop	{r4}
    66cc:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
    66ce:	2a03      	cmp	r2, #3
    66d0:	d90d      	bls.n	66ee <memcpy+0x56>
{
    66d2:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
    66d4:	f851 4b04 	ldr.w	r4, [r1], #4
    66d8:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    66dc:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    66de:	2a03      	cmp	r2, #3
    66e0:	d8f8      	bhi.n	66d4 <memcpy+0x3c>
    66e2:	e7f0      	b.n	66c6 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    66e4:	f811 cb01 	ldrb.w	ip, [r1], #1
    66e8:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    66ec:	3a01      	subs	r2, #1
	while (n > 0) {
    66ee:	2a00      	cmp	r2, #0
    66f0:	d1f8      	bne.n	66e4 <memcpy+0x4c>
    66f2:	4770      	bx	lr
}
    66f4:	4770      	bx	lr

000066f6 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    66f6:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
    66fa:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    66fc:	e002      	b.n	6704 <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
    66fe:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    6702:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    6704:	f013 0f03 	tst.w	r3, #3
    6708:	d002      	beq.n	6710 <memset+0x1a>
		if (n == 0) {
    670a:	2a00      	cmp	r2, #0
    670c:	d1f7      	bne.n	66fe <memset+0x8>
    670e:	e00f      	b.n	6730 <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    6710:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    6712:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    6716:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    671a:	2a03      	cmp	r2, #3
    671c:	d906      	bls.n	672c <memset+0x36>
		*(d_word++) = c_word;
    671e:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    6722:	3a04      	subs	r2, #4
    6724:	e7f9      	b.n	671a <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    6726:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    672a:	3a01      	subs	r2, #1
	while (n > 0) {
    672c:	2a00      	cmp	r2, #0
    672e:	d1fa      	bne.n	6726 <memset+0x30>
	}

	return buf;
}
    6730:	4770      	bx	lr

00006732 <_stdout_hook_default>:
}
    6732:	f04f 30ff 	mov.w	r0, #4294967295
    6736:	4770      	bx	lr

00006738 <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6738:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    673c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    6740:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    6744:	2a08      	cmp	r2, #8
    6746:	d001      	beq.n	674c <nrf52_errata_197+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    6748:	2000      	movs	r0, #0
    674a:	4770      	bx	lr
                switch(var2)
    674c:	2b02      	cmp	r3, #2
    674e:	d001      	beq.n	6754 <nrf52_errata_197+0x1c>
                        return false;
    6750:	2000      	movs	r0, #0
    6752:	4770      	bx	lr
                        return true;
    6754:	2001      	movs	r0, #1
    #endif
}
    6756:	4770      	bx	lr

00006758 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    6758:	2806      	cmp	r0, #6
    675a:	d000      	beq.n	675e <pm_state_set+0x6>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    675c:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    675e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6762:	2201      	movs	r2, #1
    6764:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    6768:	f3bf 8f4f 	dsb	sy
        __WFE();
    676c:	bf20      	wfe
    while (true)
    676e:	e7fd      	b.n	676c <pm_state_set+0x14>

00006770 <pm_state_exit_post_ops>:
    6770:	2300      	movs	r3, #0
    6772:	f383 8811 	msr	BASEPRI, r3
    6776:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    677a:	4770      	bx	lr

0000677c <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    677c:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    677e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    6782:	0089      	lsls	r1, r1, #2
    6784:	3138      	adds	r1, #56	; 0x38
}
    6786:	4408      	add	r0, r1
    6788:	4770      	bx	lr

0000678a <get_sub_config>:
	const struct nrf_clock_control_config *config =
    678a:	6840      	ldr	r0, [r0, #4]
}
    678c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    6790:	4770      	bx	lr

00006792 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    6792:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
    6794:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
    6798:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    679c:	4770      	bx	lr

0000679e <get_status>:
{
    679e:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    67a0:	b2c9      	uxtb	r1, r1
    67a2:	f7ff ffeb 	bl	677c <get_sub_data>
    67a6:	6880      	ldr	r0, [r0, #8]
}
    67a8:	f000 0007 	and.w	r0, r0, #7
    67ac:	bd08      	pop	{r3, pc}

000067ae <set_off_state>:
	__asm__ volatile(
    67ae:	f04f 0320 	mov.w	r3, #32
    67b2:	f3ef 8211 	mrs	r2, BASEPRI
    67b6:	f383 8812 	msr	BASEPRI_MAX, r3
    67ba:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    67be:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    67c0:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    67c4:	d001      	beq.n	67ca <set_off_state+0x1c>
    67c6:	428b      	cmp	r3, r1
    67c8:	d107      	bne.n	67da <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    67ca:	2301      	movs	r3, #1
    67cc:	6003      	str	r3, [r0, #0]
	int err = 0;
    67ce:	2000      	movs	r0, #0
	__asm__ volatile(
    67d0:	f382 8811 	msr	BASEPRI, r2
    67d4:	f3bf 8f6f 	isb	sy
}
    67d8:	4770      	bx	lr
		err = -EPERM;
    67da:	f04f 30ff 	mov.w	r0, #4294967295
    67de:	e7f7      	b.n	67d0 <set_off_state+0x22>

000067e0 <set_starting_state>:
	__asm__ volatile(
    67e0:	f04f 0320 	mov.w	r3, #32
    67e4:	f3ef 8211 	mrs	r2, BASEPRI
    67e8:	f383 8812 	msr	BASEPRI_MAX, r3
    67ec:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    67f0:	6803      	ldr	r3, [r0, #0]
    67f2:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    67f6:	f003 0307 	and.w	r3, r3, #7
    67fa:	2b01      	cmp	r3, #1
    67fc:	d008      	beq.n	6810 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    67fe:	458c      	cmp	ip, r1
    6800:	d009      	beq.n	6816 <set_starting_state+0x36>
		err = -EPERM;
    6802:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
    6806:	f382 8811 	msr	BASEPRI, r2
    680a:	f3bf 8f6f 	isb	sy
}
    680e:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    6810:	6001      	str	r1, [r0, #0]
	int err = 0;
    6812:	2000      	movs	r0, #0
    6814:	e7f7      	b.n	6806 <set_starting_state+0x26>
		err = -EALREADY;
    6816:	f06f 0077 	mvn.w	r0, #119	; 0x77
    681a:	e7f4      	b.n	6806 <set_starting_state+0x26>

0000681c <set_on_state>:
	__asm__ volatile(
    681c:	f04f 0320 	mov.w	r3, #32
    6820:	f3ef 8211 	mrs	r2, BASEPRI
    6824:	f383 8812 	msr	BASEPRI_MAX, r3
    6828:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    682c:	6803      	ldr	r3, [r0, #0]
    682e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    6832:	f043 0302 	orr.w	r3, r3, #2
    6836:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    6838:	f382 8811 	msr	BASEPRI, r2
    683c:	f3bf 8f6f 	isb	sy
}
    6840:	4770      	bx	lr

00006842 <clkstarted_handle>:
{
    6842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6844:	4606      	mov	r6, r0
    6846:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    6848:	f7ff ff98 	bl	677c <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    684c:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    684e:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    6850:	2300      	movs	r3, #0
    6852:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    6856:	f7ff ffe1 	bl	681c <set_on_state>
	if (callback) {
    685a:	b11d      	cbz	r5, 6864 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    685c:	463a      	mov	r2, r7
    685e:	4621      	mov	r1, r4
    6860:	4630      	mov	r0, r6
    6862:	47a8      	blx	r5
}
    6864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006866 <stop>:
{
    6866:	b570      	push	{r4, r5, r6, lr}
    6868:	4606      	mov	r6, r0
    686a:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    686c:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    686e:	4621      	mov	r1, r4
    6870:	f7ff ff84 	bl	677c <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    6874:	4629      	mov	r1, r5
    6876:	3008      	adds	r0, #8
    6878:	f7ff ff99 	bl	67ae <set_off_state>
	if (err < 0) {
    687c:	2800      	cmp	r0, #0
    687e:	db06      	blt.n	688e <stop+0x28>
	get_sub_config(dev, type)->stop();
    6880:	4621      	mov	r1, r4
    6882:	4630      	mov	r0, r6
    6884:	f7ff ff81 	bl	678a <get_sub_config>
    6888:	6843      	ldr	r3, [r0, #4]
    688a:	4798      	blx	r3
	return 0;
    688c:	2000      	movs	r0, #0
}
    688e:	bd70      	pop	{r4, r5, r6, pc}

00006890 <api_stop>:
{
    6890:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    6892:	2280      	movs	r2, #128	; 0x80
    6894:	f7ff ffe7 	bl	6866 <stop>
}
    6898:	bd08      	pop	{r3, pc}

0000689a <async_start>:
{
    689a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    689e:	4606      	mov	r6, r0
    68a0:	4690      	mov	r8, r2
    68a2:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    68a4:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    68a6:	4629      	mov	r1, r5
    68a8:	f7ff ff68 	bl	677c <get_sub_data>
    68ac:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    68ae:	9906      	ldr	r1, [sp, #24]
    68b0:	3008      	adds	r0, #8
    68b2:	f7ff ff95 	bl	67e0 <set_starting_state>
	if (err < 0) {
    68b6:	2800      	cmp	r0, #0
    68b8:	db09      	blt.n	68ce <async_start+0x34>
	subdata->cb = cb;
    68ba:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    68be:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    68c0:	4629      	mov	r1, r5
    68c2:	4630      	mov	r0, r6
    68c4:	f7ff ff61 	bl	678a <get_sub_config>
    68c8:	6803      	ldr	r3, [r0, #0]
    68ca:	4798      	blx	r3
	return 0;
    68cc:	2000      	movs	r0, #0
}
    68ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000068d2 <api_start>:
{
    68d2:	b510      	push	{r4, lr}
    68d4:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    68d6:	2480      	movs	r4, #128	; 0x80
    68d8:	9400      	str	r4, [sp, #0]
    68da:	f7ff ffde 	bl	689a <async_start>
}
    68de:	b002      	add	sp, #8
    68e0:	bd10      	pop	{r4, pc}

000068e2 <onoff_started_callback>:
{
    68e2:	b510      	push	{r4, lr}
    68e4:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    68e6:	b2c9      	uxtb	r1, r1
    68e8:	f7ff ff53 	bl	6792 <get_onoff_manager>
	notify(mgr, 0);
    68ec:	2100      	movs	r1, #0
    68ee:	47a0      	blx	r4
}
    68f0:	bd10      	pop	{r4, pc}

000068f2 <hfclk_start>:
{
    68f2:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    68f4:	2001      	movs	r0, #1
    68f6:	f000 fdd5 	bl	74a4 <nrfx_clock_start>
}
    68fa:	bd08      	pop	{r3, pc}

000068fc <lfclk_start>:
{
    68fc:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    68fe:	2000      	movs	r0, #0
    6900:	f000 fdd0 	bl	74a4 <nrfx_clock_start>
}
    6904:	bd08      	pop	{r3, pc}

00006906 <hfclk_stop>:
{
    6906:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    6908:	2001      	movs	r0, #1
    690a:	f000 fe1b 	bl	7544 <nrfx_clock_stop>
}
    690e:	bd08      	pop	{r3, pc}

00006910 <lfclk_stop>:
{
    6910:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6912:	2000      	movs	r0, #0
    6914:	f000 fe16 	bl	7544 <nrfx_clock_stop>
}
    6918:	bd08      	pop	{r3, pc}

0000691a <blocking_start_callback>:
{
    691a:	b508      	push	{r3, lr}
    691c:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    691e:	f7fe f9bd 	bl	4c9c <z_impl_k_sem_give>
}
    6922:	bd08      	pop	{r3, pc}

00006924 <wait>:
{
    6924:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
    6926:	f000 ff76 	bl	7816 <k_is_in_isr>
    692a:	b100      	cbz	r0, 692e <wait+0xa>
}
    692c:	bd08      	pop	{r3, pc}
	return z_impl_k_sleep(timeout);
    692e:	2042      	movs	r0, #66	; 0x42
    6930:	2100      	movs	r1, #0
    6932:	f7fe fdad 	bl	5490 <z_impl_k_sleep>
    6936:	e7f9      	b.n	692c <wait+0x8>

00006938 <get_drive>:
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    6938:	f420 70fc 	bic.w	r0, r0, #504	; 0x1f8
    693c:	f020 0001 	bic.w	r0, r0, #1
    6940:	0540      	lsls	r0, r0, #21
    6942:	0d40      	lsrs	r0, r0, #21
    6944:	f240 2306 	movw	r3, #518	; 0x206
    6948:	4298      	cmp	r0, r3
    694a:	d033      	beq.n	69b4 <get_drive+0x7c>
    694c:	d816      	bhi.n	697c <get_drive+0x44>
    694e:	2806      	cmp	r0, #6
    6950:	d02c      	beq.n	69ac <get_drive+0x74>
    6952:	d906      	bls.n	6962 <get_drive+0x2a>
    6954:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    6958:	d10d      	bne.n	6976 <get_drive+0x3e>
		*drive = NRF_GPIO_PIN_H0S1;
    695a:	2301      	movs	r3, #1
    695c:	700b      	strb	r3, [r1, #0]
	int err = 0;
    695e:	2000      	movs	r0, #0
		break;
    6960:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    6962:	b300      	cbz	r0, 69a6 <get_drive+0x6e>
    6964:	2802      	cmp	r0, #2
    6966:	d103      	bne.n	6970 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_D0S1;
    6968:	2304      	movs	r3, #4
    696a:	700b      	strb	r3, [r1, #0]
	int err = 0;
    696c:	2000      	movs	r0, #0
		break;
    696e:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    6970:	f06f 0015 	mvn.w	r0, #21
    6974:	4770      	bx	lr
    6976:	f06f 0015 	mvn.w	r0, #21
    697a:	4770      	bx	lr
    697c:	f240 4302 	movw	r3, #1026	; 0x402
    6980:	4298      	cmp	r0, r3
    6982:	d01b      	beq.n	69bc <get_drive+0x84>
    6984:	f5b0 6fc0 	cmp.w	r0, #1536	; 0x600
    6988:	d103      	bne.n	6992 <get_drive+0x5a>
		*drive = NRF_GPIO_PIN_H0H1;
    698a:	2303      	movs	r3, #3
    698c:	700b      	strb	r3, [r1, #0]
	int err = 0;
    698e:	2000      	movs	r0, #0
		break;
    6990:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    6992:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    6996:	d103      	bne.n	69a0 <get_drive+0x68>
		*drive = NRF_GPIO_PIN_S0H1;
    6998:	2302      	movs	r3, #2
    699a:	700b      	strb	r3, [r1, #0]
	int err = 0;
    699c:	2000      	movs	r0, #0
		break;
    699e:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    69a0:	f06f 0015 	mvn.w	r0, #21
    69a4:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    69a6:	2000      	movs	r0, #0
    69a8:	7008      	strb	r0, [r1, #0]
		break;
    69aa:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    69ac:	2306      	movs	r3, #6
    69ae:	700b      	strb	r3, [r1, #0]
	int err = 0;
    69b0:	2000      	movs	r0, #0
		break;
    69b2:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    69b4:	2307      	movs	r3, #7
    69b6:	700b      	strb	r3, [r1, #0]
	int err = 0;
    69b8:	2000      	movs	r0, #0
		break;
    69ba:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    69bc:	2305      	movs	r3, #5
    69be:	700b      	strb	r3, [r1, #0]
	int err = 0;
    69c0:	2000      	movs	r0, #0
}
    69c2:	4770      	bx	lr

000069c4 <get_pull>:
	if (flags & GPIO_PULL_UP) {
    69c4:	f010 0f10 	tst.w	r0, #16
    69c8:	d104      	bne.n	69d4 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    69ca:	f010 0f20 	tst.w	r0, #32
    69ce:	d103      	bne.n	69d8 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    69d0:	2000      	movs	r0, #0
    69d2:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    69d4:	2003      	movs	r0, #3
    69d6:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    69d8:	2001      	movs	r0, #1
}
    69da:	4770      	bx	lr

000069dc <gpio_nrfx_port_get_raw>:
	return port->config;
    69dc:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    69de:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    69e0:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    69e4:	600b      	str	r3, [r1, #0]
}
    69e6:	2000      	movs	r0, #0
    69e8:	4770      	bx	lr

000069ea <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    69ea:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    69ec:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    69ee:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    69f2:	4042      	eors	r2, r0
    69f4:	400a      	ands	r2, r1
    69f6:	4042      	eors	r2, r0
    p_reg->OUT = value;
    69f8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    69fc:	2000      	movs	r0, #0
    69fe:	4770      	bx	lr

00006a00 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    6a00:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6a02:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    6a04:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    6a08:	2000      	movs	r0, #0
    6a0a:	4770      	bx	lr

00006a0c <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    6a0c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6a0e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    6a10:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    6a14:	2000      	movs	r0, #0
    6a16:	4770      	bx	lr

00006a18 <gpio_nrfx_port_toggle_bits>:
	return port->config;
    6a18:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6a1a:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    6a1c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    6a20:	404b      	eors	r3, r1
    p_reg->OUT = value;
    6a22:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    6a26:	2000      	movs	r0, #0
    6a28:	4770      	bx	lr

00006a2a <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    6a2a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    6a2e:	d007      	beq.n	6a40 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    6a30:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    6a34:	d00d      	beq.n	6a52 <get_trigger+0x28>
    6a36:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    6a3a:	d008      	beq.n	6a4e <get_trigger+0x24>
    6a3c:	2001      	movs	r0, #1
}
    6a3e:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    6a40:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    6a44:	d001      	beq.n	6a4a <get_trigger+0x20>
    6a46:	2005      	movs	r0, #5
    6a48:	4770      	bx	lr
    6a4a:	2004      	movs	r0, #4
    6a4c:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    6a4e:	2002      	movs	r0, #2
    6a50:	4770      	bx	lr
    6a52:	2003      	movs	r0, #3
    6a54:	4770      	bx	lr

00006a56 <gpio_nrfx_manage_callback>:
{
    6a56:	b410      	push	{r4}
	return port->data;
    6a58:	6904      	ldr	r4, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    6a5a:	f104 0c04 	add.w	ip, r4, #4
	return list->head;
    6a5e:	6863      	ldr	r3, [r4, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    6a60:	b1fb      	cbz	r3, 6aa2 <gpio_nrfx_manage_callback+0x4c>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6a62:	2000      	movs	r0, #0
    6a64:	e00d      	b.n	6a82 <gpio_nrfx_manage_callback+0x2c>
	return node->next;
    6a66:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    6a68:	6063      	str	r3, [r4, #4]
	return list->tail;
    6a6a:	f8dc 0004 	ldr.w	r0, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
    6a6e:	4281      	cmp	r1, r0
    6a70:	d112      	bne.n	6a98 <gpio_nrfx_manage_callback+0x42>
	list->tail = node;
    6a72:	f8cc 3004 	str.w	r3, [ip, #4]
}
    6a76:	e00f      	b.n	6a98 <gpio_nrfx_manage_callback+0x42>
	list->tail = node;
    6a78:	f8cc 0004 	str.w	r0, [ip, #4]
}
    6a7c:	e00c      	b.n	6a98 <gpio_nrfx_manage_callback+0x42>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6a7e:	4618      	mov	r0, r3
    6a80:	681b      	ldr	r3, [r3, #0]
    6a82:	b163      	cbz	r3, 6a9e <gpio_nrfx_manage_callback+0x48>
    6a84:	4299      	cmp	r1, r3
    6a86:	d1fa      	bne.n	6a7e <gpio_nrfx_manage_callback+0x28>
Z_GENLIST_REMOVE(slist, snode)
    6a88:	2800      	cmp	r0, #0
    6a8a:	d0ec      	beq.n	6a66 <gpio_nrfx_manage_callback+0x10>
	return node->next;
    6a8c:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
    6a8e:	6003      	str	r3, [r0, #0]
	return list->tail;
    6a90:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
    6a94:	4299      	cmp	r1, r3
    6a96:	d0ef      	beq.n	6a78 <gpio_nrfx_manage_callback+0x22>
	parent->next = child;
    6a98:	2300      	movs	r3, #0
    6a9a:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6a9c:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    6a9e:	b903      	cbnz	r3, 6aa2 <gpio_nrfx_manage_callback+0x4c>
			if (!set) {
    6aa0:	b162      	cbz	r2, 6abc <gpio_nrfx_manage_callback+0x66>
				return -EINVAL;
			}
		}
	}

	if (set) {
    6aa2:	b172      	cbz	r2, 6ac2 <gpio_nrfx_manage_callback+0x6c>
	return list->head;
    6aa4:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
    6aa6:	600b      	str	r3, [r1, #0]
	list->head = node;
    6aa8:	6061      	str	r1, [r4, #4]
	return list->tail;
    6aaa:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_PREPEND(slist, snode)
    6aae:	b10b      	cbz	r3, 6ab4 <gpio_nrfx_manage_callback+0x5e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    6ab0:	2000      	movs	r0, #0
    6ab2:	e007      	b.n	6ac4 <gpio_nrfx_manage_callback+0x6e>
	list->tail = node;
    6ab4:	f8cc 1004 	str.w	r1, [ip, #4]
    6ab8:	2000      	movs	r0, #0
}
    6aba:	e003      	b.n	6ac4 <gpio_nrfx_manage_callback+0x6e>
				return -EINVAL;
    6abc:	f06f 0015 	mvn.w	r0, #21
    6ac0:	e000      	b.n	6ac4 <gpio_nrfx_manage_callback+0x6e>
	return 0;
    6ac2:	2000      	movs	r0, #0
}
    6ac4:	bc10      	pop	{r4}
    6ac6:	4770      	bx	lr

00006ac8 <nrfx_gpio_handler>:
{
    6ac8:	b570      	push	{r4, r5, r6, lr}
    *p_pin = pin_number & 0x1F;
    6aca:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
    6ace:	0940      	lsrs	r0, r0, #5
    6ad0:	f7fb fd4c 	bl	256c <get_dev>
	if (port == NULL) {
    6ad4:	b1d8      	cbz	r0, 6b0e <nrfx_gpio_handler+0x46>
    6ad6:	4606      	mov	r6, r0
	return port->data;
    6ad8:	6903      	ldr	r3, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
    6ada:	2501      	movs	r5, #1
    6adc:	40a5      	lsls	r5, r4
	return list->head;
    6ade:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    6ae0:	b119      	cbz	r1, 6aea <nrfx_gpio_handler+0x22>
    6ae2:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    6ae4:	b149      	cbz	r1, 6afa <nrfx_gpio_handler+0x32>
	return node->next;
    6ae6:	680c      	ldr	r4, [r1, #0]
    6ae8:	e007      	b.n	6afa <nrfx_gpio_handler+0x32>
    6aea:	460c      	mov	r4, r1
    6aec:	e005      	b.n	6afa <nrfx_gpio_handler+0x32>
    6aee:	b164      	cbz	r4, 6b0a <nrfx_gpio_handler+0x42>
    6af0:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    6af2:	b104      	cbz	r4, 6af6 <nrfx_gpio_handler+0x2e>
	return node->next;
    6af4:	6823      	ldr	r3, [r4, #0]
    6af6:	4621      	mov	r1, r4
    6af8:	461c      	mov	r4, r3
    6afa:	b141      	cbz	r1, 6b0e <nrfx_gpio_handler+0x46>
		if (cb->pin_mask & pins) {
    6afc:	688a      	ldr	r2, [r1, #8]
    6afe:	402a      	ands	r2, r5
    6b00:	d0f5      	beq.n	6aee <nrfx_gpio_handler+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    6b02:	684b      	ldr	r3, [r1, #4]
    6b04:	4630      	mov	r0, r6
    6b06:	4798      	blx	r3
    6b08:	e7f1      	b.n	6aee <nrfx_gpio_handler+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    6b0a:	4623      	mov	r3, r4
    6b0c:	e7f3      	b.n	6af6 <nrfx_gpio_handler+0x2e>
}
    6b0e:	bd70      	pop	{r4, r5, r6, pc}

00006b10 <spi_nrfx_release>:
}
#endif /* CONFIG_SPI_ASYNC */

static int spi_nrfx_release(const struct device *dev,
			    const struct spi_config *spi_cfg)
{
    6b10:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    6b12:	6904      	ldr	r4, [r0, #16]
	return !!(ctx->config == config);
    6b14:	6823      	ldr	r3, [r4, #0]

	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    6b16:	428b      	cmp	r3, r1
    6b18:	d131      	bne.n	6b7e <spi_nrfx_release+0x6e>
		return -EINVAL;
	}

	if (dev_data->busy) {
    6b1a:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    6b1e:	2b00      	cmp	r3, #0
    6b20:	d130      	bne.n	6b84 <spi_nrfx_release+0x74>
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    6b22:	6823      	ldr	r3, [r4, #0]
    6b24:	b1c3      	cbz	r3, 6b58 <spi_nrfx_release+0x48>
    6b26:	689b      	ldr	r3, [r3, #8]
    6b28:	b1b3      	cbz	r3, 6b58 <spi_nrfx_release+0x48>
    6b2a:	681a      	ldr	r2, [r3, #0]
    6b2c:	b1a2      	cbz	r2, 6b58 <spi_nrfx_release+0x48>
			k_busy_wait(ctx->config->cs->delay);
    6b2e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
    6b30:	f001 f825 	bl	7b7e <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    6b34:	6823      	ldr	r3, [r4, #0]
    6b36:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
    6b38:	6818      	ldr	r0, [r3, #0]
    6b3a:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
    6b3c:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    6b3e:	681a      	ldr	r2, [r3, #0]
    6b40:	2301      	movs	r3, #1
    6b42:	408b      	lsls	r3, r1
    6b44:	421a      	tst	r2, r3
    6b46:	d10b      	bne.n	6b60 <spi_nrfx_release+0x50>
    6b48:	2300      	movs	r3, #0
	if (value != 0)	{
    6b4a:	b15b      	cbz	r3, 6b64 <spi_nrfx_release+0x54>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
    6b4c:	2301      	movs	r3, #1
    6b4e:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
    6b52:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    6b54:	68db      	ldr	r3, [r3, #12]
    6b56:	4798      	blx	r3
	return sem->count;
    6b58:	69a3      	ldr	r3, [r4, #24]
	if (!k_sem_count_get(&ctx->lock)) {
    6b5a:	b153      	cbz	r3, 6b72 <spi_nrfx_release+0x62>
		return -EBUSY;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);

	return 0;
    6b5c:	2000      	movs	r0, #0
}
    6b5e:	bd10      	pop	{r4, pc}
		value = (value != 0) ? 0 : 1;
    6b60:	2301      	movs	r3, #1
    6b62:	e7f2      	b.n	6b4a <spi_nrfx_release+0x3a>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
    6b64:	2301      	movs	r3, #1
    6b66:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
    6b6a:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    6b6c:	691b      	ldr	r3, [r3, #16]
    6b6e:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
    6b70:	e7f2      	b.n	6b58 <spi_nrfx_release+0x48>
		ctx->owner = NULL;
    6b72:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
    6b74:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
    6b78:	f7fe f890 	bl	4c9c <z_impl_k_sem_give>
}
    6b7c:	e7ee      	b.n	6b5c <spi_nrfx_release+0x4c>
		return -EINVAL;
    6b7e:	f06f 0015 	mvn.w	r0, #21
    6b82:	e7ec      	b.n	6b5e <spi_nrfx_release+0x4e>
		return -EBUSY;
    6b84:	f06f 000f 	mvn.w	r0, #15
    6b88:	e7e9      	b.n	6b5e <spi_nrfx_release+0x4e>

00006b8a <transceive>:
{
    6b8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6b8e:	4606      	mov	r6, r0
    6b90:	460d      	mov	r5, r1
    6b92:	4690      	mov	r8, r2
    6b94:	461f      	mov	r7, r3
	struct spi_nrfx_data *dev_data = dev->data;
    6b96:	6904      	ldr	r4, [r0, #16]
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    6b98:	888b      	ldrh	r3, [r1, #4]
    6b9a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    6b9e:	d004      	beq.n	6baa <transceive+0x20>
    6ba0:	69a3      	ldr	r3, [r4, #24]
    6ba2:	b913      	cbnz	r3, 6baa <transceive+0x20>
		(ctx->owner == spi_cfg)) {
    6ba4:	6863      	ldr	r3, [r4, #4]
		(k_sem_count_get(&ctx->lock) == 0) &&
    6ba6:	4299      	cmp	r1, r3
    6ba8:	d008      	beq.n	6bbc <transceive+0x32>
	k_sem_take(&ctx->lock, K_FOREVER);
    6baa:	f104 0010 	add.w	r0, r4, #16
	return z_impl_k_sem_take(sem, timeout);
    6bae:	f04f 32ff 	mov.w	r2, #4294967295
    6bb2:	f04f 33ff 	mov.w	r3, #4294967295
    6bb6:	f7fe f895 	bl	4ce4 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    6bba:	6065      	str	r5, [r4, #4]
	error = configure(dev, spi_cfg);
    6bbc:	4629      	mov	r1, r5
    6bbe:	4630      	mov	r0, r6
    6bc0:	f7fb fe0a 	bl	27d8 <configure>
	if (error == 0) {
    6bc4:	4605      	mov	r5, r0
    6bc6:	b140      	cbz	r0, 6bda <transceive+0x50>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    6bc8:	6823      	ldr	r3, [r4, #0]
    6bca:	889b      	ldrh	r3, [r3, #4]
    6bcc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    6bd0:	f000 8097 	beq.w	6d02 <transceive+0x178>
}
    6bd4:	4628      	mov	r0, r5
    6bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dev_data->busy = true;
    6bda:	2301      	movs	r3, #1
    6bdc:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    6be0:	f1b8 0f00 	cmp.w	r8, #0
    6be4:	d015      	beq.n	6c12 <transceive+0x88>
    6be6:	f8d8 3000 	ldr.w	r3, [r8]
    6bea:	6363      	str	r3, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    6bec:	b19b      	cbz	r3, 6c16 <transceive+0x8c>
    6bee:	f8d8 3004 	ldr.w	r3, [r8, #4]
    6bf2:	63a3      	str	r3, [r4, #56]	; 0x38
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
    6bf4:	f104 0134 	add.w	r1, r4, #52	; 0x34
    6bf8:	f104 0338 	add.w	r3, r4, #56	; 0x38
	while (*count) {
    6bfc:	681a      	ldr	r2, [r3, #0]
    6bfe:	b182      	cbz	r2, 6c22 <transceive+0x98>
		if (((*current)->len / dfs) != 0) {
    6c00:	680a      	ldr	r2, [r1, #0]
    6c02:	6850      	ldr	r0, [r2, #4]
    6c04:	b948      	cbnz	r0, 6c1a <transceive+0x90>
		++(*current);
    6c06:	3208      	adds	r2, #8
    6c08:	600a      	str	r2, [r1, #0]
		--(*count);
    6c0a:	681a      	ldr	r2, [r3, #0]
    6c0c:	3a01      	subs	r2, #1
    6c0e:	601a      	str	r2, [r3, #0]
    6c10:	e7f4      	b.n	6bfc <transceive+0x72>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    6c12:	4643      	mov	r3, r8
    6c14:	e7e9      	b.n	6bea <transceive+0x60>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    6c16:	2300      	movs	r3, #0
    6c18:	e7eb      	b.n	6bf2 <transceive+0x68>
			*buf_len = (*current)->len / dfs;
    6c1a:	64a0      	str	r0, [r4, #72]	; 0x48
			return (*current)->buf;
    6c1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6c1e:	681b      	ldr	r3, [r3, #0]
    6c20:	e001      	b.n	6c26 <transceive+0x9c>
	*buf_len = 0;
    6c22:	2300      	movs	r3, #0
    6c24:	64a3      	str	r3, [r4, #72]	; 0x48
	ctx->tx_buf = (const uint8_t *)
    6c26:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    6c28:	b19f      	cbz	r7, 6c52 <transceive+0xc8>
    6c2a:	683b      	ldr	r3, [r7, #0]
    6c2c:	63e3      	str	r3, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    6c2e:	b193      	cbz	r3, 6c56 <transceive+0xcc>
    6c30:	687b      	ldr	r3, [r7, #4]
    6c32:	6423      	str	r3, [r4, #64]	; 0x40
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
    6c34:	f104 013c 	add.w	r1, r4, #60	; 0x3c
    6c38:	f104 0240 	add.w	r2, r4, #64	; 0x40
	while (*count) {
    6c3c:	6813      	ldr	r3, [r2, #0]
    6c3e:	b183      	cbz	r3, 6c62 <transceive+0xd8>
		if (((*current)->len / dfs) != 0) {
    6c40:	680b      	ldr	r3, [r1, #0]
    6c42:	6858      	ldr	r0, [r3, #4]
    6c44:	b948      	cbnz	r0, 6c5a <transceive+0xd0>
		++(*current);
    6c46:	3308      	adds	r3, #8
    6c48:	600b      	str	r3, [r1, #0]
		--(*count);
    6c4a:	6813      	ldr	r3, [r2, #0]
    6c4c:	3b01      	subs	r3, #1
    6c4e:	6013      	str	r3, [r2, #0]
    6c50:	e7f4      	b.n	6c3c <transceive+0xb2>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    6c52:	463b      	mov	r3, r7
    6c54:	e7ea      	b.n	6c2c <transceive+0xa2>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    6c56:	2300      	movs	r3, #0
    6c58:	e7eb      	b.n	6c32 <transceive+0xa8>
			*buf_len = (*current)->len / dfs;
    6c5a:	6520      	str	r0, [r4, #80]	; 0x50
			return (*current)->buf;
    6c5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    6c5e:	681b      	ldr	r3, [r3, #0]
    6c60:	e000      	b.n	6c64 <transceive+0xda>
	*buf_len = 0;
    6c62:	6523      	str	r3, [r4, #80]	; 0x50
	ctx->rx_buf = (uint8_t *)
    6c64:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->sync_status = 0;
    6c66:	2300      	movs	r3, #0
    6c68:	6323      	str	r3, [r4, #48]	; 0x30
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    6c6a:	6823      	ldr	r3, [r4, #0]
    6c6c:	b1bb      	cbz	r3, 6c9e <transceive+0x114>
    6c6e:	689b      	ldr	r3, [r3, #8]
    6c70:	b1ab      	cbz	r3, 6c9e <transceive+0x114>
    6c72:	6818      	ldr	r0, [r3, #0]
    6c74:	b198      	cbz	r0, 6c9e <transceive+0x114>
	return gpio_pin_set(spec->port, spec->pin, value);
    6c76:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
    6c78:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    6c7a:	681a      	ldr	r2, [r3, #0]
    6c7c:	2301      	movs	r3, #1
    6c7e:	408b      	lsls	r3, r1
    6c80:	421a      	tst	r2, r3
    6c82:	d100      	bne.n	6c86 <transceive+0xfc>
    6c84:	2501      	movs	r5, #1
	if (value != 0)	{
    6c86:	b395      	cbz	r5, 6cee <transceive+0x164>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
    6c88:	2301      	movs	r3, #1
    6c8a:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
    6c8e:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    6c90:	68db      	ldr	r3, [r3, #12]
    6c92:	4798      	blx	r3
			k_busy_wait(ctx->config->cs->delay);
    6c94:	6823      	ldr	r3, [r4, #0]
    6c96:	689b      	ldr	r3, [r3, #8]
    6c98:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
    6c9a:	f000 ff70 	bl	7b7e <z_impl_k_busy_wait>
		transfer_next_chunk(dev);
    6c9e:	4630      	mov	r0, r6
    6ca0:	f7fb fe46 	bl	2930 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    6ca4:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6ca6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    6ca8:	4298      	cmp	r0, r3
    6caa:	bf38      	it	cc
    6cac:	4618      	movcc	r0, r3
    6cae:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
    6cb2:	fb03 f000 	mul.w	r0, r3, r0
			     ctx->config->frequency;
    6cb6:	4625      	mov	r5, r4
    6cb8:	f855 3b20 	ldr.w	r3, [r5], #32
    6cbc:	681b      	ldr	r3, [r3, #0]
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    6cbe:	fbb0 f0f3 	udiv	r0, r0, r3
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    6cc2:	30c8      	adds	r0, #200	; 0xc8
    6cc4:	0c41      	lsrs	r1, r0, #17
    6cc6:	03c0      	lsls	r0, r0, #15
    6cc8:	f240 33e7 	movw	r3, #999	; 0x3e7
    6ccc:	18c0      	adds	r0, r0, r3
    6cce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6cd2:	f04f 0300 	mov.w	r3, #0
    6cd6:	f141 0100 	adc.w	r1, r1, #0
    6cda:	f7f9 fa11 	bl	100 <__aeabi_uldivmod>
    6cde:	4602      	mov	r2, r0
    6ce0:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    6ce2:	4628      	mov	r0, r5
    6ce4:	f7fd fffe 	bl	4ce4 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
    6ce8:	b940      	cbnz	r0, 6cfc <transceive+0x172>
	status = ctx->sync_status;
    6cea:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return status;
    6cec:	e76c      	b.n	6bc8 <transceive+0x3e>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
    6cee:	2301      	movs	r3, #1
    6cf0:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
    6cf4:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    6cf6:	691b      	ldr	r3, [r3, #16]
    6cf8:	4798      	blx	r3
    6cfa:	e7cb      	b.n	6c94 <transceive+0x10a>
		return -ETIMEDOUT;
    6cfc:	f06f 0573 	mvn.w	r5, #115	; 0x73
    6d00:	e762      	b.n	6bc8 <transceive+0x3e>
		ctx->owner = NULL;
    6d02:	2300      	movs	r3, #0
    6d04:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
    6d06:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
    6d0a:	f7fd ffc7 	bl	4c9c <z_impl_k_sem_give>
	return error;
    6d0e:	e761      	b.n	6bd4 <transceive+0x4a>

00006d10 <spi_nrfx_transceive>:
{
    6d10:	b510      	push	{r4, lr}
    6d12:	b082      	sub	sp, #8
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL);
    6d14:	2400      	movs	r4, #0
    6d16:	9401      	str	r4, [sp, #4]
    6d18:	9400      	str	r4, [sp, #0]
    6d1a:	f7ff ff36 	bl	6b8a <transceive>
}
    6d1e:	b002      	add	sp, #8
    6d20:	bd10      	pop	{r4, pc}

00006d22 <event_handler>:
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    6d22:	7803      	ldrb	r3, [r0, #0]
    6d24:	2b00      	cmp	r3, #0
    6d26:	d156      	bne.n	6dd6 <event_handler+0xb4>
{
    6d28:	b510      	push	{r4, lr}
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
    6d2a:	6d8a      	ldr	r2, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
    6d2c:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    6d2e:	b143      	cbz	r3, 6d42 <event_handler+0x20>
	if (len > ctx->tx_len) {
    6d30:	429a      	cmp	r2, r3
    6d32:	d806      	bhi.n	6d42 <event_handler+0x20>
	ctx->tx_len -= len;
    6d34:	1a9b      	subs	r3, r3, r2
    6d36:	648b      	str	r3, [r1, #72]	; 0x48
	if (!ctx->tx_len) {
    6d38:	b19b      	cbz	r3, 6d62 <event_handler+0x40>
	} else if (ctx->tx_buf) {
    6d3a:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    6d3c:	b10b      	cbz	r3, 6d42 <event_handler+0x20>
		ctx->tx_buf += dfs * len;
    6d3e:	4413      	add	r3, r2
    6d40:	644b      	str	r3, [r1, #68]	; 0x44
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    6d42:	6d8a      	ldr	r2, [r1, #88]	; 0x58
	if (!ctx->rx_len) {
    6d44:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    6d46:	b143      	cbz	r3, 6d5a <event_handler+0x38>
	if (len > ctx->rx_len) {
    6d48:	429a      	cmp	r2, r3
    6d4a:	d806      	bhi.n	6d5a <event_handler+0x38>
	ctx->rx_len -= len;
    6d4c:	1a9b      	subs	r3, r3, r2
    6d4e:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->rx_len) {
    6d50:	b323      	cbz	r3, 6d9c <event_handler+0x7a>
	} else if (ctx->rx_buf) {
    6d52:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
    6d54:	b10b      	cbz	r3, 6d5a <event_handler+0x38>
		ctx->rx_buf += dfs * len;
    6d56:	4413      	add	r3, r2
    6d58:	64cb      	str	r3, [r1, #76]	; 0x4c
		transfer_next_chunk(dev_data->dev);
    6d5a:	6d48      	ldr	r0, [r1, #84]	; 0x54
    6d5c:	f7fb fde8 	bl	2930 <transfer_next_chunk>
}
    6d60:	bd10      	pop	{r4, pc}
		++ctx->current_tx;
    6d62:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    6d64:	3308      	adds	r3, #8
    6d66:	634b      	str	r3, [r1, #52]	; 0x34
		--ctx->tx_count;
    6d68:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    6d6a:	3b01      	subs	r3, #1
    6d6c:	638b      	str	r3, [r1, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
    6d6e:	f101 0034 	add.w	r0, r1, #52	; 0x34
    6d72:	f101 0238 	add.w	r2, r1, #56	; 0x38
	while (*count) {
    6d76:	e004      	b.n	6d82 <event_handler+0x60>
		++(*current);
    6d78:	3308      	adds	r3, #8
    6d7a:	6003      	str	r3, [r0, #0]
		--(*count);
    6d7c:	6813      	ldr	r3, [r2, #0]
    6d7e:	3b01      	subs	r3, #1
    6d80:	6013      	str	r3, [r2, #0]
	while (*count) {
    6d82:	6813      	ldr	r3, [r2, #0]
    6d84:	b13b      	cbz	r3, 6d96 <event_handler+0x74>
		if (((*current)->len / dfs) != 0) {
    6d86:	6803      	ldr	r3, [r0, #0]
    6d88:	685c      	ldr	r4, [r3, #4]
    6d8a:	2c00      	cmp	r4, #0
    6d8c:	d0f4      	beq.n	6d78 <event_handler+0x56>
			*buf_len = (*current)->len / dfs;
    6d8e:	648c      	str	r4, [r1, #72]	; 0x48
			return (*current)->buf;
    6d90:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    6d92:	681b      	ldr	r3, [r3, #0]
    6d94:	e000      	b.n	6d98 <event_handler+0x76>
	*buf_len = 0;
    6d96:	648b      	str	r3, [r1, #72]	; 0x48
		ctx->tx_buf = (const uint8_t *)
    6d98:	644b      	str	r3, [r1, #68]	; 0x44
    6d9a:	e7d2      	b.n	6d42 <event_handler+0x20>
		++ctx->current_rx;
    6d9c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    6d9e:	3308      	adds	r3, #8
    6da0:	63cb      	str	r3, [r1, #60]	; 0x3c
		--ctx->rx_count;
    6da2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    6da4:	3b01      	subs	r3, #1
    6da6:	640b      	str	r3, [r1, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
    6da8:	f101 003c 	add.w	r0, r1, #60	; 0x3c
    6dac:	f101 0240 	add.w	r2, r1, #64	; 0x40
	while (*count) {
    6db0:	e004      	b.n	6dbc <event_handler+0x9a>
		++(*current);
    6db2:	3308      	adds	r3, #8
    6db4:	6003      	str	r3, [r0, #0]
		--(*count);
    6db6:	6813      	ldr	r3, [r2, #0]
    6db8:	3b01      	subs	r3, #1
    6dba:	6013      	str	r3, [r2, #0]
	while (*count) {
    6dbc:	6813      	ldr	r3, [r2, #0]
    6dbe:	b13b      	cbz	r3, 6dd0 <event_handler+0xae>
		if (((*current)->len / dfs) != 0) {
    6dc0:	6803      	ldr	r3, [r0, #0]
    6dc2:	685c      	ldr	r4, [r3, #4]
    6dc4:	2c00      	cmp	r4, #0
    6dc6:	d0f4      	beq.n	6db2 <event_handler+0x90>
			*buf_len = (*current)->len / dfs;
    6dc8:	650c      	str	r4, [r1, #80]	; 0x50
			return (*current)->buf;
    6dca:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    6dcc:	681b      	ldr	r3, [r3, #0]
    6dce:	e000      	b.n	6dd2 <event_handler+0xb0>
	*buf_len = 0;
    6dd0:	650b      	str	r3, [r1, #80]	; 0x50
		ctx->rx_buf = (uint8_t *)
    6dd2:	64cb      	str	r3, [r1, #76]	; 0x4c
    6dd4:	e7c1      	b.n	6d5a <event_handler+0x38>
    6dd6:	4770      	bx	lr

00006dd8 <spi_1_init>:
#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEVICE(0);
#endif

#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEVICE(1);
    6dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    6dda:	b083      	sub	sp, #12
    6ddc:	4604      	mov	r4, r0
    6dde:	6905      	ldr	r5, [r0, #16]
    6de0:	2200      	movs	r2, #0
    6de2:	2101      	movs	r1, #1
    6de4:	2004      	movs	r0, #4
    6de6:	f7fa fe47 	bl	1a78 <z_arm_irq_priority_set>
    6dea:	6863      	ldr	r3, [r4, #4]
    6dec:	69dc      	ldr	r4, [r3, #28]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    6dee:	aa01      	add	r2, sp, #4
    6df0:	2100      	movs	r1, #0
    6df2:	4620      	mov	r0, r4
    6df4:	f000 fa82 	bl	72fc <pinctrl_lookup_state>
	if (ret < 0) {
    6df8:	2800      	cmp	r0, #0
    6dfa:	db05      	blt.n	6e08 <spi_1_init+0x30>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    6dfc:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    6dfe:	6822      	ldr	r2, [r4, #0]
    6e00:	7919      	ldrb	r1, [r3, #4]
    6e02:	6818      	ldr	r0, [r3, #0]
    6e04:	f7fc f97a 	bl	30fc <pinctrl_configure_pins>
    6e08:	2800      	cmp	r0, #0
    6e0a:	db55      	blt.n	6eb8 <spi_1_init+0xe0>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    6e0c:	68ac      	ldr	r4, [r5, #8]
    6e0e:	e010      	b.n	6e32 <spi_1_init+0x5a>
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    6e10:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    6e14:	f013 0f01 	tst.w	r3, #1
    6e18:	d026      	beq.n	6e68 <spi_1_init+0x90>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    6e1a:	2301      	movs	r3, #1
    6e1c:	fa03 fc01 	lsl.w	ip, r3, r1
    6e20:	6833      	ldr	r3, [r6, #0]
    6e22:	ea43 030c 	orr.w	r3, r3, ip
    6e26:	6033      	str	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
    6e28:	683b      	ldr	r3, [r7, #0]
    6e2a:	4798      	blx	r3
		if (ret < 0) {
    6e2c:	2800      	cmp	r0, #0
    6e2e:	db24      	blt.n	6e7a <spi_1_init+0xa2>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    6e30:	3408      	adds	r4, #8
    6e32:	68ab      	ldr	r3, [r5, #8]
    6e34:	68ea      	ldr	r2, [r5, #12]
    6e36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    6e3a:	429c      	cmp	r4, r3
    6e3c:	d21c      	bcs.n	6e78 <spi_1_init+0xa0>
		if (!device_is_ready(cs_gpio->port)) {
    6e3e:	6820      	ldr	r0, [r4, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    6e40:	f000 fc57 	bl	76f2 <z_device_is_ready>
    6e44:	2800      	cmp	r0, #0
    6e46:	d039      	beq.n	6ebc <spi_1_init+0xe4>
	return gpio_pin_configure(spec->port,
    6e48:	6820      	ldr	r0, [r4, #0]
    6e4a:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
    6e4c:	88e3      	ldrh	r3, [r4, #6]
	return gpio_pin_configure(spec->port,
    6e4e:	f443 13b0 	orr.w	r3, r3, #1441792	; 0x160000
	const struct gpio_driver_api *api =
    6e52:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
    6e54:	6906      	ldr	r6, [r0, #16]
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    6e56:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
    6e5a:	d0d9      	beq.n	6e10 <spi_1_init+0x38>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    6e5c:	f013 0f01 	tst.w	r3, #1
    6e60:	d0d6      	beq.n	6e10 <spi_1_init+0x38>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    6e62:	f483 2340 	eor.w	r3, r3, #786432	; 0xc0000
    6e66:	e7d3      	b.n	6e10 <spi_1_init+0x38>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    6e68:	2301      	movs	r3, #1
    6e6a:	fa03 fc01 	lsl.w	ip, r3, r1
    6e6e:	6833      	ldr	r3, [r6, #0]
    6e70:	ea23 030c 	bic.w	r3, r3, ip
    6e74:	6033      	str	r3, [r6, #0]
    6e76:	e7d7      	b.n	6e28 <spi_1_init+0x50>
	return 0;
    6e78:	2000      	movs	r0, #0
    6e7a:	2800      	cmp	r0, #0
    6e7c:	db1c      	blt.n	6eb8 <spi_1_init+0xe0>
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    6e7e:	682b      	ldr	r3, [r5, #0]
    6e80:	b1bb      	cbz	r3, 6eb2 <spi_1_init+0xda>
    6e82:	689b      	ldr	r3, [r3, #8]
    6e84:	b1ab      	cbz	r3, 6eb2 <spi_1_init+0xda>
    6e86:	681a      	ldr	r2, [r3, #0]
    6e88:	b19a      	cbz	r2, 6eb2 <spi_1_init+0xda>
			k_busy_wait(ctx->config->cs->delay);
    6e8a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
    6e8c:	f000 fe77 	bl	7b7e <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    6e90:	682b      	ldr	r3, [r5, #0]
    6e92:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
    6e94:	6818      	ldr	r0, [r3, #0]
    6e96:	791a      	ldrb	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    6e98:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    6e9a:	6819      	ldr	r1, [r3, #0]
    6e9c:	2301      	movs	r3, #1
    6e9e:	4093      	lsls	r3, r2
    6ea0:	4219      	tst	r1, r3
    6ea2:	d10e      	bne.n	6ec2 <spi_1_init+0xea>
    6ea4:	2300      	movs	r3, #0
	if (value != 0)	{
    6ea6:	b173      	cbz	r3, 6ec6 <spi_1_init+0xee>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
    6ea8:	2101      	movs	r1, #1
    6eaa:	4091      	lsls	r1, r2
	const struct gpio_driver_api *api =
    6eac:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    6eae:	68db      	ldr	r3, [r3, #12]
    6eb0:	4798      	blx	r3
    6eb2:	69ab      	ldr	r3, [r5, #24]
	if (!k_sem_count_get(&ctx->lock)) {
    6eb4:	b16b      	cbz	r3, 6ed2 <spi_1_init+0xfa>
    6eb6:	2000      	movs	r0, #0
    6eb8:	b003      	add	sp, #12
    6eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -ENODEV;
    6ebc:	f06f 0012 	mvn.w	r0, #18
    6ec0:	e7db      	b.n	6e7a <spi_1_init+0xa2>
		value = (value != 0) ? 0 : 1;
    6ec2:	2301      	movs	r3, #1
    6ec4:	e7ef      	b.n	6ea6 <spi_1_init+0xce>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
    6ec6:	2101      	movs	r1, #1
    6ec8:	4091      	lsls	r1, r2
	const struct gpio_driver_api *api =
    6eca:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    6ecc:	691b      	ldr	r3, [r3, #16]
    6ece:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
    6ed0:	e7ef      	b.n	6eb2 <spi_1_init+0xda>
		ctx->owner = NULL;
    6ed2:	606b      	str	r3, [r5, #4]
		k_sem_give(&ctx->lock);
    6ed4:	f105 0010 	add.w	r0, r5, #16
	z_impl_k_sem_give(sem);
    6ed8:	f7fd fee0 	bl	4c9c <z_impl_k_sem_give>
}
    6edc:	e7eb      	b.n	6eb6 <spi_1_init+0xde>

00006ede <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    6ede:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6ee0:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    6ee2:	f04f 0120 	mov.w	r1, #32
    6ee6:	f3ef 8211 	mrs	r2, BASEPRI
    6eea:	f381 8812 	msr	BASEPRI_MAX, r1
    6eee:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6ef2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    6ef6:	b131      	cbz	r1, 6f06 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6ef8:	2100      	movs	r1, #0
    6efa:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    6efe:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6f02:	2101      	movs	r1, #1
    6f04:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    6f06:	f382 8811 	msr	BASEPRI, r2
    6f0a:	f3bf 8f6f 	isb	sy
}
    6f0e:	4770      	bx	lr

00006f10 <uarte_nrfx_isr_int>:
{
    6f10:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
    6f12:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
    6f14:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
    6f16:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    6f1a:	f413 7f80 	tst.w	r3, #256	; 0x100
    6f1e:	d002      	beq.n	6f26 <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6f20:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    6f24:	b9d3      	cbnz	r3, 6f5c <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6f26:	686b      	ldr	r3, [r5, #4]
    6f28:	f013 0f10 	tst.w	r3, #16
    6f2c:	d015      	beq.n	6f5a <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
    6f2e:	f04f 0220 	mov.w	r2, #32
    6f32:	f3ef 8311 	mrs	r3, BASEPRI
    6f36:	f382 8812 	msr	BASEPRI_MAX, r2
    6f3a:	f3bf 8f6f 	isb	sy
    6f3e:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    6f42:	b112      	cbz	r2, 6f4a <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    6f44:	2200      	movs	r2, #0
    6f46:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    6f4a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    6f4e:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
    6f52:	f383 8811 	msr	BASEPRI, r3
    6f56:	f3bf 8f6f 	isb	sy
}
    6f5a:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    6f5c:	f7ff ffbf 	bl	6ede <endtx_isr>
    6f60:	e7e1      	b.n	6f26 <uarte_nrfx_isr_int+0x16>

00006f62 <uarte_nrfx_configure>:
{
    6f62:	b570      	push	{r4, r5, r6, lr}
    6f64:	b082      	sub	sp, #8
    6f66:	4606      	mov	r6, r0
    6f68:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
    6f6a:	6905      	ldr	r5, [r0, #16]
	switch (cfg->stop_bits) {
    6f6c:	794b      	ldrb	r3, [r1, #5]
    6f6e:	2b01      	cmp	r3, #1
    6f70:	d006      	beq.n	6f80 <uarte_nrfx_configure+0x1e>
    6f72:	2b03      	cmp	r3, #3
    6f74:	d011      	beq.n	6f9a <uarte_nrfx_configure+0x38>
    6f76:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    6f7a:	4618      	mov	r0, r3
    6f7c:	b002      	add	sp, #8
    6f7e:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    6f80:	2300      	movs	r3, #0
    6f82:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    6f86:	79a3      	ldrb	r3, [r4, #6]
    6f88:	2b03      	cmp	r3, #3
    6f8a:	d137      	bne.n	6ffc <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
    6f8c:	79e3      	ldrb	r3, [r4, #7]
    6f8e:	b143      	cbz	r3, 6fa2 <uarte_nrfx_configure+0x40>
    6f90:	2b01      	cmp	r3, #1
    6f92:	d010      	beq.n	6fb6 <uarte_nrfx_configure+0x54>
    6f94:	f06f 0385 	mvn.w	r3, #133	; 0x85
    6f98:	e7ef      	b.n	6f7a <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    6f9a:	2310      	movs	r3, #16
    6f9c:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    6fa0:	e7f1      	b.n	6f86 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    6fa2:	2300      	movs	r3, #0
    6fa4:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    6fa8:	7923      	ldrb	r3, [r4, #4]
    6faa:	b143      	cbz	r3, 6fbe <uarte_nrfx_configure+0x5c>
    6fac:	2b02      	cmp	r3, #2
    6fae:	d021      	beq.n	6ff4 <uarte_nrfx_configure+0x92>
    6fb0:	f06f 0385 	mvn.w	r3, #133	; 0x85
    6fb4:	e7e1      	b.n	6f7a <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    6fb6:	2301      	movs	r3, #1
    6fb8:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    6fbc:	e7f4      	b.n	6fa8 <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    6fbe:	2300      	movs	r3, #0
    6fc0:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    6fc4:	6821      	ldr	r1, [r4, #0]
    6fc6:	4630      	mov	r0, r6
    6fc8:	f7fb fd24 	bl	2a14 <baudrate_set>
    6fcc:	4603      	mov	r3, r0
    6fce:	b9c0      	cbnz	r0, 7002 <uarte_nrfx_configure+0xa0>
	const struct uarte_nrfx_config *config = dev->config;
    6fd0:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
    6fd2:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    6fd4:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    6fd8:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    6fdc:	f89d 2004 	ldrb.w	r2, [sp, #4]
    6fe0:	4331      	orrs	r1, r6
    6fe2:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    6fe4:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	data->uart_config = *cfg;
    6fe8:	3504      	adds	r5, #4
    6fea:	e894 0003 	ldmia.w	r4, {r0, r1}
    6fee:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
    6ff2:	e7c2      	b.n	6f7a <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    6ff4:	230e      	movs	r3, #14
    6ff6:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    6ffa:	e7e3      	b.n	6fc4 <uarte_nrfx_configure+0x62>
		return -ENOTSUP;
    6ffc:	f06f 0385 	mvn.w	r3, #133	; 0x85
    7000:	e7bb      	b.n	6f7a <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
    7002:	f06f 0385 	mvn.w	r3, #133	; 0x85
    7006:	e7b8      	b.n	6f7a <uarte_nrfx_configure+0x18>

00007008 <uarte_nrfx_config_get>:
{
    7008:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    700a:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    700c:	3304      	adds	r3, #4
    700e:	e893 0003 	ldmia.w	r3, {r0, r1}
    7012:	e882 0003 	stmia.w	r2, {r0, r1}
}
    7016:	2000      	movs	r0, #0
    7018:	4770      	bx	lr

0000701a <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    701a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    701c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    701e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    7022:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    7026:	4770      	bx	lr

00007028 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    7028:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    702a:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    702c:	685b      	ldr	r3, [r3, #4]
    702e:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7032:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    7036:	b929      	cbnz	r1, 7044 <is_tx_ready+0x1c>
    7038:	b933      	cbnz	r3, 7048 <is_tx_ready+0x20>
    703a:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    703e:	b92b      	cbnz	r3, 704c <is_tx_ready+0x24>
    7040:	2000      	movs	r0, #0
    7042:	4770      	bx	lr
    7044:	2001      	movs	r0, #1
    7046:	4770      	bx	lr
    7048:	2000      	movs	r0, #0
    704a:	4770      	bx	lr
    704c:	2001      	movs	r0, #1
}
    704e:	4770      	bx	lr

00007050 <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    7050:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    7052:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    7054:	2208      	movs	r2, #8
    7056:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    705a:	4770      	bx	lr

0000705c <tx_start>:
{
    705c:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    705e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    7060:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    7062:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    7066:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    706a:	2200      	movs	r2, #0
    706c:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    7070:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    7074:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    7078:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    707c:	685b      	ldr	r3, [r3, #4]
    707e:	f013 0f10 	tst.w	r3, #16
    7082:	d102      	bne.n	708a <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7084:	2301      	movs	r3, #1
    7086:	60a3      	str	r3, [r4, #8]
}
    7088:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    708a:	2101      	movs	r1, #1
    708c:	f7ff ffe0 	bl	7050 <uarte_enable>
    p_reg->INTENSET = mask;
    7090:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    7094:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    7098:	e7f4      	b.n	7084 <tx_start+0x28>

0000709a <uarte_nrfx_poll_in>:
{
    709a:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
    709c:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    709e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    70a0:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    70a2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    70a6:	b152      	cbz	r2, 70be <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
    70a8:	7c62      	ldrb	r2, [r4, #17]
    70aa:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    70ac:	2000      	movs	r0, #0
    70ae:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    70b2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    70b6:	2201      	movs	r2, #1
    70b8:	601a      	str	r2, [r3, #0]
}
    70ba:	bc10      	pop	{r4}
    70bc:	4770      	bx	lr
		return -1;
    70be:	f04f 30ff 	mov.w	r0, #4294967295
    70c2:	e7fa      	b.n	70ba <uarte_nrfx_poll_in+0x20>

000070c4 <wait_tx_ready>:
{
    70c4:	b570      	push	{r4, r5, r6, lr}
    70c6:	4606      	mov	r6, r0
    70c8:	e014      	b.n	70f4 <wait_tx_ready+0x30>
		if (res) {
    70ca:	b17d      	cbz	r5, 70ec <wait_tx_ready+0x28>
	__asm__ volatile(
    70cc:	f04f 0320 	mov.w	r3, #32
    70d0:	f3ef 8411 	mrs	r4, BASEPRI
    70d4:	f383 8812 	msr	BASEPRI_MAX, r3
    70d8:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    70dc:	4630      	mov	r0, r6
    70de:	f7ff ffa3 	bl	7028 <is_tx_ready>
    70e2:	b9a0      	cbnz	r0, 710e <wait_tx_ready+0x4a>
	__asm__ volatile(
    70e4:	f384 8811 	msr	BASEPRI, r4
    70e8:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    70ec:	2021      	movs	r0, #33	; 0x21
    70ee:	2100      	movs	r1, #0
    70f0:	f7fe f9ce 	bl	5490 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    70f4:	2464      	movs	r4, #100	; 0x64
    70f6:	4630      	mov	r0, r6
    70f8:	f7ff ff96 	bl	7028 <is_tx_ready>
    70fc:	4605      	mov	r5, r0
    70fe:	2800      	cmp	r0, #0
    7100:	d1e3      	bne.n	70ca <wait_tx_ready+0x6>
    7102:	2001      	movs	r0, #1
    7104:	f000 f9a3 	bl	744e <nrfx_busy_wait>
    7108:	3c01      	subs	r4, #1
    710a:	d1f4      	bne.n	70f6 <wait_tx_ready+0x32>
    710c:	e7dd      	b.n	70ca <wait_tx_ready+0x6>
}
    710e:	4620      	mov	r0, r4
    7110:	bd70      	pop	{r4, r5, r6, pc}

00007112 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    7112:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7116:	b083      	sub	sp, #12
    7118:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
    711a:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    711c:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    711e:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    7122:	2100      	movs	r1, #0
    7124:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    7128:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    712c:	f8d7 900c 	ldr.w	r9, [r7, #12]
	ret = pinctrl_lookup_state(config, id, &state);
    7130:	aa01      	add	r2, sp, #4
    7132:	4648      	mov	r0, r9
    7134:	f000 f8e2 	bl	72fc <pinctrl_lookup_state>
	if (ret < 0) {
    7138:	1e04      	subs	r4, r0, #0
    713a:	db07      	blt.n	714c <uarte_instance_init+0x3a>
	return pinctrl_apply_state_direct(config, state);
    713c:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    713e:	f8d9 2000 	ldr.w	r2, [r9]
    7142:	7919      	ldrb	r1, [r3, #4]
    7144:	6818      	ldr	r0, [r3, #0]
    7146:	f7fb ffd9 	bl	30fc <pinctrl_configure_pins>
    714a:	4604      	mov	r4, r0
	if (err < 0) {
    714c:	2c00      	cmp	r4, #0
    714e:	db35      	blt.n	71bc <uarte_instance_init+0xaa>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    7150:	f108 0104 	add.w	r1, r8, #4
    7154:	4628      	mov	r0, r5
    7156:	f7ff ff04 	bl	6f62 <uarte_nrfx_configure>
	if (err) {
    715a:	4604      	mov	r4, r0
    715c:	bb70      	cbnz	r0, 71bc <uarte_instance_init+0xaa>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    715e:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    7160:	f013 0f02 	tst.w	r3, #2
    7164:	d12e      	bne.n	71c4 <uarte_instance_init+0xb2>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    7166:	2308      	movs	r3, #8
    7168:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    716c:	7a3b      	ldrb	r3, [r7, #8]
    716e:	b95b      	cbnz	r3, 7188 <uarte_instance_init+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7170:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    7174:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    7178:	f108 0311 	add.w	r3, r8, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    717c:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    7180:	2301      	movs	r3, #1
    7182:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7186:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    7188:	687b      	ldr	r3, [r7, #4]
    718a:	f013 0f02 	tst.w	r3, #2
    718e:	d103      	bne.n	7198 <uarte_instance_init+0x86>
    p_reg->INTENSET = mask;
    7190:	f44f 7380 	mov.w	r3, #256	; 0x100
    7194:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    7198:	687b      	ldr	r3, [r7, #4]
    719a:	f013 0f10 	tst.w	r3, #16
    719e:	d003      	beq.n	71a8 <uarte_instance_init+0x96>
    71a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    71a4:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    71a8:	f108 0310 	add.w	r3, r8, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    71ac:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    71b0:	2300      	movs	r3, #0
    71b2:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    71b6:	2301      	movs	r3, #1
    71b8:	60b3      	str	r3, [r6, #8]
    71ba:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    71bc:	4620      	mov	r0, r4
    71be:	b003      	add	sp, #12
    71c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    71c4:	4641      	mov	r1, r8
    71c6:	4630      	mov	r0, r6
    71c8:	f7fb fd04 	bl	2bd4 <endtx_stoptx_ppi_init>
		if (err < 0) {
    71cc:	2800      	cmp	r0, #0
    71ce:	daca      	bge.n	7166 <uarte_instance_init+0x54>
			return err;
    71d0:	4604      	mov	r4, r0
    71d2:	e7f3      	b.n	71bc <uarte_instance_init+0xaa>

000071d4 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    71d4:	b510      	push	{r4, lr}
    71d6:	4604      	mov	r4, r0
    71d8:	2200      	movs	r2, #0
    71da:	2101      	movs	r1, #1
    71dc:	2002      	movs	r0, #2
    71de:	f7fa fc4b 	bl	1a78 <z_arm_irq_priority_set>
    71e2:	2002      	movs	r0, #2
    71e4:	f7fa fc18 	bl	1a18 <arch_irq_enable>
    71e8:	2100      	movs	r1, #0
    71ea:	4620      	mov	r0, r4
    71ec:	f7ff ff91 	bl	7112 <uarte_instance_init>
    71f0:	bd10      	pop	{r4, pc}

000071f2 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    71f2:	b510      	push	{r4, lr}
    71f4:	4604      	mov	r4, r0
    71f6:	2200      	movs	r2, #0
    71f8:	2101      	movs	r1, #1
    71fa:	2028      	movs	r0, #40	; 0x28
    71fc:	f7fa fc3c 	bl	1a78 <z_arm_irq_priority_set>
    7200:	2028      	movs	r0, #40	; 0x28
    7202:	f7fa fc09 	bl	1a18 <arch_irq_enable>
    7206:	2100      	movs	r1, #0
    7208:	4620      	mov	r0, r4
    720a:	f7ff ff82 	bl	7112 <uarte_instance_init>
    720e:	bd10      	pop	{r4, pc}

00007210 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    7210:	4770      	bx	lr

00007212 <counter_sub>:
	return (a - b) & COUNTER_MAX;
    7212:	1a40      	subs	r0, r0, r1
}
    7214:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7218:	4770      	bx	lr

0000721a <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    721a:	f100 0350 	add.w	r3, r0, #80	; 0x50
    721e:	009b      	lsls	r3, r3, #2
    7220:	b29b      	uxth	r3, r3
    7222:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7226:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    722a:	2200      	movs	r2, #0
    722c:	601a      	str	r2, [r3, #0]
    722e:	681b      	ldr	r3, [r3, #0]
}
    7230:	4770      	bx	lr

00007232 <absolute_time_to_cc>:
}
    7232:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7236:	4770      	bx	lr

00007238 <full_int_lock>:
	__asm__ volatile(
    7238:	f04f 0320 	mov.w	r3, #32
    723c:	f3ef 8011 	mrs	r0, BASEPRI
    7240:	f383 8812 	msr	BASEPRI_MAX, r3
    7244:	f3bf 8f6f 	isb	sy
}
    7248:	4770      	bx	lr

0000724a <full_int_unlock>:
	__asm__ volatile(
    724a:	f380 8811 	msr	BASEPRI, r0
    724e:	f3bf 8f6f 	isb	sy
}
    7252:	4770      	bx	lr

00007254 <set_absolute_alarm>:
{
    7254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7256:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    7258:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    725c:	f7fb fce8 	bl	2c30 <get_comparator>
    7260:	4607      	mov	r7, r0
    7262:	e019      	b.n	7298 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    7264:	2013      	movs	r0, #19
    7266:	f000 fc8a 	bl	7b7e <z_impl_k_busy_wait>
}
    726a:	e022      	b.n	72b2 <set_absolute_alarm+0x5e>
		event_clear(chan);
    726c:	4630      	mov	r0, r6
    726e:	f7ff ffd4 	bl	721a <event_clear>
		event_enable(chan);
    7272:	4630      	mov	r0, r6
    7274:	f7fb fce4 	bl	2c40 <event_enable>
		set_comparator(chan, cc_val);
    7278:	4629      	mov	r1, r5
    727a:	4630      	mov	r0, r6
    727c:	f7fb fcce 	bl	2c1c <set_comparator>
		now2 = counter();
    7280:	f7fb fcf2 	bl	2c68 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    7284:	4284      	cmp	r4, r0
    7286:	d01e      	beq.n	72c6 <set_absolute_alarm+0x72>
    7288:	1c81      	adds	r1, r0, #2
    728a:	4628      	mov	r0, r5
    728c:	f7ff ffc1 	bl	7212 <counter_sub>
	} while ((now2 != now) &&
    7290:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    7294:	d917      	bls.n	72c6 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    7296:	462f      	mov	r7, r5
		now = counter();
    7298:	f7fb fce6 	bl	2c68 <counter>
    729c:	4604      	mov	r4, r0
		set_comparator(chan, now);
    729e:	4601      	mov	r1, r0
    72a0:	4630      	mov	r0, r6
    72a2:	f7fb fcbb 	bl	2c1c <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    72a6:	4621      	mov	r1, r4
    72a8:	4638      	mov	r0, r7
    72aa:	f7ff ffb2 	bl	7212 <counter_sub>
    72ae:	2801      	cmp	r0, #1
    72b0:	d0d8      	beq.n	7264 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    72b2:	1ca7      	adds	r7, r4, #2
    72b4:	4639      	mov	r1, r7
    72b6:	4628      	mov	r0, r5
    72b8:	f7ff ffab 	bl	7212 <counter_sub>
    72bc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    72c0:	d9d4      	bls.n	726c <set_absolute_alarm+0x18>
			cc_val = now + 2;
    72c2:	463d      	mov	r5, r7
    72c4:	e7d2      	b.n	726c <set_absolute_alarm+0x18>
}
    72c6:	4628      	mov	r0, r5
    72c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000072ca <compare_set>:
{
    72ca:	b5f0      	push	{r4, r5, r6, r7, lr}
    72cc:	b083      	sub	sp, #12
    72ce:	4604      	mov	r4, r0
    72d0:	4617      	mov	r7, r2
    72d2:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    72d4:	f7fb fcce 	bl	2c74 <compare_int_lock>
    72d8:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    72da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    72dc:	9301      	str	r3, [sp, #4]
    72de:	9b08      	ldr	r3, [sp, #32]
    72e0:	9300      	str	r3, [sp, #0]
    72e2:	463a      	mov	r2, r7
    72e4:	462b      	mov	r3, r5
    72e6:	4620      	mov	r0, r4
    72e8:	f7fb fdb4 	bl	2e54 <compare_set_nolocks>
    72ec:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    72ee:	4631      	mov	r1, r6
    72f0:	4620      	mov	r0, r4
    72f2:	f7fb fd23 	bl	2d3c <compare_int_unlock>
}
    72f6:	4628      	mov	r0, r5
    72f8:	b003      	add	sp, #12
    72fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000072fc <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    72fc:	b410      	push	{r4}
	*state = &config->states[0];
    72fe:	6843      	ldr	r3, [r0, #4]
    7300:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    7302:	e001      	b.n	7308 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
    7304:	3408      	adds	r4, #8
    7306:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    7308:	6814      	ldr	r4, [r2, #0]
    730a:	7a03      	ldrb	r3, [r0, #8]
    730c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    7310:	3b01      	subs	r3, #1
    7312:	f8d0 c004 	ldr.w	ip, [r0, #4]
    7316:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
    731a:	429c      	cmp	r4, r3
    731c:	d804      	bhi.n	7328 <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
    731e:	7963      	ldrb	r3, [r4, #5]
    7320:	428b      	cmp	r3, r1
    7322:	d1ef      	bne.n	7304 <pinctrl_lookup_state+0x8>
			return 0;
    7324:	2000      	movs	r0, #0
    7326:	e001      	b.n	732c <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
    7328:	f06f 0001 	mvn.w	r0, #1
}
    732c:	bc10      	pop	{r4}
    732e:	4770      	bx	lr

00007330 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    7330:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    7332:	2000      	movs	r0, #0
    7334:	f7fa ff3a 	bl	21ac <sys_arch_reboot>

00007338 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    7338:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    733a:	f7fe fa81 	bl	5840 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    733e:	bd08      	pop	{r3, pc}

00007340 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    7340:	b510      	push	{r4, lr}
    7342:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    7344:	f7fa fa78 	bl	1838 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    7348:	f7fa fb34 	bl	19b4 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    734c:	4620      	mov	r0, r4
    734e:	f7ff fff3 	bl	7338 <hw_cc3xx_init_internal>
	return res;
}
    7352:	bd10      	pop	{r4, pc}

00007354 <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7354:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7358:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    735c:	2b08      	cmp	r3, #8
    735e:	d001      	beq.n	7364 <nrf52_errata_36+0x10>
        return false;
    7360:	2000      	movs	r0, #0
    7362:	4770      	bx	lr
                        return true;
    7364:	2001      	movs	r0, #1
}
    7366:	4770      	bx	lr

00007368 <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7368:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    736c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    7370:	2b08      	cmp	r3, #8
    7372:	d001      	beq.n	7378 <nrf52_errata_66+0x10>
        return false;
    7374:	2000      	movs	r0, #0
    7376:	4770      	bx	lr
                        return true;
    7378:	2001      	movs	r0, #1
}
    737a:	4770      	bx	lr

0000737c <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    737c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7380:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    7384:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    7388:	2a08      	cmp	r2, #8
    738a:	d001      	beq.n	7390 <nrf52_errata_98+0x14>
        return false;
    738c:	2000      	movs	r0, #0
    738e:	4770      	bx	lr
                switch(var2)
    7390:	2b00      	cmp	r3, #0
    7392:	d804      	bhi.n	739e <nrf52_errata_98+0x22>
    7394:	e8df f003 	tbb	[pc, r3]
    7398:	01          	.byte	0x01
    7399:	00          	.byte	0x00
    739a:	2001      	movs	r0, #1
    739c:	4770      	bx	lr
                        return false;
    739e:	2000      	movs	r0, #0
}
    73a0:	4770      	bx	lr

000073a2 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    73a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    73a6:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    73aa:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    73ae:	2a08      	cmp	r2, #8
    73b0:	d001      	beq.n	73b6 <nrf52_errata_103+0x14>
        return false;
    73b2:	2000      	movs	r0, #0
    73b4:	4770      	bx	lr
                switch(var2)
    73b6:	2b00      	cmp	r3, #0
    73b8:	d804      	bhi.n	73c4 <nrf52_errata_103+0x22>
    73ba:	e8df f003 	tbb	[pc, r3]
    73be:	01          	.byte	0x01
    73bf:	00          	.byte	0x00
    73c0:	2001      	movs	r0, #1
    73c2:	4770      	bx	lr
                        return false;
    73c4:	2000      	movs	r0, #0
}
    73c6:	4770      	bx	lr

000073c8 <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    73c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    73cc:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    73d0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    73d4:	2a08      	cmp	r2, #8
    73d6:	d001      	beq.n	73dc <nrf52_errata_115+0x14>
        return false;
    73d8:	2000      	movs	r0, #0
    73da:	4770      	bx	lr
                switch(var2)
    73dc:	2b00      	cmp	r3, #0
    73de:	d804      	bhi.n	73ea <nrf52_errata_115+0x22>
    73e0:	e8df f003 	tbb	[pc, r3]
    73e4:	01          	.byte	0x01
    73e5:	00          	.byte	0x00
    73e6:	2001      	movs	r0, #1
    73e8:	4770      	bx	lr
                        return false;
    73ea:	2000      	movs	r0, #0
}
    73ec:	4770      	bx	lr

000073ee <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    73ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    73f2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    73f6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    73fa:	2a08      	cmp	r2, #8
    73fc:	d001      	beq.n	7402 <nrf52_errata_120+0x14>
        return false;
    73fe:	2000      	movs	r0, #0
    7400:	4770      	bx	lr
                switch(var2)
    7402:	2b00      	cmp	r3, #0
    7404:	d804      	bhi.n	7410 <nrf52_errata_120+0x22>
    7406:	e8df f003 	tbb	[pc, r3]
    740a:	01          	.byte	0x01
    740b:	00          	.byte	0x00
    740c:	2001      	movs	r0, #1
    740e:	4770      	bx	lr
                        return false;
    7410:	2000      	movs	r0, #0
}
    7412:	4770      	bx	lr

00007414 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7414:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7418:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    741c:	2b08      	cmp	r3, #8
    741e:	d001      	beq.n	7424 <nrf52_errata_136+0x10>
        return false;
    7420:	2000      	movs	r0, #0
    7422:	4770      	bx	lr
                        return true;
    7424:	2001      	movs	r0, #1
}
    7426:	4770      	bx	lr

00007428 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7428:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    742c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    7430:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    7434:	2a08      	cmp	r2, #8
    7436:	d001      	beq.n	743c <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    7438:	2000      	movs	r0, #0
    743a:	4770      	bx	lr
                switch(var2)
    743c:	2b04      	cmp	r3, #4
    743e:	d801      	bhi.n	7444 <nrf52_configuration_249+0x1c>
    7440:	2000      	movs	r0, #0
    7442:	4770      	bx	lr
                        return true;
    7444:	2001      	movs	r0, #1
    #endif
}
    7446:	4770      	bx	lr

00007448 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    7448:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    744a:	4780      	blx	r0
}
    744c:	bd08      	pop	{r3, pc}

0000744e <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    744e:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    7450:	f000 fb95 	bl	7b7e <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    7454:	bd08      	pop	{r3, pc}

00007456 <clock_initial_lfclksrc_get>:
}
    7456:	2000      	movs	r0, #0
    7458:	4770      	bx	lr

0000745a <clock_lfclksrc_tweak>:
{
    745a:	b538      	push	{r3, r4, r5, lr}
    745c:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
    745e:	6803      	ldr	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    7460:	2b01      	cmp	r3, #1
    7462:	d002      	beq.n	746a <clock_lfclksrc_tweak+0x10>
    7464:	b933      	cbnz	r3, 7474 <clock_lfclksrc_tweak+0x1a>
    7466:	2301      	movs	r3, #1
    7468:	e000      	b.n	746c <clock_lfclksrc_tweak+0x12>
    746a:	2301      	movs	r3, #1
    if (!is_correct_clk)
    746c:	461d      	mov	r5, r3
    746e:	b11b      	cbz	r3, 7478 <clock_lfclksrc_tweak+0x1e>
}
    7470:	4628      	mov	r0, r5
    7472:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    7474:	2300      	movs	r3, #0
    7476:	e7f9      	b.n	746c <clock_lfclksrc_tweak+0x12>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    7478:	2000      	movs	r0, #0
    747a:	f7fc f845 	bl	3508 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    747e:	f7ff ffea 	bl	7456 <clock_initial_lfclksrc_get>
    7482:	6020      	str	r0, [r4, #0]
    7484:	e7f4      	b.n	7470 <clock_lfclksrc_tweak+0x16>

00007486 <nrfx_clock_enable>:
{
    7486:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    7488:	2000      	movs	r0, #0
    748a:	f7fa fae7 	bl	1a5c <arch_irq_is_enabled>
    748e:	b130      	cbz	r0, 749e <nrfx_clock_enable+0x18>
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    7490:	f7ff ffe1 	bl	7456 <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    7494:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7498:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
}
    749c:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    749e:	f7fa fabb 	bl	1a18 <arch_irq_enable>
    74a2:	e7f5      	b.n	7490 <nrfx_clock_enable+0xa>

000074a4 <nrfx_clock_start>:
    switch (domain)
    74a4:	b110      	cbz	r0, 74ac <nrfx_clock_start+0x8>
    74a6:	2801      	cmp	r0, #1
    74a8:	d040      	beq.n	752c <nrfx_clock_start+0x88>
    74aa:	4770      	bx	lr
{
    74ac:	b500      	push	{lr}
    74ae:	b083      	sub	sp, #12
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    74b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    74b4:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    74b8:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    74bc:	9301      	str	r3, [sp, #4]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    74be:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    74c2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    74c6:	d11b      	bne.n	7500 <nrfx_clock_start+0x5c>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    74c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    74cc:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    74d0:	f013 0f01 	tst.w	r3, #1
    74d4:	d118      	bne.n	7508 <nrfx_clock_start+0x64>
                    lfclksrc = clock_initial_lfclksrc_get();
    74d6:	f7ff ffbe 	bl	7456 <clock_initial_lfclksrc_get>
    74da:	9001      	str	r0, [sp, #4]
    p_reg->LFCLKSRC = (uint32_t)(source);
    74dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    74e0:	9a01      	ldr	r2, [sp, #4]
    74e2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    74e6:	2200      	movs	r2, #0
    74e8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    74ec:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    74f0:	2202      	movs	r2, #2
    74f2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    74f6:	2201      	movs	r2, #1
    74f8:	609a      	str	r2, [r3, #8]
}
    74fa:	b003      	add	sp, #12
    74fc:	f85d fb04 	ldr.w	pc, [sp], #4
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    7500:	a801      	add	r0, sp, #4
    7502:	f7ff ffaa 	bl	745a <clock_lfclksrc_tweak>
    7506:	e7e9      	b.n	74dc <nrfx_clock_start+0x38>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    7508:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    750c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    7510:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    7514:	9301      	str	r3, [sp, #4]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    7516:	a801      	add	r0, sp, #4
    7518:	f7ff ff9f 	bl	745a <clock_lfclksrc_tweak>
    751c:	2800      	cmp	r0, #0
    751e:	d0dd      	beq.n	74dc <nrfx_clock_start+0x38>
    p_reg->INTENSET = mask;
    7520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7524:	2202      	movs	r2, #2
    7526:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    752a:	e7e6      	b.n	74fa <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    752c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7530:	2200      	movs	r2, #0
    7532:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    7536:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    753a:	2201      	movs	r2, #1
    753c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7540:	601a      	str	r2, [r3, #0]
    7542:	4770      	bx	lr

00007544 <nrfx_clock_stop>:
{
    7544:	b508      	push	{r3, lr}
    clock_stop(domain);
    7546:	f7fb ffdf 	bl	3508 <clock_stop>
}
    754a:	bd08      	pop	{r3, pc}

0000754c <pin_is_task_output>:
{
    754c:	b510      	push	{r4, lr}
    754e:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    7550:	f7fc f8b6 	bl	36c0 <pin_is_output>
    7554:	b128      	cbz	r0, 7562 <pin_is_task_output+0x16>
    7556:	4620      	mov	r0, r4
    7558:	f7fc f89c 	bl	3694 <pin_in_use_by_te>
    755c:	b118      	cbz	r0, 7566 <pin_is_task_output+0x1a>
    755e:	2001      	movs	r0, #1
    7560:	e000      	b.n	7564 <pin_is_task_output+0x18>
    7562:	2000      	movs	r0, #0
}
    7564:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    7566:	2000      	movs	r0, #0
    7568:	e7fc      	b.n	7564 <pin_is_task_output+0x18>

0000756a <pin_is_input>:
{
    756a:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    756c:	f7fc f8a8 	bl	36c0 <pin_is_output>
    7570:	f080 0001 	eor.w	r0, r0, #1
}
    7574:	b2c0      	uxtb	r0, r0
    7576:	bd08      	pop	{r3, pc}

00007578 <gpiote_polarity_to_trigger>:
}
    7578:	4770      	bx	lr

0000757a <gpiote_trigger_to_polarity>:
}
    757a:	4770      	bx	lr

0000757c <is_level>:
}
    757c:	2803      	cmp	r0, #3
    757e:	bf94      	ite	ls
    7580:	2000      	movls	r0, #0
    7582:	2001      	movhi	r0, #1
    7584:	4770      	bx	lr

00007586 <transfer_byte>:
{
    7586:	b430      	push	{r4, r5}
    7588:	b082      	sub	sp, #8
    return p_reg->RXD;
    758a:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    758e:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
    7590:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
    7594:	6a0b      	ldr	r3, [r1, #32]
    7596:	698a      	ldr	r2, [r1, #24]
    7598:	4293      	cmp	r3, r2
    759a:	d203      	bcs.n	75a4 <transfer_byte+0x1e>
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
    759c:	694a      	ldr	r2, [r1, #20]
    759e:	f89d 4007 	ldrb.w	r4, [sp, #7]
    75a2:	54d4      	strb	r4, [r2, r3]
    ++p_cb->bytes_transferred;
    75a4:	6a0b      	ldr	r3, [r1, #32]
    75a6:	3301      	adds	r3, #1
    75a8:	620b      	str	r3, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
    75aa:	1c5a      	adds	r2, r3, #1
    if (p_cb->abort)
    75ac:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
    75b0:	b13c      	cbz	r4, 75c2 <transfer_byte+0x3c>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    75b2:	690c      	ldr	r4, [r1, #16]
    75b4:	4294      	cmp	r4, r2
    75b6:	d900      	bls.n	75ba <transfer_byte+0x34>
            p_cb->evt.xfer_desc.tx_length = bytes_used;
    75b8:	610a      	str	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    75ba:	698c      	ldr	r4, [r1, #24]
    75bc:	4294      	cmp	r4, r2
    75be:	d900      	bls.n	75c2 <transfer_byte+0x3c>
            p_cb->evt.xfer_desc.rx_length = bytes_used;
    75c0:	618a      	str	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    75c2:	690c      	ldr	r4, [r1, #16]
    75c4:	4294      	cmp	r4, r2
    75c6:	d808      	bhi.n	75da <transfer_byte+0x54>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    75c8:	698d      	ldr	r5, [r1, #24]
    75ca:	4295      	cmp	r5, r2
    75cc:	d80d      	bhi.n	75ea <transfer_byte+0x64>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
    75ce:	42a3      	cmp	r3, r4
    75d0:	d310      	bcc.n	75f4 <transfer_byte+0x6e>
    75d2:	42ab      	cmp	r3, r5
    75d4:	d210      	bcs.n	75f8 <transfer_byte+0x72>
    75d6:	2001      	movs	r0, #1
    75d8:	e004      	b.n	75e4 <transfer_byte+0x5e>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
    75da:	68cb      	ldr	r3, [r1, #12]
    75dc:	5c9b      	ldrb	r3, [r3, r2]
    p_reg->TXD = data;
    75de:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
        return true;
    75e2:	2001      	movs	r0, #1
}
    75e4:	b002      	add	sp, #8
    75e6:	bc30      	pop	{r4, r5}
    75e8:	4770      	bx	lr
        nrf_spi_txd_set(p_spi, p_cb->orc);
    75ea:	7fcb      	ldrb	r3, [r1, #31]
    75ec:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
        return true;
    75f0:	2001      	movs	r0, #1
    75f2:	e7f7      	b.n	75e4 <transfer_byte+0x5e>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
    75f4:	2001      	movs	r0, #1
    75f6:	e7f5      	b.n	75e4 <transfer_byte+0x5e>
    75f8:	2000      	movs	r0, #0
    75fa:	e7f3      	b.n	75e4 <transfer_byte+0x5e>

000075fc <irq_handler>:
{
    75fc:	b510      	push	{r4, lr}
    75fe:	460c      	mov	r4, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7600:	2200      	movs	r2, #0
    7602:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
    7606:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    if (!transfer_byte(p_spi, p_cb))
    760a:	f7ff ffbc 	bl	7586 <transfer_byte>
    760e:	b100      	cbz	r0, 7612 <irq_handler+0x16>
}
    7610:	bd10      	pop	{r4, pc}
        finish_transfer(p_cb);
    7612:	4620      	mov	r0, r4
    7614:	f7fc fdd8 	bl	41c8 <finish_transfer>
}
    7618:	e7fa      	b.n	7610 <irq_handler+0x14>

0000761a <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    761a:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    761c:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
    761e:	4293      	cmp	r3, r2
    7620:	d804      	bhi.n	762c <_GetAvailWriteSpace+0x12>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    7622:	6880      	ldr	r0, [r0, #8]
    7624:	1a80      	subs	r0, r0, r2
    7626:	4403      	add	r3, r0
    7628:	1e58      	subs	r0, r3, #1
    762a:	4770      	bx	lr
    r = RdOff - WrOff - 1u;
    762c:	1a9b      	subs	r3, r3, r2
    762e:	1e58      	subs	r0, r3, #1
}
    7630:	4770      	bx	lr

00007632 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    7632:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7636:	4604      	mov	r4, r0
    7638:	4688      	mov	r8, r1
    763a:	4616      	mov	r6, r2
  WrOff = pRing->WrOff;
    763c:	68c5      	ldr	r5, [r0, #12]
  Rem = pRing->SizeOfBuffer - WrOff;
    763e:	6887      	ldr	r7, [r0, #8]
    7640:	eba7 0905 	sub.w	r9, r7, r5
  if (Rem > NumBytes) {
    7644:	4591      	cmp	r9, r2
    7646:	d909      	bls.n	765c <_WriteNoCheck+0x2a>
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    7648:	6840      	ldr	r0, [r0, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
    764a:	4428      	add	r0, r5
    764c:	f7ff f824 	bl	6698 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    7650:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
    7654:	4435      	add	r5, r6
    7656:	60e5      	str	r5, [r4, #12]
}
    7658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    765c:	6840      	ldr	r0, [r0, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    765e:	464a      	mov	r2, r9
    7660:	4428      	add	r0, r5
    7662:	f7ff f819 	bl	6698 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
    7666:	1bed      	subs	r5, r5, r7
    7668:	4435      	add	r5, r6
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    766a:	462a      	mov	r2, r5
    766c:	eb08 0109 	add.w	r1, r8, r9
    7670:	6860      	ldr	r0, [r4, #4]
    7672:	f7ff f811 	bl	6698 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    7676:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
    767a:	60e5      	str	r5, [r4, #12]
}
    767c:	e7ec      	b.n	7658 <_WriteNoCheck+0x26>

0000767e <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    767e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7682:	4606      	mov	r6, r0
    7684:	4688      	mov	r8, r1
    7686:	4617      	mov	r7, r2
  WrOff = pRing->WrOff;
    7688:	68c5      	ldr	r5, [r0, #12]
  NumBytesWritten = 0u;
    768a:	f04f 0900 	mov.w	r9, #0
    768e:	e01a      	b.n	76c6 <_WriteBlocking+0x48>
      NumBytesToWrite = RdOff - WrOff - 1u;
    7690:	1b64      	subs	r4, r4, r5
    7692:	1e62      	subs	r2, r4, #1
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    7694:	68b3      	ldr	r3, [r6, #8]
    7696:	1b5c      	subs	r4, r3, r5
    7698:	4294      	cmp	r4, r2
    769a:	bf28      	it	cs
    769c:	4614      	movcs	r4, r2
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    769e:	42bc      	cmp	r4, r7
    76a0:	bf28      	it	cs
    76a2:	463c      	movcs	r4, r7
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    76a4:	6870      	ldr	r0, [r6, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    76a6:	4622      	mov	r2, r4
    76a8:	4641      	mov	r1, r8
    76aa:	4428      	add	r0, r5
    76ac:	f7fe fff4 	bl	6698 <memcpy>
    NumBytesWritten += NumBytesToWrite;
    76b0:	44a1      	add	r9, r4
    pBuffer         += NumBytesToWrite;
    76b2:	44a0      	add	r8, r4
    NumBytes        -= NumBytesToWrite;
    76b4:	1b3f      	subs	r7, r7, r4
    WrOff           += NumBytesToWrite;
    76b6:	4425      	add	r5, r4
    if (WrOff == pRing->SizeOfBuffer) {
    76b8:	68b3      	ldr	r3, [r6, #8]
    76ba:	42ab      	cmp	r3, r5
    76bc:	d00b      	beq.n	76d6 <_WriteBlocking+0x58>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    76be:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
    76c2:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    76c4:	b14f      	cbz	r7, 76da <_WriteBlocking+0x5c>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    76c6:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
    76c8:	42a5      	cmp	r5, r4
    76ca:	d3e1      	bcc.n	7690 <_WriteBlocking+0x12>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    76cc:	68b2      	ldr	r2, [r6, #8]
    76ce:	1b64      	subs	r4, r4, r5
    76d0:	4414      	add	r4, r2
    76d2:	1e62      	subs	r2, r4, #1
    76d4:	e7de      	b.n	7694 <_WriteBlocking+0x16>
      WrOff = 0u;
    76d6:	2500      	movs	r5, #0
    76d8:	e7f1      	b.n	76be <_WriteBlocking+0x40>
}
    76da:	4648      	mov	r0, r9
    76dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000076e0 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    76e0:	b508      	push	{r3, lr}
  _DoInit();
    76e2:	f7fc ff05 	bl	44f0 <_DoInit>
}
    76e6:	bd08      	pop	{r3, pc}

000076e8 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    76e8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    76ea:	f7ff fff9 	bl	76e0 <SEGGER_RTT_Init>

	return 0;
}
    76ee:	2000      	movs	r0, #0
    76f0:	bd08      	pop	{r3, pc}

000076f2 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    76f2:	b148      	cbz	r0, 7708 <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    76f4:	68c3      	ldr	r3, [r0, #12]
    76f6:	8818      	ldrh	r0, [r3, #0]
    76f8:	f3c0 0008 	ubfx	r0, r0, #0, #9
    76fc:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    7700:	bf14      	ite	ne
    7702:	2000      	movne	r0, #0
    7704:	2001      	moveq	r0, #1
    7706:	4770      	bx	lr
		return false;
    7708:	2000      	movs	r0, #0
}
    770a:	4770      	bx	lr

0000770c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    770c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    770e:	4605      	mov	r5, r0
    7710:	460e      	mov	r6, r1
	__asm__ volatile(
    7712:	f04f 0320 	mov.w	r3, #32
    7716:	f3ef 8711 	mrs	r7, BASEPRI
    771a:	f383 8812 	msr	BASEPRI_MAX, r3
    771e:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    7722:	f7fd fee1 	bl	54e8 <z_impl_z_current_get>
    7726:	4604      	mov	r4, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    7728:	4631      	mov	r1, r6
    772a:	4628      	mov	r0, r5
    772c:	f7ff fe00 	bl	7330 <k_sys_fatal_error_handler>
	__asm__ volatile(
    7730:	f387 8811 	msr	BASEPRI, r7
    7734:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    7738:	4620      	mov	r0, r4
    773a:	f7fa fc61 	bl	2000 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    773e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007740 <z_early_memset>:
{
    7740:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
    7742:	f7fe ffd8 	bl	66f6 <memset>
}
    7746:	bd08      	pop	{r3, pc}

00007748 <z_early_memcpy>:
{
    7748:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
    774a:	f7fe ffa5 	bl	6698 <memcpy>
}
    774e:	bd08      	pop	{r3, pc}

00007750 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    7750:	68c2      	ldr	r2, [r0, #12]
    7752:	6903      	ldr	r3, [r0, #16]
    7754:	431a      	orrs	r2, r3
    7756:	f012 0203 	ands.w	r2, r2, #3
    775a:	d10d      	bne.n	7778 <create_free_list+0x28>
	slab->free_list = NULL;
    775c:	2100      	movs	r1, #0
    775e:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    7760:	e005      	b.n	776e <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    7762:	6941      	ldr	r1, [r0, #20]
    7764:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    7766:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
    7768:	68c1      	ldr	r1, [r0, #12]
    776a:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    776c:	3201      	adds	r2, #1
    776e:	6881      	ldr	r1, [r0, #8]
    7770:	4291      	cmp	r1, r2
    7772:	d8f6      	bhi.n	7762 <create_free_list+0x12>
	return 0;
    7774:	2000      	movs	r0, #0
    7776:	4770      	bx	lr
		return -EINVAL;
    7778:	f06f 0015 	mvn.w	r0, #21
}
    777c:	4770      	bx	lr

0000777e <k_mem_slab_init>:
{
    777e:	b510      	push	{r4, lr}
    7780:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    7782:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
    7784:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
    7786:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    7788:	2300      	movs	r3, #0
    778a:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
    778c:	f7ff ffe0 	bl	7750 <create_free_list>
	if (rc < 0) {
    7790:	2800      	cmp	r0, #0
    7792:	db01      	blt.n	7798 <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
    7794:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    7796:	6064      	str	r4, [r4, #4]
}
    7798:	bd10      	pop	{r4, pc}

0000779a <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    779a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    779c:	4604      	mov	r4, r0
    779e:	460d      	mov	r5, r1
	__asm__ volatile(
    77a0:	f04f 0320 	mov.w	r3, #32
    77a4:	f3ef 8611 	mrs	r6, BASEPRI
    77a8:	f383 8812 	msr	BASEPRI_MAX, r3
    77ac:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    77b0:	6943      	ldr	r3, [r0, #20]
    77b2:	b163      	cbz	r3, 77ce <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    77b4:	682b      	ldr	r3, [r5, #0]
    77b6:	6962      	ldr	r2, [r4, #20]
    77b8:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    77ba:	682b      	ldr	r3, [r5, #0]
    77bc:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    77be:	69a3      	ldr	r3, [r4, #24]
    77c0:	3b01      	subs	r3, #1
    77c2:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    77c4:	f386 8811 	msr	BASEPRI, r6
    77c8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    77cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    77ce:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    77d2:	f000 f92a 	bl	7a2a <z_unpend_first_thread>
		if (pending_thread != NULL) {
    77d6:	2800      	cmp	r0, #0
    77d8:	d0ec      	beq.n	77b4 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    77da:	682a      	ldr	r2, [r5, #0]
    77dc:	2100      	movs	r1, #0
    77de:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    77e2:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    77e4:	f000 f881 	bl	78ea <z_ready_thread>
			z_reschedule(&slab->lock, key);
    77e8:	4631      	mov	r1, r6
    77ea:	4638      	mov	r0, r7
    77ec:	f7fd fb00 	bl	4df0 <z_reschedule>
			return;
    77f0:	e7ec      	b.n	77cc <k_mem_slab_free+0x32>

000077f2 <setup_thread_stack>:
{
    77f2:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    77f4:	3207      	adds	r2, #7
    77f6:	f022 0207 	bic.w	r2, r2, #7
    77fa:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    77fe:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    7802:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    7806:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    780a:	2200      	movs	r2, #0
    780c:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
    7810:	18c8      	adds	r0, r1, r3
    7812:	bc10      	pop	{r4}
    7814:	4770      	bx	lr

00007816 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    7816:	f3ef 8005 	mrs	r0, IPSR
}
    781a:	3800      	subs	r0, #0
    781c:	bf18      	it	ne
    781e:	2001      	movne	r0, #1
    7820:	4770      	bx	lr

00007822 <z_impl_k_thread_start>:
{
    7822:	b508      	push	{r3, lr}
	z_sched_start(thread);
    7824:	f7fd fc32 	bl	508c <z_sched_start>
}
    7828:	bd08      	pop	{r3, pc}

0000782a <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    782a:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    782c:	2400      	movs	r4, #0
    782e:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    7830:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    7832:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    7834:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    7836:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    7838:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    783a:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    783c:	bc10      	pop	{r4}
    783e:	4770      	bx	lr

00007840 <z_pm_save_idle_exit>:
{
    7840:	b508      	push	{r3, lr}
	pm_system_resume();
    7842:	f7f9 fe77 	bl	1534 <pm_system_resume>
	sys_clock_idle_exit();
    7846:	f7ff fce3 	bl	7210 <sys_clock_idle_exit>
}
    784a:	bd08      	pop	{r3, pc}

0000784c <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    784c:	4288      	cmp	r0, r1
    784e:	da00      	bge.n	7852 <new_prio_for_inheritance+0x6>
    7850:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    7852:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    7856:	db01      	blt.n	785c <new_prio_for_inheritance+0x10>
    7858:	4608      	mov	r0, r1
    785a:	4770      	bx	lr
    785c:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    7860:	4770      	bx	lr

00007862 <adjust_owner_prio>:
{
    7862:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    7864:	6880      	ldr	r0, [r0, #8]
    7866:	f990 300e 	ldrsb.w	r3, [r0, #14]
    786a:	428b      	cmp	r3, r1
    786c:	d101      	bne.n	7872 <adjust_owner_prio+0x10>
	return false;
    786e:	2000      	movs	r0, #0
}
    7870:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    7872:	f7fd fc59 	bl	5128 <z_set_prio>
    7876:	e7fb      	b.n	7870 <adjust_owner_prio+0xe>

00007878 <z_impl_k_mutex_init>:
{
    7878:	4603      	mov	r3, r0
	mutex->owner = NULL;
    787a:	2000      	movs	r0, #0
    787c:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    787e:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    7880:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    7882:	605b      	str	r3, [r3, #4]
}
    7884:	4770      	bx	lr

00007886 <thread_active_elsewhere>:
}
    7886:	2000      	movs	r0, #0
    7888:	4770      	bx	lr

0000788a <pended_on_thread>:
}
    788a:	6880      	ldr	r0, [r0, #8]
    788c:	4770      	bx	lr

0000788e <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    788e:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    7892:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    7896:	4283      	cmp	r3, r0
    7898:	d001      	beq.n	789e <z_sched_prio_cmp+0x10>
		return b2 - b1;
    789a:	1ac0      	subs	r0, r0, r3
    789c:	4770      	bx	lr
	return 0;
    789e:	2000      	movs	r0, #0
}
    78a0:	4770      	bx	lr

000078a2 <z_reschedule_irqlock>:
{
    78a2:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    78a4:	4603      	mov	r3, r0
    78a6:	b920      	cbnz	r0, 78b2 <z_reschedule_irqlock+0x10>
    78a8:	f3ef 8205 	mrs	r2, IPSR
    78ac:	b942      	cbnz	r2, 78c0 <z_reschedule_irqlock+0x1e>
    78ae:	2201      	movs	r2, #1
    78b0:	e000      	b.n	78b4 <z_reschedule_irqlock+0x12>
    78b2:	2200      	movs	r2, #0
	if (resched(key)) {
    78b4:	b932      	cbnz	r2, 78c4 <z_reschedule_irqlock+0x22>
    78b6:	f383 8811 	msr	BASEPRI, r3
    78ba:	f3bf 8f6f 	isb	sy
}
    78be:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    78c0:	2200      	movs	r2, #0
    78c2:	e7f7      	b.n	78b4 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    78c4:	4618      	mov	r0, r3
    78c6:	f7fa f90d 	bl	1ae4 <arch_swap>
	return ret;
    78ca:	e7f8      	b.n	78be <z_reschedule_irqlock+0x1c>

000078cc <z_priq_dumb_remove>:
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    78cc:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    78ce:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
    78d0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    78d2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    78d4:	2300      	movs	r3, #0
    78d6:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    78d8:	604b      	str	r3, [r1, #4]
}
    78da:	4770      	bx	lr

000078dc <z_priq_dumb_best>:
{
    78dc:	4603      	mov	r3, r0
	return list->head == list;
    78de:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    78e0:	4283      	cmp	r3, r0
    78e2:	d000      	beq.n	78e6 <z_priq_dumb_best+0xa>
}
    78e4:	4770      	bx	lr
	struct k_thread *thread = NULL;
    78e6:	2000      	movs	r0, #0
	return thread;
    78e8:	e7fc      	b.n	78e4 <z_priq_dumb_best+0x8>

000078ea <z_ready_thread>:
{
    78ea:	b538      	push	{r3, r4, r5, lr}
    78ec:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    78ee:	2300      	movs	r3, #0
	__asm__ volatile(
    78f0:	f04f 0220 	mov.w	r2, #32
    78f4:	f3ef 8511 	mrs	r5, BASEPRI
    78f8:	f382 8812 	msr	BASEPRI_MAX, r2
    78fc:	f3bf 8f6f 	isb	sy
    7900:	e004      	b.n	790c <z_ready_thread+0x22>
	__asm__ volatile(
    7902:	f385 8811 	msr	BASEPRI, r5
    7906:	f3bf 8f6f 	isb	sy
    790a:	2301      	movs	r3, #1
    790c:	b943      	cbnz	r3, 7920 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    790e:	4620      	mov	r0, r4
    7910:	f7ff ffb9 	bl	7886 <thread_active_elsewhere>
    7914:	2800      	cmp	r0, #0
    7916:	d1f4      	bne.n	7902 <z_ready_thread+0x18>
			ready_thread(thread);
    7918:	4620      	mov	r0, r4
    791a:	f7fd fb77 	bl	500c <ready_thread>
    791e:	e7f0      	b.n	7902 <z_ready_thread+0x18>
}
    7920:	bd38      	pop	{r3, r4, r5, pc}

00007922 <z_thread_timeout>:
{
    7922:	b570      	push	{r4, r5, r6, lr}
    7924:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    7926:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
    792a:	2300      	movs	r3, #0
	__asm__ volatile(
    792c:	f04f 0220 	mov.w	r2, #32
    7930:	f3ef 8611 	mrs	r6, BASEPRI
    7934:	f382 8812 	msr	BASEPRI_MAX, r2
    7938:	f3bf 8f6f 	isb	sy
    793c:	e011      	b.n	7962 <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    793e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    7942:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    7946:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    794a:	f023 0310 	bic.w	r3, r3, #16
    794e:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    7952:	4628      	mov	r0, r5
    7954:	f7fd fb5a 	bl	500c <ready_thread>
	__asm__ volatile(
    7958:	f386 8811 	msr	BASEPRI, r6
    795c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    7960:	2301      	movs	r3, #1
    7962:	b9ab      	cbnz	r3, 7990 <z_thread_timeout+0x6e>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    7964:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    7968:	f013 0f28 	tst.w	r3, #40	; 0x28
    796c:	d1f4      	bne.n	7958 <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
    796e:	f854 3c10 	ldr.w	r3, [r4, #-16]
    7972:	2b00      	cmp	r3, #0
    7974:	d0e3      	beq.n	793e <z_thread_timeout+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    7976:	4628      	mov	r0, r5
    7978:	f7ff ff87 	bl	788a <pended_on_thread>
    797c:	4629      	mov	r1, r5
    797e:	f7ff ffa5 	bl	78cc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    7982:	7b6b      	ldrb	r3, [r5, #13]
    7984:	f023 0302 	bic.w	r3, r3, #2
    7988:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    798a:	2300      	movs	r3, #0
    798c:	60ab      	str	r3, [r5, #8]
}
    798e:	e7d6      	b.n	793e <z_thread_timeout+0x1c>
}
    7990:	bd70      	pop	{r4, r5, r6, pc}

00007992 <add_to_waitq_locked>:
{
    7992:	b570      	push	{r4, r5, r6, lr}
    7994:	4605      	mov	r5, r0
    7996:	460e      	mov	r6, r1
	unready_thread(thread);
    7998:	f7fd fb96 	bl	50c8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    799c:	7b6b      	ldrb	r3, [r5, #13]
    799e:	f043 0302 	orr.w	r3, r3, #2
    79a2:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    79a4:	b1b6      	cbz	r6, 79d4 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
    79a6:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    79a8:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    79aa:	42a6      	cmp	r6, r4
    79ac:	d019      	beq.n	79e2 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    79ae:	b164      	cbz	r4, 79ca <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
    79b0:	4621      	mov	r1, r4
    79b2:	4628      	mov	r0, r5
    79b4:	f7ff ff6b 	bl	788e <z_sched_prio_cmp>
    79b8:	2800      	cmp	r0, #0
    79ba:	dc0c      	bgt.n	79d6 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    79bc:	b12c      	cbz	r4, 79ca <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
    79be:	6873      	ldr	r3, [r6, #4]
    79c0:	429c      	cmp	r4, r3
    79c2:	d002      	beq.n	79ca <add_to_waitq_locked+0x38>
    79c4:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    79c6:	2c00      	cmp	r4, #0
    79c8:	d1f1      	bne.n	79ae <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
    79ca:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    79cc:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    79ce:	606b      	str	r3, [r5, #4]
	tail->next = node;
    79d0:	601d      	str	r5, [r3, #0]
	list->tail = node;
    79d2:	6075      	str	r5, [r6, #4]
}
    79d4:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
    79d6:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    79d8:	606b      	str	r3, [r5, #4]
	node->next = successor;
    79da:	602c      	str	r4, [r5, #0]
	prev->next = node;
    79dc:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    79de:	6065      	str	r5, [r4, #4]
}
    79e0:	e7f8      	b.n	79d4 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    79e2:	2400      	movs	r4, #0
    79e4:	e7e3      	b.n	79ae <add_to_waitq_locked+0x1c>

000079e6 <pend>:
{
    79e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    79ea:	4605      	mov	r5, r0
    79ec:	460e      	mov	r6, r1
    79ee:	4691      	mov	r9, r2
    79f0:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    79f2:	2400      	movs	r4, #0
	__asm__ volatile(
    79f4:	f04f 0320 	mov.w	r3, #32
    79f8:	f3ef 8711 	mrs	r7, BASEPRI
    79fc:	f383 8812 	msr	BASEPRI_MAX, r3
    7a00:	f3bf 8f6f 	isb	sy
    7a04:	e008      	b.n	7a18 <pend+0x32>
		add_to_waitq_locked(thread, wait_q);
    7a06:	4631      	mov	r1, r6
    7a08:	4628      	mov	r0, r5
    7a0a:	f7ff ffc2 	bl	7992 <add_to_waitq_locked>
	__asm__ volatile(
    7a0e:	f387 8811 	msr	BASEPRI, r7
    7a12:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    7a16:	2401      	movs	r4, #1
    7a18:	2c00      	cmp	r4, #0
    7a1a:	d0f4      	beq.n	7a06 <pend+0x20>
	add_thread_timeout(thread, timeout);
    7a1c:	464a      	mov	r2, r9
    7a1e:	4643      	mov	r3, r8
    7a20:	4628      	mov	r0, r5
    7a22:	f7fd f987 	bl	4d34 <add_thread_timeout>
}
    7a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00007a2a <z_unpend_first_thread>:
{
    7a2a:	b570      	push	{r4, r5, r6, lr}
    7a2c:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    7a2e:	2300      	movs	r3, #0
	__asm__ volatile(
    7a30:	f04f 0220 	mov.w	r2, #32
    7a34:	f3ef 8611 	mrs	r6, BASEPRI
    7a38:	f382 8812 	msr	BASEPRI_MAX, r2
    7a3c:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    7a40:	461c      	mov	r4, r3
    7a42:	e004      	b.n	7a4e <z_unpend_first_thread+0x24>
	__asm__ volatile(
    7a44:	f386 8811 	msr	BASEPRI, r6
    7a48:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    7a4c:	2301      	movs	r3, #1
    7a4e:	b9ab      	cbnz	r3, 7a7c <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
    7a50:	4628      	mov	r0, r5
    7a52:	f7ff ff43 	bl	78dc <z_priq_dumb_best>
		if (thread != NULL) {
    7a56:	4604      	mov	r4, r0
    7a58:	2800      	cmp	r0, #0
    7a5a:	d0f3      	beq.n	7a44 <z_unpend_first_thread+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    7a5c:	f7ff ff15 	bl	788a <pended_on_thread>
    7a60:	4621      	mov	r1, r4
    7a62:	f7ff ff33 	bl	78cc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    7a66:	7b63      	ldrb	r3, [r4, #13]
    7a68:	f023 0302 	bic.w	r3, r3, #2
    7a6c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    7a6e:	2300      	movs	r3, #0
    7a70:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
    7a72:	f104 0018 	add.w	r0, r4, #24
    7a76:	f000 f81e 	bl	7ab6 <z_abort_timeout>
    7a7a:	e7e3      	b.n	7a44 <z_unpend_first_thread+0x1a>
}
    7a7c:	4620      	mov	r0, r4
    7a7e:	bd70      	pop	{r4, r5, r6, pc}

00007a80 <init_ready_q>:
	sys_dlist_init(&rq->runq);
    7a80:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    7a82:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    7a84:	6083      	str	r3, [r0, #8]
}
    7a86:	4770      	bx	lr

00007a88 <remove_timeout>:
{
    7a88:	b510      	push	{r4, lr}
    7a8a:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    7a8c:	f7fd fd7e 	bl	558c <next>
    7a90:	b148      	cbz	r0, 7aa6 <remove_timeout+0x1e>
    7a92:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    7a94:	6920      	ldr	r0, [r4, #16]
    7a96:	6961      	ldr	r1, [r4, #20]
    7a98:	6913      	ldr	r3, [r2, #16]
    7a9a:	181b      	adds	r3, r3, r0
    7a9c:	6950      	ldr	r0, [r2, #20]
    7a9e:	eb41 0100 	adc.w	r1, r1, r0
    7aa2:	6113      	str	r3, [r2, #16]
    7aa4:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    7aa6:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    7aa8:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    7aaa:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    7aac:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    7aae:	2300      	movs	r3, #0
    7ab0:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    7ab2:	6063      	str	r3, [r4, #4]
}
    7ab4:	bd10      	pop	{r4, pc}

00007ab6 <z_abort_timeout>:
{
    7ab6:	b570      	push	{r4, r5, r6, lr}
    7ab8:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    7aba:	2300      	movs	r3, #0
	__asm__ volatile(
    7abc:	f04f 0220 	mov.w	r2, #32
    7ac0:	f3ef 8611 	mrs	r6, BASEPRI
    7ac4:	f382 8812 	msr	BASEPRI_MAX, r2
    7ac8:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    7acc:	f06f 0015 	mvn.w	r0, #21
    7ad0:	e004      	b.n	7adc <z_abort_timeout+0x26>
	__asm__ volatile(
    7ad2:	f386 8811 	msr	BASEPRI, r6
    7ad6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    7ada:	2301      	movs	r3, #1
    7adc:	461d      	mov	r5, r3
    7ade:	b93b      	cbnz	r3, 7af0 <z_abort_timeout+0x3a>
	return node->next != NULL;
    7ae0:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    7ae2:	2b00      	cmp	r3, #0
    7ae4:	d0f5      	beq.n	7ad2 <z_abort_timeout+0x1c>
			remove_timeout(to);
    7ae6:	4620      	mov	r0, r4
    7ae8:	f7ff ffce 	bl	7a88 <remove_timeout>
			ret = 0;
    7aec:	4628      	mov	r0, r5
    7aee:	e7f0      	b.n	7ad2 <z_abort_timeout+0x1c>
}
    7af0:	bd70      	pop	{r4, r5, r6, pc}

00007af2 <z_get_next_timeout_expiry>:
{
    7af2:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    7af4:	2300      	movs	r3, #0
	__asm__ volatile(
    7af6:	f04f 0220 	mov.w	r2, #32
    7afa:	f3ef 8411 	mrs	r4, BASEPRI
    7afe:	f382 8812 	msr	BASEPRI_MAX, r2
    7b02:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    7b06:	f04f 30ff 	mov.w	r0, #4294967295
    7b0a:	e006      	b.n	7b1a <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
    7b0c:	f7fd fd56 	bl	55bc <next_timeout>
	__asm__ volatile(
    7b10:	f384 8811 	msr	BASEPRI, r4
    7b14:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    7b18:	2301      	movs	r3, #1
    7b1a:	2b00      	cmp	r3, #0
    7b1c:	d0f6      	beq.n	7b0c <z_get_next_timeout_expiry+0x1a>
}
    7b1e:	bd10      	pop	{r4, pc}

00007b20 <z_set_timeout_expiry>:
{
    7b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7b22:	4605      	mov	r5, r0
    7b24:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
    7b26:	2300      	movs	r3, #0
	__asm__ volatile(
    7b28:	f04f 0220 	mov.w	r2, #32
    7b2c:	f3ef 8611 	mrs	r6, BASEPRI
    7b30:	f382 8812 	msr	BASEPRI_MAX, r2
    7b34:	f3bf 8f6f 	isb	sy
    7b38:	e00a      	b.n	7b50 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
    7b3a:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    7b3c:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    7b40:	2801      	cmp	r0, #1
    7b42:	dd00      	ble.n	7b46 <z_set_timeout_expiry+0x26>
    7b44:	b97c      	cbnz	r4, 7b66 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
    7b46:	f386 8811 	msr	BASEPRI, r6
    7b4a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    7b4e:	2301      	movs	r3, #1
    7b50:	461c      	mov	r4, r3
    7b52:	b97b      	cbnz	r3, 7b74 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
    7b54:	f7fd fd32 	bl	55bc <next_timeout>
			      || (ticks <= next_to);
    7b58:	f1b0 3fff 	cmp.w	r0, #4294967295
    7b5c:	d0ed      	beq.n	7b3a <z_set_timeout_expiry+0x1a>
    7b5e:	42a8      	cmp	r0, r5
    7b60:	dbec      	blt.n	7b3c <z_set_timeout_expiry+0x1c>
    7b62:	2401      	movs	r4, #1
    7b64:	e7ea      	b.n	7b3c <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    7b66:	4639      	mov	r1, r7
    7b68:	42a8      	cmp	r0, r5
    7b6a:	bfa8      	it	ge
    7b6c:	4628      	movge	r0, r5
    7b6e:	f7fb fa67 	bl	3040 <sys_clock_set_timeout>
    7b72:	e7e8      	b.n	7b46 <z_set_timeout_expiry+0x26>
}
    7b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007b76 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    7b76:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    7b78:	f7fd fe34 	bl	57e4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    7b7c:	bd08      	pop	{r3, pc}

00007b7e <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    7b7e:	b900      	cbnz	r0, 7b82 <z_impl_k_busy_wait+0x4>
    7b80:	4770      	bx	lr
{
    7b82:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    7b84:	f7fa fb28 	bl	21d8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    7b88:	bd08      	pop	{r3, pc}

00007b8a <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    7b8a:	4770      	bx	lr

00007b8c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    7b8c:	f7fb bb92 	b.w	32b4 <SystemInit>
